initSidebarItems({"fn":[["clean","Remove the `\"0x\"`, if present, from the left of `s`, returning the remaining slice."],["log2","Returns log2."]],"macro":[["flush!",""],["flushln!",""],["map!",""],["mapx!",""],["x!",""],["xjson!",""],["xx!",""]],"mod":[["bytes","Unified interfaces for bytes operations on basic types"],["chainfilter","Multilevel blockchain bloom filter."],["common","Utils common types and macros global reexport."],["crypto","Ethcore crypto."],["error","General error types for use in ethcore."],["from_json","Coversion from json."],["hash","General hash types, a fixed-size raw-data type used as the output of hash functions."],["hashdb","Database of byte-slices keyed to their Keccak hash."],["io","General IO module."],["journaldb","Disk-backed HashDB implementation."],["keys","Key management module"],["log","Common log helper functions"],["memorydb","Reference-counted memory-based HashDB implementation."],["misc","Diff misc."],["network","Network and general IO module."],["nibbleslice","Nibble-orientated view onto byte-slice, allowing nibble-precision offsets."],["overlaydb","Disk-backed HashDB implementation."],["panics","Panic utilities"],["rlp","Rlp serialization module"],["semantic_version","Semantic version formatting and comparing."],["sha3","Wrapper around tiny-keccak crate."],["squeeze","Helper module that should be used to randomly squeeze caches to a given size in bytes"],["standard","Std lib global reexports."],["trie","Trie interface and implementation."],["triehash","Generetes trie root."],["uint","Big unsigned integer types"],["vector","Vector extensions."]]});