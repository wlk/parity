var searchIndex = {};
searchIndex['ethcore_util'] = {"items":[[5,"clean","ethcore_util","Remove the `\"0x\"`, if present, from the left of `s`, returning the remaining slice.",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[5,"log2","","Returns log2.",null,{"inputs":[{"name":"usize"}],"output":{"name":"u32"}}],[0,"standard","","Std lib global reexports.",null,null],[0,"io","ethcore_util::standard","Traits, helpers, and type definitions for core I/O functionality.",null,null],[0,"prelude","ethcore_util::standard::io","The I/O Prelude",null,null],[8,"Read","ethcore_util::standard::io::prelude","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",0,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",0,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",0,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",0,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",0,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",0,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",0,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",0,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",0,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[11,"tee","","Creates a reader adaptor which will write all read data into the given\noutput stream.",0,{"inputs":[{"name":"read"},{"name":"w"}],"output":{"name":"tee"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",1,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",1,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",1,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",1,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",1,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[11,"broadcast","","Creates a new writer which will write all data to both this writer and\nanother writer.",1,{"inputs":[{"name":"write"},{"name":"w"}],"output":{"name":"broadcast"}}],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",2,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",2,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",2,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",2,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",2,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",2,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",3,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[8,"Read","ethcore_util::standard::io","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",0,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",0,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",0,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",0,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",0,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",0,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",0,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",0,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",0,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[11,"tee","","Creates a reader adaptor which will write all read data into the given\noutput stream.",0,{"inputs":[{"name":"read"},{"name":"w"}],"output":{"name":"tee"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",1,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",1,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",1,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",1,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",1,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[11,"broadcast","","Creates a new writer which will write all data to both this writer and\nanother writer.",1,{"inputs":[{"name":"write"},{"name":"w"}],"output":{"name":"broadcast"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",3,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"from","alloc::boxed","",4,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",4,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",4,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",4,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",4,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",4,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",5,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",6,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",7,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",8,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",9,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",10,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","ethcore_util::standard","Returns true if the boxed type is the same as `T`",11,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",11,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",11,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",11,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",11,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",11,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",12,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"shl","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",13,null],[11,"shr","","",13,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"add","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",13,null],[11,"sub","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",13,null],[11,"mul","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",13,null],[11,"div","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",13,null],[11,"rem","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",13,null],[11,"not","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",13,null],[11,"bitor","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",13,null],[11,"bitand","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",13,null],[11,"clone","std::thread::local","",14,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",14,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",15,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",15,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::elf","",16,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",16,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"new","std::thread::local::os","",17,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",17,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",18,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",18,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",18,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",19,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",19,null],[11,"get","","",19,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",20,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",20,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",20,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",20,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",21,null],[11,"name","","Gets the thread's name.",21,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",21,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",22,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",22,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",23,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",24,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",25,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",25,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",25,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",27,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",27,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",24,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",24,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",24,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",24,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",24,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",24,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",24,null],[11,"next","","",27,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",27,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",27,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",27,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",26,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",26,null],[11,"take","","Removes this bucket's key and value from the hashtable.",26,null],[11,"replace","","",26,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",26,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",26,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",26,null],[11,"expect_full","","",28,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",29,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",29,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",30,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",31,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",31,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",33,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"len","","",33,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",34,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"len","","",34,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",35,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"len","","",35,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",36,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"len","","",36,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",36,null],[11,"clone","","",30,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",30,null],[11,"clone","std::collections::hash::map","",37,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",38,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",38,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",38,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",38,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",38,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",38,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",38,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",38,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",38,null],[11,"get","","Returns a reference to the value corresponding to the key.",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",38,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",38,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",39,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",40,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",41,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",39,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"len","","",39,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",42,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"len","","",42,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",43,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"len","","",43,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",40,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"len","","",40,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",41,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"len","","",41,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",44,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"len","","",44,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",45,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",45,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",46,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",46,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",46,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",46,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",46,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",47,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",38,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",38,null],[11,"extend","","",38,null],[11,"clone","","",48,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",48,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"build_hasher","","",48,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",48,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"get","","",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",38,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",38,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",49,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",49,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",49,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",49,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",49,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",49,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",49,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",49,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",49,null],[11,"contains","","Returns `true` if the set contains a value.",49,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",49,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",49,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",49,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",49,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",49,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",49,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",49,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",49,null],[11,"extend","","",49,null],[11,"default","","",49,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",49,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",50,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",50,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"len","","",50,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",51,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"len","","",51,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",52,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"len","","",52,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",53,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",53,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"clone","","",54,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",54,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"clone","","",55,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",55,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"clone","","",56,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",56,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"hasher","std::collections::hash::state","",57,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",57,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",57,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",58,null],[11,"default","","",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",58,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",58,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",58,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",58,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",58,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",58,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",58,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",58,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",58,null],[11,"drop","","",59,null],[11,"clone","","",60,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",60,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",61,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",58,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",63,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",58,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",58,null],[11,"extend","","",58,null],[11,"clone","collections::linked_list","",64,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",66,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",66,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",67,null],[11,"iter","","Provides a forward iterator.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",67,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",67,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",67,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",67,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",67,null],[11,"next","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",68,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",67,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",67,null],[11,"extend","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",67,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"clone","collections::vec_deque","",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",69,null],[11,"default","","",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",69,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",69,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",69,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",69,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",69,null],[11,"iter","","Returns a front-to-back iterator.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",69,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",69,null],[11,"len","","Returns the number of elements in the `VecDeque`.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",69,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",69,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",69,null],[11,"push_back","","Appends an element to the back of a buffer",69,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",69,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",69,null],[11,"retain","","Retains only the elements specified by the predicate.",69,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",69,null],[11,"clone","","",70,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",70,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",72,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",72,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",73,null],[11,"next","","",73,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",69,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",69,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",69,null],[11,"index","","",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",69,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",69,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",69,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",69,null],[11,"extend","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","std::dynamic_lib","",74,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",74,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",74,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",74,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",74,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",74,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",74,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",75,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next","","",76,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"clone","","",77,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",77,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",77,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",78,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"fmt","","",79,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",79,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",80,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"len","","",80,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",81,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"len","","",81,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",82,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",82,null],[11,"cmp","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"fmt","","",84,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"fmt","","",85,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"intostringerror"}],"output":{"name":"intostringerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",82,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",82,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a CString that was transferred to C.",82,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",82,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",82,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",82,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",82,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",82,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",82,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",83,null],[11,"as_ptr","","Returns the inner pointer to this C string.",83,null],[11,"to_bytes","","Converts this C string to a byte slice.",83,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",83,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",83,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",83,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",82,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",82,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::vec","",63,{"inputs":[{"name":"vec"},{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",83,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",82,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",84,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",84,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",84,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",84,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",86,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",85,{"inputs":[{"name":"intostringerror"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",85,{"inputs":[{"name":"intostringerror"}],"output":{"name":"utf8error"}}],[11,"description","","",85,{"inputs":[{"name":"intostringerror"}],"output":{"name":"str"}}],[11,"cause","","",85,{"inputs":[{"name":"intostringerror"}],"output":{"name":"option"}}],[11,"fmt","","",85,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",83,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",83,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"from","","",82,{"inputs":[{"name":"cstring"},{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",82,{"inputs":[{"name":"cstring"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",83,{"inputs":[{"name":"cstr"}],"output":{"name":"cstr"}}],[11,"as_ref","","",82,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"clone","std::ffi::os_str","",87,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",87,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",87,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",87,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",87,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",87,null],[11,"from","","",87,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",87,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",87,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",88,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",88,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",88,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",88,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",88,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",88,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",87,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",87,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",87,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",87,null],[11,"eq","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",88,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",88,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",87,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",88,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",88,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",87,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",89,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"clone","","",91,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",92,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",93,null],[11,"eq","","",93,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",94,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",94,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",94,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",94,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",94,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",94,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",94,null],[11,"read_to_end","","",94,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",94,null],[11,"flush","","",94,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",94,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",91,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",91,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",91,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",91,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",91,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",91,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",91,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",90,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",90,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",90,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",90,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",92,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",92,null],[11,"is_dir","","Test whether this file type represents a directory.",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",95,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",96,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",96,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",96,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",96,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",97,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",98,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",98,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",98,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",99,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",99,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",99,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",99,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",99,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",99,null],[11,"fill_buf","","",99,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",99,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",101,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",101,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",101,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",101,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",101,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",101,null],[11,"flush","","",101,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",101,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",101,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",100,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",100,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",86,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",100,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",100,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",102,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",102,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",102,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",102,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",102,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",102,null],[11,"flush","","",102,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",103,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",103,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",103,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",103,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",103,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",103,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",103,null],[11,"seek","","",103,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",103,null],[11,"fill_buf","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",103,null],[11,"write","","",103,null],[11,"flush","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",103,null],[11,"flush","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",103,null],[11,"flush","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",86,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",105,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",86,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",86,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",86,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",86,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",86,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",86,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",86,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",86,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",106,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",86,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",86,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",4,null],[11,"read_to_end","","",4,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",4,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",4,null],[11,"write","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",4,null],[11,"write_fmt","","",4,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",4,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",4,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",4,null],[11,"read_until","","",4,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",4,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",63,null],[11,"write_all","","",63,null],[11,"flush","","",63,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",107,null],[11,"get","","",107,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",108,null],[11,"fill_buf","","",108,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",108,null],[11,"read","","",109,null],[11,"write","","",110,null],[11,"flush","","",110,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",111,null],[11,"write","","",112,null],[11,"flush","","",112,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",113,null],[11,"flush","","",113,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",114,null],[11,"flush","","",114,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",114,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",115,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",115,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",115,null],[11,"read_to_end","","",115,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",115,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",115,null],[11,"read","","",116,null],[11,"read_to_end","","",116,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",116,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",116,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",117,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",117,null],[11,"flush","","",117,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",117,null],[11,"write_fmt","","",117,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",118,null],[11,"flush","","",118,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",119,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",119,null],[11,"flush","","",119,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",119,null],[11,"write_fmt","","",119,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",120,null],[11,"flush","","",120,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",121,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",121,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",122,null],[11,"flush","","",122,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",123,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",124,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",124,null],[11,"fill_buf","","",124,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",124,null],[11,"read","","",125,null],[11,"next","","",126,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",127,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",128,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",127,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",127,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",127,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",129,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",130,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",131,null],[11,"fmt","","",131,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",132,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",132,null],[11,"clone","","",132,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",132,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",133,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",133,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",131,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",133,null],[11,"partial_cmp","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",134,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",134,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",134,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",134,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",134,null],[11,"partial_cmp","","",134,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",134,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",135,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",135,null],[11,"eq","","",135,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",135,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",135,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",135,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",136,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",136,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",136,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",137,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",137,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",137,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",137,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",137,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",135,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",137,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",136,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",137,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",136,null],[11,"hash","","",137,null],[11,"to_socket_addrs","","",135,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",136,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",137,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",138,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",138,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",138,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",138,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",138,null],[11,"read_to_end","","",138,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",138,null],[11,"flush","","",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",139,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",139,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",139,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",139,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",139,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",140,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",139,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",141,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",141,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",141,null],[11,"local_addr","","Returns the socket address that this socket was created from.",141,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",141,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",141,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",141,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",141,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",141,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",131,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",133,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",134,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",136,{"inputs":[{"name":"socketaddrv4"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",137,{"inputs":[{"name":"socketaddrv6"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",135,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",142,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",142,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",142,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",143,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",143,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",144,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"clone","std::os::linux::raw::arch","",145,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"as_raw_fd","std::fs","",94,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",94,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",94,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",139,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",141,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",138,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",139,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",141,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",138,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",139,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",141,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",87,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",87,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",88,null],[11,"as_bytes","","",88,null],[11,"mode","std::fs","",92,{"inputs":[{"name":"permissions"}],"output":{"name":"u32"}}],[11,"set_mode","","",92,null],[11,"from_mode","","",92,{"inputs":[{"name":"permissions"},{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",91,{"inputs":[{"name":"openoptions"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"dev","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"ino","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"nlink","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"uid","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"size","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blocks","","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"is_block_device","","",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",93,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",96,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",98,{"inputs":[{"name":"dirbuilder"},{"name":"u32"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",146,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",146,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",146,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"signal","","",147,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",148,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",149,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",150,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",151,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",149,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",150,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",151,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"as_pthread_t","std::thread","",22,{"inputs":[{"name":"joinhandle"}],"output":{"name":"u64"}}],[11,"into_pthread_t","","",22,{"inputs":[{"name":"joinhandle"}],"output":{"name":"u64"}}],[11,"new","std::panic","Creates a new `AssertRecoverSafe` wrapper around the provided type.",152,{"inputs":[{"name":"assertrecoversafe"},{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"deref","","",152,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"deref_mut","","",152,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"eq","std::path","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",153,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",153,null],[11,"fmt","","",153,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",153,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",154,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",155,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",155,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",155,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",155,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",155,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",155,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",155,null],[11,"fmt","","",156,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",156,null],[11,"cmp","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",156,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",156,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",157,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",158,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",157,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",157,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",157,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",157,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",158,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",158,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",158,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",158,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",158,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",157,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",157,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",157,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",159,null],[11,"pop","","Truncate `self` to `self.parent()`.",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",159,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",159,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",159,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",159,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",159,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",159,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",159,null],[11,"fmt","","",159,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",160,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",160,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",160,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",160,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",160,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",160,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",160,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",160,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",160,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",160,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",160,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",160,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",160,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",160,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",160,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",160,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",160,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",160,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",160,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",160,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",160,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",160,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",160,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"metadata","","Gets information on the file, directory, etc at this path.",160,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Gets information on the file, directory, etc at this path.",160,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of a path, normalizing all components and\neliminate all symlinks.",160,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","Reads the symlink at this path.",160,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","Reads the directory at this path.",160,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::metadata`\nfails.",160,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",160,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",160,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"deref","","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"from","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",161,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",160,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",159,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",159,null],[11,"partial_cmp","","",159,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",159,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"eq","","",162,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"stripprefixerror"}}],[11,"fmt","","",162,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",160,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",160,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",160,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",160,null],[11,"partial_cmp","","",160,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",160,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",160,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",88,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",87,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",89,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",159,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"eq","","",159,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",160,{"inputs":[{"name":"path"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",159,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",160,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",161,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",159,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"fmt","","",162,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",162,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"str"}}],[11,"write","std::process","",149,null],[11,"flush","","",149,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",150,null],[11,"read","","",151,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",146,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",146,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",146,null],[11,"env","","Inserts or updates an environment variable mapping.",146,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",146,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",146,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",146,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",146,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",146,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",146,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",146,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",146,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",146,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",146,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",164,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"fmt","","",164,{"inputs":[{"name":"output"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",148,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",148,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",148,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",147,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",147,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",147,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",147,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",147,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",165,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",165,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",165,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",165,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",166,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",166,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",166,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",166,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",167,null],[11,"new","std::sync::mpsc::oneshot","",168,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",168,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",168,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",168,null],[11,"drop_port","","",168,null],[11,"can_recv","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",168,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",168,null],[11,"eq","std::sync::mpsc::select","",169,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",170,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",170,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",170,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",171,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",171,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",171,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",171,null],[11,"drop","","",170,null],[11,"drop","","",171,null],[11,"next","","",172,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",173,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",173,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",173,null],[11,"send","","",173,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",173,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",173,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",173,null],[11,"drop_chan","","",173,null],[11,"drop_port","","",173,null],[11,"can_recv","","",173,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",173,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",173,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",173,null],[11,"new","std::sync::mpsc::stream","",174,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",174,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",174,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",174,null],[11,"drop_port","","",174,null],[11,"can_recv","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",174,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",174,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",174,null],[11,"fmt","std::sync::mpsc::sync","",175,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",176,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",176,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",176,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",176,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",176,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",176,null],[11,"drop_chan","","",176,null],[11,"drop_port","","",176,null],[11,"can_recv","","",176,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",176,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",176,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",176,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",177,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",177,null],[11,"pop","","Pops some data from this queue.",177,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",177,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",178,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",178,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",178,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",178,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",178,null],[11,"clone","std::sync::mpsc","",179,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",179,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",180,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",180,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",181,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",181,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",182,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",182,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",183,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",183,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",183,null],[11,"send","","Sends a value on this synchronous channel.",184,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",184,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",184,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",185,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",185,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",185,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",186,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",187,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",185,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",185,null],[11,"fmt","","",179,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",179,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",179,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",182,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",182,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",182,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",180,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",180,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",180,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",181,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",181,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",181,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",188,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",188,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",189,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",190,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",190,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",190,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",190,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",191,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",191,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",191,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",191,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",191,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",191,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",191,null],[11,"drop","","",191,null],[11,"new","","Creates a new condition variable",192,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",192,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",192,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",192,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",192,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",192,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",192,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",192,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",193,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",193,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",193,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",193,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",193,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",193,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"drop","","",193,null],[11,"fmt","","",193,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",194,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",194,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",194,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",194,null],[11,"deref","","",195,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",195,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",195,null],[11,"new","std::sync::once","Creates a new `Once` value.",196,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",196,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",197,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",197,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"drop","","",197,null],[11,"fmt","","",197,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",198,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",198,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",198,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",198,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",198,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",198,null],[11,"deref","","",199,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",200,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",200,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",199,null],[11,"drop","","",200,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",201,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",201,null],[11,"release","","Release a resource from this semaphore.",201,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",201,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",202,null],[11,"default","core::sync::atomic","",203,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",204,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",205,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",206,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",207,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",203,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",203,null],[11,"swap","","Stores a value into the bool, returning the old value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",204,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",204,null],[11,"swap","","Stores a value into the isize, returning the old value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",205,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",205,null],[11,"swap","","Stores a value into the usize, returning the old value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",206,null],[11,"load","","Loads a value from the pointer.",206,null],[11,"store","","Stores a value into the pointer.",206,null],[11,"swap","","Stores a value into the pointer, returning the old value.",206,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",206,null],[11,"fmt","","",205,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",206,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","std::time::duration","",208,null],[11,"fmt","","",208,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",208,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",208,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",208,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",208,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",208,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",208,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",208,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",208,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",208,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",208,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"cmp","std::time","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",209,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"cmp","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"clone","","",210,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"fmt","","",211,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",211,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"systemtimeerror"}}],[11,"now","","Returns an instant corresponding to \"now\".",209,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from another instant to this one.",209,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",209,{"inputs":[{"name":"instant"}],"output":{"name":"duration"}}],[11,"add","","",209,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub","","",209,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"fmt","","",209,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to \"now\".",210,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from an earlier point in time.",210,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",210,{"inputs":[{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add","","",210,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub","","",210,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"fmt","","",210,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",211,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"duration"}}],[11,"description","","",211,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"str"}}],[11,"fmt","","",211,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",212,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",212,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",212,null],[11,"wait","","Waits for a signal on the specified mutex.",212,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",212,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",212,null],[11,"clone","std::sys_common::dwarf::eh","",213,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",214,null],[11,"read","","",214,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",214,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",214,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",215,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",216,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",217,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",217,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",217,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",217,null],[11,"destroy","","Deallocates all resources associated with this mutex.",217,null],[11,"next","std::sys_common::net","",218,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",218,null],[11,"connect","","",219,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",219,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",219,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",219,null],[11,"write","","",219,null],[11,"peer_addr","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",219,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",219,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",220,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",220,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",220,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",220,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",220,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",220,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",221,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",221,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",221,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",221,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",221,null],[11,"send_to","","",221,null],[11,"duplicate","","",221,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",221,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",221,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",221,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",221,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",222,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",222,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",222,null],[11,"get","","",222,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",223,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",223,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",223,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",223,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",223,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",223,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",223,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",224,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",224,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",224,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",224,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",224,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",225,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",225,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",225,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",225,null],[11,"fmt","","",225,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",226,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",226,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",227,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",227,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",227,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",227,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",227,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",227,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",227,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",227,null],[11,"new","std::sys_common::thread_local","",228,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",228,null],[11,"set","","Sets this TLS key to a new value.",228,null],[11,"destroy","","Deallocates this OS TLS key.",228,null],[11,"new","","Creates a new managed OS TLS key.",229,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",229,null],[11,"set","","See StaticKey::set",229,null],[11,"drop","","",229,null],[11,"clone","std::sys_common::wtf8","",230,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",230,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",230,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",230,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",230,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",230,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",230,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",230,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",230,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",232,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",232,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new, empty WTF-8 string.",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",231,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",231,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",231,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",231,null],[11,"as_slice","","",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",231,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",231,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",231,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",231,null],[11,"push","","Append a code point at the end of the string.",231,null],[11,"truncate","","Shortens a string to the specified length.",231,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",231,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",231,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",231,null],[11,"partial_cmp","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",232,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",232,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",232,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",232,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",232,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",233,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",233,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",233,null],[11,"clone","","",234,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",234,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",234,null],[11,"hash","","",230,null],[11,"hash","","",231,null],[11,"hash","","",232,null],[11,"is_ascii","","",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",232,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",232,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",232,null],[11,"make_ascii_lowercase","","",232,null],[11,"new","std::sys::condvar","",235,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",235,null],[11,"notify_all","","",235,null],[11,"wait","","",235,null],[11,"wait_timeout","","",235,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",235,null],[11,"new","std::sys::fd","",236,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",236,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",236,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",236,null],[11,"write","","",236,null],[11,"set_cloexec","","",236,null],[11,"drop","","",236,null],[11,"clone","std::sys::fs","",237,{"inputs":[{"name":"fileattr"}],"output":{"name":"fileattr"}}],[11,"clone","","",238,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",239,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",239,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",239,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",239,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",240,null],[11,"eq","","",240,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",240,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",240,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",237,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",237,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",237,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",90,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",239,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",239,null],[11,"mode","","",239,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u32"}}],[11,"is_dir","","",240,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",240,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",240,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",240,{"inputs":[{"name":"filetype"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"next","","",241,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",242,null],[11,"path","","",243,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",243,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",243,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",243,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",243,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",238,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",238,null],[11,"write","","",238,null],[11,"append","","",238,null],[11,"truncate","","",238,null],[11,"create","","",238,null],[11,"mode","","",238,null],[11,"open","","",244,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",244,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",244,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",244,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",244,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",244,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",244,null],[11,"write","","",244,null],[11,"flush","","",244,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",244,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",244,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",244,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",245,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",245,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",245,null],[11,"fmt","","",244,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",246,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",246,null],[11,"unlock","","",246,null],[11,"try_lock","","",246,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",246,null],[11,"uninitialized","","",247,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",247,null],[11,"lock","","",247,null],[11,"try_lock","","",247,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",247,null],[11,"destroy","","",247,null],[11,"new","std::sys::net","",248,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",248,null],[11,"duplicate","","",248,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",248,null],[11,"set_timeout","","",248,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",248,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"shutdown","","",248,{"inputs":[{"name":"socket"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","libc::unix","",249,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",250,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",251,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",252,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",253,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",254,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",255,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",256,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",257,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",258,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",259,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",260,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","libc::unix::notbsd","",261,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",262,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",263,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",264,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",265,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",266,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",267,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",268,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",269,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",270,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",271,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",272,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",273,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","libc::unix::notbsd::linux","",274,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",275,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",276,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",277,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",278,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",279,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",280,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",281,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",282,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",283,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",284,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",285,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",286,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",287,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",288,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",289,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",290,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","libc::unix::notbsd::linux::other","",291,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",292,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",293,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",294,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",295,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",296,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",297,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",298,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",299,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","libc::unix::notbsd::linux::other::b64","",300,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",301,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",302,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",303,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","libc::unix::notbsd::linux::other","",304,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",305,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"next","std::sys::os","",306,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",306,null],[11,"fmt","","",307,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",307,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",308,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",308,null],[11,"len","","",308,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",309,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",309,null],[11,"hash","std::sys::os_str","",310,null],[11,"clone","","",310,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",311,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",310,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",310,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",310,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",310,null],[11,"from_str","","",311,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",311,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",311,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",311,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",312,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",312,null],[11,"write","","",312,null],[11,"raw","","",312,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",312,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",312,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",313,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",313,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",313,null],[11,"args","","",313,null],[11,"env","","",313,null],[11,"env_remove","","",313,null],[11,"env_clear","","",313,null],[11,"cwd","","",313,null],[11,"fmt","","",314,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",314,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",314,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",314,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",314,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",314,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"signal","","",314,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",314,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",315,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",315,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",315,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",315,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",315,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",316,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",316,null],[11,"try_read","","",316,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",316,null],[11,"try_write","","",316,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",316,null],[11,"write_unlock","","",316,null],[11,"destroy","","",316,null],[11,"new","std::sys::stack_overflow","",317,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",317,null],[11,"new","std::sys::thread","",318,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",318,null],[11,"set_name","","",318,null],[11,"sleep","","",318,null],[11,"join","","",318,null],[11,"id","","",318,{"inputs":[{"name":"thread"}],"output":{"name":"u64"}}],[11,"into_id","","",318,{"inputs":[{"name":"thread"}],"output":{"name":"u64"}}],[11,"drop","","",318,null],[11,"clone","std::sys::time::inner","",319,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"cmp","","",320,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",320,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",320,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",320,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",320,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",320,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",320,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",320,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",320,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"cmp","","",321,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",321,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",321,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",321,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",321,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",321,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",321,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",321,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"clone","","",321,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"now","","",320,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"sub_instant","","",320,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"add_duration","","",320,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_duration","","",320,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"fmt","","",320,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","",321,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"sub_time","","",321,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add_duration","","",321,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_duration","","",321,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"fmt","","",321,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","",319,{"inputs":[{"name":"timespec"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"eq","","",319,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",319,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"cmp","","",319,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"new","std::sys::stdio","",322,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",322,null],[11,"new","","",323,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",323,null],[11,"new","","",324,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",324,null],[11,"write","","",324,null],[11,"flush","","",324,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"clone","std::panicking","",325,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"payload","","Returns the payload associated with the panic.",326,{"inputs":[{"name":"panicinfo"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated,\nif available.",326,{"inputs":[{"name":"panicinfo"}],"output":{"name":"option"}}],[11,"file","","Returns the name of the source file from which the panic originated.",327,{"inputs":[{"name":"location"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",327,{"inputs":[{"name":"location"}],"output":{"name":"u32"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",328,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",328,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",328,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",328,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",329,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",329,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",329,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",329,null],[11,"clone","std::rand","",330,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",330,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",330,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",330,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",330,null],[11,"from_seed","","",330,null],[11,"reseed","","",331,null],[11,"clone","","",332,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",332,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",332,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",332,null],[11,"fmt","ethcore_util::standard","",333,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",333,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",333,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",333,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",333,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",333,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",333,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",333,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",334,null],[11,"fmt","","",334,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",334,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",334,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",334,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",334,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",335,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",335,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",335,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",335,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",335,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",335,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",335,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",336,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",336,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",336,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",336,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",337,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",337,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",337,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",337,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",337,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",337,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",337,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",337,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",337,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",338,null],[11,"clone","","",338,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",339,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",339,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",339,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",339,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",340,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",340,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",341,null],[11,"deref","","",340,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",340,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",342,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",342,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",342,null],[11,"fmt","core::cmp","",343,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",343,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",343,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",343,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",343,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",343,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",343,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",344,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",344,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",344,null],[11,"finish","","",344,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",344,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",344,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",345,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",345,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",345,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"clone","core::iter","",346,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",346,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",346,null],[11,"next_back","","",346,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",347,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",347,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",347,null],[11,"next_back","","",347,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",348,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",348,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",348,null],[11,"clone","","",349,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",350,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",349,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",349,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",349,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",349,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",349,null],[11,"next_back","","",349,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",351,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",351,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",351,null],[11,"next_back","","",351,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",352,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",352,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",352,null],[11,"next_back","","",352,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",353,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",353,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",353,null],[11,"next_back","","",353,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",354,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",354,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",354,null],[11,"next_back","","",354,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",355,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",355,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",355,null],[11,"nth","","",355,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",355,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",355,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",356,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",356,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",356,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",356,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",356,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",356,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",356,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",356,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",357,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",357,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",357,null],[11,"clone","","",358,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",358,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",358,null],[11,"clone","","",359,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",359,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",359,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",359,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",359,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",359,null],[11,"clone","","",360,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",360,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",360,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",360,null],[11,"clone","","",361,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",361,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",361,null],[11,"clone","","",362,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",362,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",362,null],[11,"next_back","","",362,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",363,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",363,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",363,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",363,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",363,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",363,null],[11,"next_back","","",363,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",364,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",364,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",364,null],[11,"next_back","","",364,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",365,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",366,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",367,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",365,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",365,null],[11,"clone","","",368,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",368,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",368,null],[11,"next_back","","",368,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",365,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",365,null],[11,"next","core::ops","",367,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",367,null],[11,"next_back","","",367,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",366,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",369,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",369,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",369,null],[11,"next_back","","",369,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",370,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"next_back","","",370,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",370,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",370,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",370,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",371,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",371,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",371,null],[11,"next_back","","",371,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",371,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::marker","",372,null],[11,"eq","","",372,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",372,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",372,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",372,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",372,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",373,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",373,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",373,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",373,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",367,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",367,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",367,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",367,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",366,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",366,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",366,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",366,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",374,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",374,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",374,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",374,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::ptr","Creates a new `Unique`.",375,null],[11,"get","","Dereferences the content.",375,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",375,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",375,null],[11,"fmt","","",375,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",376,null],[11,"clone","","",376,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",376,null],[11,"fmt","","",376,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::raw","",377,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",378,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",379,null],[11,"fmt","","",379,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",379,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",379,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",379,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",379,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",379,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",379,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",379,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",379,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",379,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",379,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",379,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",379,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",379,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",379,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",379,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",379,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",379,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",379,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",379,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",379,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",379,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",379,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",379,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",379,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",379,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",379,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",379,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",379,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",379,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",380,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",380,null],[11,"next_back","","",380,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",380,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",381,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",381,null],[11,"next_back","","",381,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",382,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",382,null],[11,"next_back","","",382,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",379,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","core::option","",383,null],[11,"fmt","","",383,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",383,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",383,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",383,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",383,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",383,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",383,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",383,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",383,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",383,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",383,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",383,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",383,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",383,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",383,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",383,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",383,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",383,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",383,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",383,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",383,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",383,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",383,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",383,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",383,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",383,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",383,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",383,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",383,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",383,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",383,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",383,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",383,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",383,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",384,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",384,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",384,null],[11,"next_back","","",384,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",385,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",385,null],[11,"next_back","","",385,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",385,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",386,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",386,null],[11,"next_back","","",386,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",387,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",387,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",387,null],[11,"next_back","","",387,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",383,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",388,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",389,null],[11,"make_place","","",389,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",389,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",4,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",388,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",389,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",4,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",4,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",4,null],[11,"default","","",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",4,null],[11,"clone","","",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"from","","",4,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",4,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",4,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",4,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",4,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",4,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",4,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",4,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",4,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",4,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",4,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",390,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",390,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",390,null],[11,"clone","","Makes a clone of the `Rc<T>`.",390,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",390,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",390,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",390,null],[11,"fmt","","",390,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",390,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",390,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",390,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",391,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",391,null],[11,"clone","","Makes a clone of the `Weak<T>`.",391,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",391,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",391,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",390,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",390,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",161,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",161,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",161,null],[11,"into_owned","","Extracts the owned data.",161,null],[11,"deref","","",161,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",161,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",161,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",161,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",161,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",161,null],[11,"into_cow","","",161,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",161,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"clone","core::fmt::rt::v1","",392,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",393,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",394,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",394,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",394,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",395,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",396,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"borrow","collections::vec","",63,null],[11,"borrow_mut","","",63,null],[11,"clone","collections::str","",397,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",397,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",397,null],[11,"borrow","collections::string","",89,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",398,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",398,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",398,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",398,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",399,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",400,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",399,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",399,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",399,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",401,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",401,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",401,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",401,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",401,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",401,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",401,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",401,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",402,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",402,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",402,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",402,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",402,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",402,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",402,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",402,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",403,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",403,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",403,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",403,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",403,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",403,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",403,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",403,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",404,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",404,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",405,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",405,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",406,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",406,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",404,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",404,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",404,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",404,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",404,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",407,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",407,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",408,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",408,null],[11,"matching","","",408,null],[11,"use_early_reject","","",409,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",409,null],[11,"matching","","",409,null],[11,"cmp","collections::string","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",89,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",89,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",89,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",89,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",89,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",89,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",89,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",89,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",89,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",89,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",89,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",89,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",89,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes\nlarger than its length.",89,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes\nlarger than its length.",89,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",89,null],[11,"push","","Appends the given `char` to the end of this `String`.",89,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",89,null],[11,"truncate","","Shortens this `String` to the specified length.",89,null],[11,"pop","","Removes the last character from the string buffer and returns it.",89,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",89,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",89,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",89,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",89,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",89,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",89,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",89,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",89,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",9,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",9,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",9,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",89,null],[11,"from_iter","","",89,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",89,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",89,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",89,null],[11,"extend","","",89,null],[11,"extend","","",89,null],[11,"extend","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",161,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",161,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",89,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",89,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",89,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"add","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",89,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",89,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",89,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",89,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",89,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",89,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",89,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",89,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",89,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",89,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",410,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",410,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",410,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",89,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",89,null],[11,"from","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",161,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",89,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",89,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",89,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",89,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",411,null],[11,"next","","",411,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",411,null],[11,"next_back","","",411,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",63,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",63,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",63,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",63,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",63,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",63,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",63,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",63,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",63,null],[11,"as_slice","","Extracts a slice containing the entire vector.",63,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",63,null],[11,"set_len","","Sets the length of a vector.",63,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",63,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",63,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",63,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",63,null],[11,"push","","Appends an element to the back of a collection.",63,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",63,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",63,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",63,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",63,null],[11,"len","","Returns the number of elements in the vector.",63,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",63,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",63,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",63,null],[11,"push_all","","",63,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",63,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",63,null],[11,"clone","","",63,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",63,null],[11,"hash","","",63,null],[11,"index","","",63,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",63,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",63,null],[11,"index","","",63,null],[11,"index","","",63,null],[11,"index","","",63,null],[11,"index_mut","","",63,null],[11,"index_mut","","",63,null],[11,"index_mut","","",63,null],[11,"index_mut","","",63,null],[11,"deref","","",63,null],[11,"deref_mut","","",63,null],[11,"from_iter","","",63,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",63,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",63,null],[11,"extend","","",63,null],[11,"eq","","",63,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","collections::borrow","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"partial_cmp","","",63,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",63,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",63,null],[11,"default","","",63,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",63,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",63,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",63,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",63,null],[11,"as_mut","","",63,null],[11,"from","","",63,null],[11,"from","","",63,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",63,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",412,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",412,null],[11,"count","","",412,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",412,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",412,null],[11,"next","","",413,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",413,null],[11,"next_back","","",413,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",413,null],[11,"next","rustc_unicode::char","",414,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",415,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",416,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",417,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",417,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",417,null],[4,"SeekFrom","ethcore_util::standard::io","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",121,null],[13,"End","","Set the offset to the size of this object plus the specified number of\nbytes.",121,null],[13,"Current","","Set the offset to the current position plus the specified number of\nbytes.",121,null],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",2,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",2,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",2,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",2,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",2,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",2,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[3,"Broadcast","","A `Write` adaptor which will write data to multiple locations.",null,null],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Tee","","An adaptor which will emit all read data to a specified writer as well.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars`\nadapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully\nbut it did not contain valid utf8 data.",127,null],[13,"Other","","Variant representing that an I/O error occurred.",127,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a\nparticular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[3,"BufReader","","The `BufReader` struct adds buffering to any reader.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline\n(`0x0a`, `'\\n'`) is detected.",null,null],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that\nhappened while writing out the buffer, and the buffered writer object\nwhich may be used to recover from the condition.",null,null],[3,"Cursor","","A `Cursor` wraps another type and provides it with a\n[`Seek`](trait.Seek.html) implementation.",null,null],[6,"Result","","",null,null],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",105,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",105,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",105,null],[13,"ConnectionReset","","The connection was reset by the remote server.",105,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",105,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",105,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in\nuse elsewhere.",105,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not\nlocal.",105,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",105,null],[13,"AlreadyExists","","An entity already exists, often a file.",105,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was\nrequested to not occur.",105,null],[13,"InvalidInput","","A parameter was incorrect.",105,null],[13,"InvalidData","","Data not valid for the operation were encountered.",105,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",105,null],[13,"WriteZero","","An error returned when an operation could not be completed because a\ncall to `write` returned `Ok(0)`.",105,null],[13,"Interrupted","","This operation was interrupted.",105,null],[13,"Other","","Any I/O error not part of this list.",105,null],[13,"UnexpectedEOF","","",105,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an\n\"end of file\" was reached prematurely.",105,null],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[3,"Sink","","A writer which will move data into the void.",null,null],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Empty","","A reader which is always at EOF.",null,null],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[0,"fs","ethcore_util::standard","Filesystem manipulation operations",null,null],[3,"File","ethcore_util::standard::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the `ReadDir` iterator.",null,null],[3,"WalkDir","","An iterator that recursively walks over the contents of a directory.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","An structure representing a type of file with accessors for each file type.",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"remove_file","","Removes a file from the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"metadata","","Given a path, query the file system to get information about a file,\ndirectory, etc.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"rename","","Rename a file or directory to a new name.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"canonicalize","","Returns the canonical form of a path with all intermediate components\nnormalized and symbolic links resolved.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir","","Creates a new, empty directory at the provided path",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they\nare missing.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use\ncarefully!",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"walk_dir","","Returns an iterator that will recursively walk the directory structure\nrooted at `path`.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"inputs":[{"name":"p"},{"name":"permissions"}],"output":{"name":"result"}}],[0,"str","ethcore_util::standard","Unicode string slices",null,null],[11,"new_leaf","collections::btree::node","",418,{"inputs":[{"name":"root"}],"output":{"name":"root"}}],[11,"as_ref","","",418,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"as_mut","","",418,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"into_ref","","",418,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"push_level","","Add a new internal node with a single edge, pointing to the previous root, and make that\nnew node the root. This increases the height by 1 and is the opposite of `pop_level`.",418,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"pop_level","","Remove the root node, using its first child as the new root. This cannot be called when\nthe tree consists only of a leaf node. As it is intended only to be called when the root\nhas only one edge, no cleanup is done on any of the other children are elements of the root.\nThis decreases the height by 1 and is the opposite of `push_level`.",418,null],[11,"clone","","",419,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"len","","",419,{"inputs":[{"name":"noderef"}],"output":{"name":"usize"}}],[11,"forget_type","","",419,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"keys","","",419,null],[11,"vals","","",419,null],[11,"ascend","","",419,{"inputs":[{"name":"noderef"}],"output":{"name":"result"}}],[11,"first_edge","","",419,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"last_edge","","",419,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"deallocate_and_ascend","","",419,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"deallocate_and_ascend","","",419,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"keys_mut","","",419,null],[11,"vals_mut","","",419,null],[11,"into_slices","","",419,null],[11,"into_root_mut","","",419,{"inputs":[{"name":"noderef"}],"output":{"name":"root"}}],[11,"into_slices_mut","","",419,null],[11,"push","","",419,null],[11,"push_front","","",419,null],[11,"push","","",419,null],[11,"push_front","","",419,null],[11,"pop","","",419,null],[11,"pop_front","","",419,null],[11,"force","","",419,{"inputs":[{"name":"noderef"}],"output":{"name":"forceresult"}}],[11,"clone","","",420,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_node","","",420,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"new_kv","","",420,{"inputs":[{"name":"handle"},{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_edge","","",420,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","",420,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"eq","","",420,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"reborrow","","",420,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"reborrow_mut","","",420,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"new_edge","","",420,{"inputs":[{"name":"handle"},{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_kv","","",420,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"right_kv","","",420,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"insert","","",420,null],[11,"insert","","",420,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"root"}],"output":{"name":"insertresult"}}],[11,"descend","","",420,{"inputs":[{"name":"handle"}],"output":{"name":"noderef"}}],[11,"into_kv","","",420,null],[11,"into_kv_mut","","",420,null],[11,"kv_mut","","",420,null],[11,"split","","",420,null],[11,"remove","","",420,null],[11,"split","","",420,null],[11,"can_merge","","",420,{"inputs":[{"name":"handle"}],"output":{"name":"bool"}}],[11,"merge","","",420,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"force","","",420,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"drop","collections::btree::map","",421,null],[11,"clone","","",421,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",421,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",421,null],[11,"get","","Returns a reference to the value corresponding to the key.",421,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",421,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",421,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",421,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",421,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",421,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",421,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",421,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"next","","",422,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",422,null],[11,"next_back","","",422,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",422,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"clone","","",422,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",423,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",423,null],[11,"next_back","","",423,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"len","","",423,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"into_iter","","",421,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"drop","","",424,null],[11,"next","","",424,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",424,null],[11,"next_back","","",424,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",424,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",425,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",425,null],[11,"next_back","","",425,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"len","","",425,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"clone","","",425,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",426,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",426,null],[11,"next_back","","",426,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"len","","",426,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"clone","","",426,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",427,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",427,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",427,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",428,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",428,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"from_iter","","",421,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",421,null],[11,"extend","","",421,null],[11,"hash","","",421,null],[11,"default","","",421,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",421,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",421,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",421,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",421,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",421,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",421,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",421,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",421,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",421,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",421,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",421,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",429,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",429,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",430,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",431,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",431,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",431,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",431,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",431,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"partial_cmp","collections::btree::set","",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",432,null],[11,"clone","","",432,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",432,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",432,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",432,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",432,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",432,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",432,null],[11,"contains","","Returns `true` if the set contains a value.",432,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",432,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",432,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",432,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",432,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",432,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",432,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",432,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",432,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",432,null],[11,"extend","","",432,null],[11,"default","","",432,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",432,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",433,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",433,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",433,null],[11,"next_back","","",433,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",434,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",434,null],[11,"next_back","","",434,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",435,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",435,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",435,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",436,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",436,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",437,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",437,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",438,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",438,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",439,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",439,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"hash","collections::enum_set","",440,null],[11,"cmp","","",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",440,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",440,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",440,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",440,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",440,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",440,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",440,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",440,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",440,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",440,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",440,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",441,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",441,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",441,null],[11,"from_iter","","",440,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",440,null],[11,"extend","","",440,null],[11,"start","core::ops","",366,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",374,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",367,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",367,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"eq","collections","",442,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",442,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",442,null],[11,"fmt","","",442,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",442,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[3,"Utf16Units","ethcore_util::standard::str","External iterator for a string's UTF-16 code units.",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",443,null],[10,"from_str","","Parses a string `s` to return a value of this type.",443,{"inputs":[{"name":"fromstr"},{"name":"str"}],"output":{"name":"result"}}],[11,"valid_up_to","core::str","Returns the index in the given string up to which valid UTF-8 was\nverified.",6,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"default","core::num","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",13,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","core::num::flt2dec::decoder","",444,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",444,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",444,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",444,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",445,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",445,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",445,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",445,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",446,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",446,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",446,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",446,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",446,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",446,null],[11,"clone","","",447,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",447,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",447,null],[11,"fmt","","",448,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",448,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",448,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",448,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",449,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",449,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",449,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",450,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",451,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",451,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",451,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",451,null],[11,"eq","","",452,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",452,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",452,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",8,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",8,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",453,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",453,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",453,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",453,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",454,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",454,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",454,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",454,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",454,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",454,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",454,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",454,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",454,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",454,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",454,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",454,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",454,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",454,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",454,null],[11,"eq","","",454,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",454,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",454,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",454,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",454,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",455,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",455,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",455,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",455,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",455,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",455,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",455,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",455,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",455,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",455,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",455,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",455,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",455,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",455,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",455,null],[11,"eq","","",455,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",455,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",455,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",455,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",455,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",456,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",456,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",456,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",456,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",456,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",457,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",457,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",457,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",457,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",7,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",7,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",458,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",458,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",458,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",458,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",459,null],[11,"fmt","","",459,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",459,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",459,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",459,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",459,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",459,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",459,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",459,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",459,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",459,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",459,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",459,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"clone","core::char","",460,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",461,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",460,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",460,null],[11,"clone","","",462,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",463,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",462,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",462,null],[11,"count","","",462,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",462,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",462,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",464,null],[11,"next","","",464,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",464,null],[11,"count","","",464,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",464,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",464,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",464,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",464,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",465,null],[11,"next","","",465,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",465,null],[11,"count","","",465,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",465,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",465,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",465,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",466,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",466,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",466,null],[11,"next_back","","",466,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",466,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",467,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",467,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",467,null],[11,"next_back","","",467,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",468,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",468,null],[11,"next","","",469,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",469,null],[11,"next","","",470,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",470,null],[11,"next","","",471,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",471,null],[11,"next","","",472,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",472,null],[11,"clone","","",473,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",473,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",473,null],[11,"count","","",473,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",473,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",473,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",473,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",474,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",474,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",474,null],[11,"count","","",474,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",474,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",474,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",474,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",475,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",475,null],[11,"count","","",475,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",475,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",475,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",475,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"eq","core::str","",5,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",6,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",476,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",476,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",476,null],[11,"next_back","","",476,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",476,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",477,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",477,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",477,null],[11,"next_back","","",477,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",477,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",478,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",478,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",478,null],[11,"count","","",478,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",478,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",478,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",478,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",478,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",479,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",480,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",480,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",481,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",481,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",480,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",481,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",482,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",482,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",483,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",483,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",482,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",483,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",484,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",485,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",485,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",486,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",486,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",487,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",488,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",488,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",489,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",489,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",488,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",489,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",490,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",491,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",491,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",492,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",492,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",491,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",492,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",493,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",493,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",493,null],[11,"next_back","","",493,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",494,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",495,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",495,null],[11,"call_mut","","",495,null],[11,"call_once","","",495,null],[11,"next","","",494,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",494,null],[11,"next_back","","",494,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",496,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"eq","core::fmt::num","",497,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",497,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",497,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",498,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",498,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",498,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",499,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",499,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",499,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",500,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",500,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",500,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",501,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",501,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",501,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",502,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",502,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",502,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",503,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",503,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",504,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",505,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",505,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",506,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",506,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",506,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",507,null],[11,"entry","","Adds a new entry to the set output.",508,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",508,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",508,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",509,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",509,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",509,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",510,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",510,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",510,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",511,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",511,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",512,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",513,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",513,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",513,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",514,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",514,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",514,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",514,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",514,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",514,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",514,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",514,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",514,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",514,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",514,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",514,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",514,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",514,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",514,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",514,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",514,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",514,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",514,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",514,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",514,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",511,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",372,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",335,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",337,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",339,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",340,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Utf8Error","ethcore_util::standard::str","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",496,null],[12,"next","","Index of the first byte of the next `char`",496,null],[3,"Split","","Created with the method [`split()`].",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator()`].",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[3,"CharIndices","","Iterator for a string's characters and their byte offsets.",null,null],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[11,"clone","rustc_unicode::u_str","",515,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"utf16encoder"}}],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",515,{"inputs":[{"name":"utf16encoder"},{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",515,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"option"}}],[11,"size_hint","","",515,null],[11,"next","","",516,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next_back","","",516,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[3,"SplitWhitespace","ethcore_util::standard::str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","ethcore_util::standard::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",517,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",517,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",517,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",517,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",517,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",398,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",398,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",398,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",518,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",518,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",518,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",518,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",519,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",519,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",519,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[0,"fmt","ethcore_util::standard","Utilities for formatting and printing strings",null,null],[5,"format","ethcore_util::standard::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[6,"Result","","",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",520,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",520,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",520,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",521,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",522,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",523,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",524,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",525,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",526,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",527,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",528,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",529,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[5,"radix","","Constructs a radix formatter in the range of `2..36`.",null,{"inputs":[{"name":"t"},{"name":"u8"}],"output":{"name":"radixfmt"}}],[3,"Radix","","A radix with in the range of `2..36`.",null,null],[3,"RadixFmt","","A helper type for formatting radixes.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[0,"cmp","ethcore_util::standard","Functionality for ordering and comparison.",null,null],[8,"PartialEq","ethcore_util::standard::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",530,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",530,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",343,null],[13,"Equal","","An ordering where a compared value is equal [to another].",343,null],[13,"Greater","","An ordering where a compared value is greater [than another].",343,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",531,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",532,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",532,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\noperator.",532,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",532,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\noperator.",532,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"ptr","ethcore_util::standard","Raw, unsafe pointers, `*const T`, and `*mut T`",null,null],[5,"null","ethcore_util::standard::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","Variant of read_and_zero that writes the specific drop-flag byte\n(which may be more appropriate than zero).",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[3,"Unique","","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec<T>` or `Box<T>`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc<T>` or `Arc<T>`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[0,"mem","ethcore_util::standard","Basic functions for dealing with memory",null,null],[5,"forget","ethcore_util::standard::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","ethcore_util::standard","Overloadable operators",null,null],[8,"Drop","ethcore_util::standard::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a 'destructor'.",null,null],[10,"drop","","A method called when the value goes out of scope.",533,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",534,null],[10,"add","","The method for the `+` operator",534,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",535,null],[10,"sub","","The method for the `-` operator",535,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",536,null],[10,"mul","","The method for the `*` operator",536,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",537,null],[10,"div","","The method for the `/` operator",537,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",538,null],[10,"rem","","The method for the `%` operator",538,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",539,null],[10,"neg","","The method for the unary `-` operator",539,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",540,null],[10,"not","","The method for the unary `!` operator",540,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator",541,null],[10,"bitand","","The method for the `&` operator",541,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",542,null],[10,"bitor","","The method for the `|` operator",542,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",543,null],[10,"bitxor","","The method for the `^` operator",543,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator",544,null],[10,"shl","","The method for the `<<` operator",544,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator",545,null],[10,"shr","","The method for the `>>` operator",545,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",546,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",547,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",548,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",549,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",550,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&=`.",null,null],[10,"bitand_assign","","The method for the `&` operator",551,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",552,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",553,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `<<=`.",null,null],[10,"shl_assign","","The method for the `<<=` operator",554,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `>>=`.",null,null],[10,"shr_assign","","The method for the `>>=` operator",555,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",556,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",556,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",557,null],[3,"RangeFull","","An unbounded range.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends.",null,null],[12,"start","","The lower bound of the range (inclusive).",367,null],[12,"end","","The upper bound of the range (exclusive).",367,null],[3,"RangeFrom","","A range which is only bounded below.",null,null],[12,"start","","The lower bound of the range (inclusive).",366,null],[3,"RangeTo","","A range which is only bounded above.",null,null],[12,"end","","The upper bound of the range (exclusive).",374,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",558,null],[10,"deref","","The method called to dereference a value",558,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",559,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",560,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",561,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",562,null],[10,"call_once","","This is called when the call operator is used.",562,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate \"place\" that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",563,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",564,null],[10,"make_place","","Creates a fresh place from `self`.",564,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",565,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",565,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",566,null],[16,"Place","","The place that will negotiate the storage of the data.",566,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",566,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",567,{"inputs":[{"name":"boxplace"}],"output":{"name":"self"}}],[0,"slice","ethcore_util::standard","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","ethcore_util::standard::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",568,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",568,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",568,null],[10,"connect","","",568,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[0,"bytes","","Operations on `[u8]`.",null,null],[8,"MutableByteVector","ethcore_util::standard::slice::bytes","A trait for operations on mutable `[u8]`s.",null,null],[10,"set_memory","","Sets all bytes of the receiver to the given value.",569,null],[5,"copy_memory","","Copies data from `src` to `dst`",null,null],[5,"from_raw_parts","ethcore_util::standard::slice","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[0,"result","ethcore_util::standard","Error handling with the `Result` type",null,null],[4,"Result","ethcore_util::standard::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",379,null],[13,"Err","","Contains the error value",379,null],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"option","ethcore_util::standard","Optional values",null,null],[4,"Option","ethcore_util::standard::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",383,null],[13,"Some","","Some value `T`",383,null],[3,"Iter","","An iterator over a reference of the contained item in an Option.",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[3,"Path","ethcore_util::standard","A slice of a path (akin to `str`).",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",443,null],[10,"from_str","","Parses a string `s` to return a value of this type.",443,{"inputs":[{"name":"fromstr"},{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",0,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",0,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",0,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",0,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",0,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",0,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",0,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",0,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",0,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[11,"tee","","Creates a reader adaptor which will write all read data into the given\noutput stream.",0,{"inputs":[{"name":"read"},{"name":"w"}],"output":{"name":"tee"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",1,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",1,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",1,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",1,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",1,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[11,"broadcast","","Creates a new writer which will write all data to both this writer and\nanother writer.",1,{"inputs":[{"name":"write"},{"name":"w"}],"output":{"name":"broadcast"}}],[8,"Hash","","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",570,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",570,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",571,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",571,null],[11,"write_u8","","Write a single `u8` into this hasher",571,null],[11,"write_u16","","Write a single `u16` into this hasher.",571,null],[11,"write_u32","","Write a single `u32` into this hasher.",571,null],[11,"write_u64","","Write a single `u64` into this hasher.",571,null],[11,"write_usize","","Write a single `usize` into this hasher.",571,null],[11,"write_i8","","Write a single `i8` into this hasher.",571,null],[11,"write_i16","","Write a single `i16` into this hasher.",571,null],[11,"write_i32","","Write a single `i32` into this hasher.",571,null],[11,"write_i64","","Write a single `i64` into this hasher.",571,null],[11,"write_isize","","Write a single `isize` into this hasher.",571,null],[8,"StdError","","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",11,{"inputs":[{"name":"stderror"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",11,{"inputs":[{"name":"stderror"}],"output":{"name":"option"}}],[11,"from_reader","rustc_serialize::json","Decodes a json value from an `&mut io::Read`",572,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",572,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",572,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",572,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",572,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",572,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",572,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"encode","collections::string","",89,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",89,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",4,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",390,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",390,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",161,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",161,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",63,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","ethcore_util::standard::option","",383,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",383,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",372,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",372,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","ethcore_util::standard","",160,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","std::path","",159,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",159,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",335,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",335,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",337,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",337,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",573,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",573,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",67,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",67,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",69,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",69,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",421,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",421,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",432,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",432,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",38,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",49,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","rustc_serialize::base64","",574,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",574,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",575,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",575,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",576,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",576,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",577,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",577,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",577,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",577,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","rustc_serialize::hex","",578,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",578,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",578,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",578,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustc_serialize::json","",572,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",572,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",572,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",572,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",572,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",572,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",572,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",572,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",572,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",579,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",579,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",579,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",580,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",580,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",581,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",581,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",581,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",582,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",582,{"inputs":[{"name":"encodererror"}],"output":{"name":"encodererror"}}],[11,"fmt","","",579,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",581,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",581,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",581,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",581,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",580,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",580,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",580,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",582,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",582,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",582,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",583,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",583,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",583,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",583,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_usize","","",583,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u64","","",583,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_u32","","",583,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u16","","",583,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u8","","",583,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_isize","","",583,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i64","","",583,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_i32","","",583,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i16","","",583,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i8","","",583,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_bool","","",583,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f64","","",583,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_f32","","",583,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_char","","",583,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",583,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",583,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",583,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",583,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",583,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",583,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",583,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",583,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",583,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",583,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",583,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",583,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",583,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",583,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_option_some","","",583,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",583,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",583,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",583,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",583,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",583,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"encode","","",572,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"index","","",572,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",572,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",584,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",584,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",584,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",585,{"inputs":[{"name":"parserstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",585,{"inputs":[{"name":"parserstate"},{"name":"parserstate"}],"output":{"name":"bool"}}],[11,"ne","","",585,{"inputs":[{"name":"parserstate"},{"name":"parserstate"}],"output":{"name":"bool"}}],[11,"fmt","","",586,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",586,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",586,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",586,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"fmt","","",587,{"inputs":[{"name":"internalstackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",587,{"inputs":[{"name":"internalstackelement"}],"output":{"name":"internalstackelement"}}],[11,"eq","","",587,{"inputs":[{"name":"internalstackelement"},{"name":"internalstackelement"}],"output":{"name":"bool"}}],[11,"ne","","",587,{"inputs":[{"name":"internalstackelement"},{"name":"internalstackelement"}],"output":{"name":"bool"}}],[11,"new","","",588,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",588,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",588,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",588,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",588,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",588,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",588,null],[11,"top","","Returns the top-most element (if any).",588,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",589,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",589,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",589,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",590,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",590,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",591,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_usize","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u8","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u16","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u32","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u64","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_isize","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i8","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i16","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i32","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i64","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f32","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f64","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_bool","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_char","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_str","","",591,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_enum","","",591,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",591,null],[11,"read_enum_variant_arg","","",591,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",591,null],[11,"read_enum_struct_variant_field","","",591,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",591,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",591,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",591,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",591,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",591,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",591,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",591,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",591,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",591,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",591,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",591,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",591,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"error","","",591,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",572,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",89,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",63,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",421,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",38,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","ethcore_util::standard::option","",383,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"write_str","rustc_serialize::json","",592,{"inputs":[{"name":"formatshim"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",572,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",593,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",594,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",595,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",595,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",572,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[4,"Json","ethcore_util::standard","Represents a json value",null,null],[13,"I64","","",572,null],[13,"U64","","",572,null],[13,"F64","","",572,null],[13,"String","","",572,null],[13,"Boolean","","",572,null],[13,"Array","","",572,null],[13,"Object","","",572,null],[13,"Null","","",572,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",596,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",597,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[4,"FromHexError","","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",578,null],[13,"InvalidHexLength","","The input had an invalid length",578,null],[8,"HeapSizeOf","","",null,null],[10,"heap_size_of_children","","Measure the size of any heap-allocated structures that hang off this value, but not the\nspace taken up by the value itself (i.e. what size_of::<T> measures, more or less); that\nspace is handled by the implementation of HeapSizeOf for Box<T> below.",598,{"inputs":[{"name":"heapsizeof"}],"output":{"name":"usize"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",599,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",599,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",599,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",599,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",599,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",599,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",599,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupbylazy"}}],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",599,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"chunkslazy"}}],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",599,null],[11,"slice","","Return a sliced iterator.",599,{"inputs":[{"name":"itertools"},{"name":"r"}],"output":{"name":"islice"}}],[11,"into_rc","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",599,{"inputs":[{"name":"itertools"}],"output":{"name":"rciter"}}],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",599,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"step"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",599,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",599,{"inputs":[{"name":"itertools"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",599,{"inputs":[{"name":"itertools"}],"output":{"name":"kmerge"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",599,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"product"}}],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",599,{"inputs":[{"name":"itertools"}],"output":{"name":"multipeek"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements. For each pair the closure\nis passed the latest two elements, `x`, `y` and may return either `Ok(z)`\nto merge the two values or `Err((x, y))` to indicate they can't be merged.",599,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",599,{"inputs":[{"name":"itertools"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",599,{"inputs":[{"name":"itertools"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",599,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",599,{"inputs":[{"name":"itertools"}],"output":{"name":"mendslices"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",599,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements\nand produces `A`. Stops on the first `None` encountered.",599,{"inputs":[{"name":"itertools"}],"output":{"name":"whilesome"}}],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",599,{"inputs":[{"name":"itertools"}],"output":{"name":"combinations"}}],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",599,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",599,{"inputs":[{"name":"itertools"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",599,{"inputs":[{"name":"itertools"}],"output":{"name":"flatten"}}],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",599,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",599,{"inputs":[{"name":"itertools"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",599,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",599,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",599,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",599,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",599,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",599,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",599,{"inputs":[{"name":"itertools"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",599,{"inputs":[{"name":"itertools"},{"name":"str"},{"name":"f"}],"output":{"name":"format"}}],[11,"fold_results","","Fold `Result` values from an iterator.",599,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",599,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",599,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"option"}}],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it's possible to tell.",599,{"inputs":[{"name":"itertools"}],"output":{"name":"option"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",599,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",599,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",599,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[0,"from_json","ethcore_util","Coversion from json.",null,null],[8,"FromJson","ethcore_util::from_json","Trait allowing conversion from a JSON value.",null,null],[10,"from_json","","Convert a JSON value to an instance of this type.",600,{"inputs":[{"name":"fromjson"},{"name":"json"}],"output":{"name":"self"}}],[0,"common","ethcore_util","Utils common types and macros global reexport.",null,null],[0,"error","","General error types for use in ethcore.",null,null],[3,"Mismatch","ethcore_util::error","Error indicating an expected value was not found.",null,null],[12,"expected","","Value expected.",601,null],[12,"found","","Value found.",601,null],[3,"OutOfBounds","","Error indicating value found is outside of a valid range.",null,null],[12,"min","","Minimum allowed value.",602,null],[12,"max","","Maximum allowed value.",602,null],[12,"found","","Value found.",602,null],[4,"BaseDataError","","Error in database subsystem.",null,null],[13,"NegativelyReferencedHash","","An entry was removed more times than inserted.",603,null],[4,"UtilError","","General error type which should be capable of representing all errors in ethcore.",null,null],[13,"Crypto","","Error concerning the crypto utility subsystem.",604,null],[13,"StdIo","","Error concerning the Rust standard library's IO subsystem.",604,null],[13,"Io","","Error concerning our IO utility subsystem.",604,null],[13,"AddressParse","","Error concerning the network address parsing subsystem.",604,null],[13,"AddressResolve","","Error concerning the network address resolution subsystem.",604,null],[13,"FromHex","","Error concerning the hex conversion logic.",604,null],[13,"BaseData","","Error concerning the database abstraction logic.",604,null],[13,"Network","","Error concerning the network subsystem.",604,null],[13,"Decoder","","Error concerning the RLP decoder.",604,null],[13,"SimpleString","","Miscellaneous error described by a string.",604,null],[13,"BadSize","","Error from a bad input size being given for the needed output.",604,null],[11,"fmt","","",603,{"inputs":[{"name":"basedataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",604,{"inputs":[{"name":"utilerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",601,{"inputs":[{"name":"mismatch"},{"name":"mismatch"}],"output":{"name":"bool"}}],[11,"ne","","",601,{"inputs":[{"name":"mismatch"},{"name":"mismatch"}],"output":{"name":"bool"}}],[11,"fmt","","",601,{"inputs":[{"name":"mismatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",602,{"inputs":[{"name":"outofbounds"},{"name":"outofbounds"}],"output":{"name":"bool"}}],[11,"ne","","",602,{"inputs":[{"name":"outofbounds"},{"name":"outofbounds"}],"output":{"name":"bool"}}],[11,"fmt","","",602,{"inputs":[{"name":"outofbounds"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",604,{"inputs":[{"name":"utilerror"},{"name":"fromhexerror"}],"output":{"name":"utilerror"}}],[11,"from","","",604,{"inputs":[{"name":"utilerror"},{"name":"basedataerror"}],"output":{"name":"utilerror"}}],[11,"from","","",604,{"inputs":[{"name":"utilerror"},{"name":"networkerror"}],"output":{"name":"utilerror"}}],[11,"from","","",604,{"inputs":[{"name":"utilerror"},{"name":"error"}],"output":{"name":"utilerror"}}],[11,"from","","",604,{"inputs":[{"name":"utilerror"},{"name":"ioerror"}],"output":{"name":"utilerror"}}],[11,"from","","",604,{"inputs":[{"name":"utilerror"},{"name":"cryptoerror"}],"output":{"name":"utilerror"}}],[11,"from","","",604,{"inputs":[{"name":"utilerror"},{"name":"addrparseerror"}],"output":{"name":"utilerror"}}],[11,"from","","",604,{"inputs":[{"name":"utilerror"},{"name":"decodererror"}],"output":{"name":"utilerror"}}],[11,"from","","",604,{"inputs":[{"name":"utilerror"},{"name":"string"}],"output":{"name":"utilerror"}}],[0,"hash","ethcore_util","General hash types, a fixed-size raw-data type used as the output of hash functions.",null,null],[3,"H32","ethcore_util::hash","Unformatted binary data of fixed length.",null,null],[3,"H64","","Unformatted binary data of fixed length.",null,null],[3,"H128","","Unformatted binary data of fixed length.",null,null],[3,"Address","","Unformatted binary data of fixed length.",null,null],[3,"H256","","Unformatted binary data of fixed length.",null,null],[3,"H264","","Unformatted binary data of fixed length.",null,null],[3,"H512","","Unformatted binary data of fixed length.",null,null],[3,"H520","","Unformatted binary data of fixed length.",null,null],[3,"H1024","","Unformatted binary data of fixed length.",null,null],[3,"H2048","","Unformatted binary data of fixed length.",null,null],[5,"h256_from_hex","","Convert string `s` to an `H256`. Will panic if `s` is not 64 characters long or if any of\nthose characters are not 0-9, a-z or A-Z.",null,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[5,"h256_from_u64","","Convert `n` to an `H256`, setting the rightmost 8 bytes.",null,{"inputs":[{"name":"u64"}],"output":{"name":"h256"}}],[5,"address_from_hex","","Convert string `s` to an `Address`. Will panic if `s` is not 40 characters long or if any of\nthose characters are not 0-9, a-z or A-Z.",null,{"inputs":[{"name":"str"}],"output":{"name":"address"}}],[5,"address_from_u64","","Convert `n` to an `Address`, setting the rightmost 8 bytes.",null,{"inputs":[{"name":"u64"}],"output":{"name":"address"}}],[7,"ZERO_ADDRESS","","Constant address for point 0. Often used as a default.",null,null],[7,"ZERO_H256","","Constant 256-bit datum for 0. Often used as a default.",null,null],[8,"FixedHash","","Trait for a fixed-size byte array to be used as the output of hash functions.",null,null],[10,"new","","Create a new, zero-initialised, instance.",605,{"inputs":[{"name":"fixedhash"}],"output":{"name":"self"}}],[10,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",605,{"inputs":[{"name":"fixedhash"}],"output":{"name":"self"}}],[10,"random","","Create a new, cryptographically random, instance.",605,{"inputs":[{"name":"fixedhash"}],"output":{"name":"self"}}],[10,"randomize","","Assign self have a cryptographically random value.",605,{"inputs":[{"name":"fixedhash"}],"output":null}],[10,"len","","Get the size of this object in bytes.",605,{"inputs":[{"name":"fixedhash"}],"output":{"name":"usize"}}],[10,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",605,null],[10,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",605,null],[10,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",605,null],[10,"shift_bloomed","","When interpreting self as a bloom output, augment (bit-wise OR) with the a bloomed version of `b`.",605,{"inputs":[{"name":"fixedhash"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_bloomed","","Same as `shift_bloomed` except that `self` is consumed and a new value returned.",605,{"inputs":[{"name":"fixedhash"},{"name":"t"}],"output":{"name":"self"}}],[10,"bloom_part","","Bloom the current value using the bloom parameter `m`.",605,{"inputs":[{"name":"fixedhash"},{"name":"usize"}],"output":{"name":"t"}}],[10,"contains_bloomed","","Check to see whether this hash, interpreted as a bloom, contains the value `b` when bloomed.",605,{"inputs":[{"name":"fixedhash"},{"name":"t"}],"output":{"name":"bool"}}],[10,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",605,{"inputs":[{"name":"fixedhash"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_zero","","Returns `true` if no bits are set.",605,{"inputs":[{"name":"fixedhash"}],"output":{"name":"bool"}}],[10,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",605,{"inputs":[{"name":"fixedhash"}],"output":{"name":"u64"}}],[11,"from","","",606,{"inputs":[{"name":"h256"},{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","","",606,{"inputs":[{"name":"h256"},{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","","",607,{"inputs":[{"name":"address"},{"name":"h256"}],"output":{"name":"address"}}],[11,"from","","",608,{"inputs":[{"name":"h64"},{"name":"h256"}],"output":{"name":"h64"}}],[11,"from","","",606,{"inputs":[{"name":"h256"},{"name":"address"}],"output":{"name":"h256"}}],[11,"from","","",606,{"inputs":[{"name":"h256"},{"name":"address"}],"output":{"name":"h256"}}],[11,"deref","","",609,null],[11,"as_ref","","",609,null],[11,"deref_mut","","",609,null],[11,"new","","",609,{"inputs":[{"name":"h32"}],"output":{"name":"h32"}}],[11,"zero","","",609,{"inputs":[{"name":"h32"}],"output":{"name":"h32"}}],[11,"random","","",609,{"inputs":[{"name":"h32"}],"output":{"name":"h32"}}],[11,"randomize","","",609,{"inputs":[{"name":"h32"}],"output":null}],[11,"len","","",609,{"inputs":[{"name":"h32"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",609,null],[11,"from_slice","","",609,null],[11,"copy_to","","",609,null],[11,"shift_bloomed","","",609,{"inputs":[{"name":"h32"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",609,{"inputs":[{"name":"h32"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",609,{"inputs":[{"name":"h32"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",609,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",609,{"inputs":[{"name":"h32"}],"output":{"name":"bool"}}],[11,"low_u64","","",609,{"inputs":[{"name":"h32"}],"output":{"name":"u64"}}],[11,"from_str","","",609,{"inputs":[{"name":"h32"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",609,{"inputs":[{"name":"h32"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",609,{"inputs":[{"name":"h32"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",609,{"inputs":[{"name":"h32"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",609,{"inputs":[{"name":"h32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",609,{"inputs":[{"name":"h32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",609,{"inputs":[{"name":"h32"}],"output":{"name":"h32"}}],[11,"eq","","",609,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",609,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",609,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",609,{"inputs":[{"name":"h32"},{"name":"h"}],"output":null}],[11,"index","","",609,{"inputs":[{"name":"h32"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",609,{"inputs":[{"name":"h32"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",609,null],[11,"index_mut","","",609,null],[11,"index","","",609,null],[11,"index_mut","","",609,null],[11,"bitor","","",609,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",609,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",609,{"inputs":[{"name":"h32"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",609,{"inputs":[{"name":"h32"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",609,{"inputs":[{"name":"h32"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",609,{"inputs":[{"name":"h32"}],"output":{"name":"self"}}],[11,"from","","",609,{"inputs":[{"name":"h32"},{"name":"u64"}],"output":{"name":"h32"}}],[11,"from","","",609,{"inputs":[{"name":"h32"},{"name":"str"}],"output":{"name":"h32"}}],[11,"deref","","",608,null],[11,"as_ref","","",608,null],[11,"deref_mut","","",608,null],[11,"new","","",608,{"inputs":[{"name":"h64"}],"output":{"name":"h64"}}],[11,"zero","","",608,{"inputs":[{"name":"h64"}],"output":{"name":"h64"}}],[11,"random","","",608,{"inputs":[{"name":"h64"}],"output":{"name":"h64"}}],[11,"randomize","","",608,{"inputs":[{"name":"h64"}],"output":null}],[11,"len","","",608,{"inputs":[{"name":"h64"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",608,null],[11,"from_slice","","",608,null],[11,"copy_to","","",608,null],[11,"shift_bloomed","","",608,{"inputs":[{"name":"h64"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",608,{"inputs":[{"name":"h64"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",608,{"inputs":[{"name":"h64"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",608,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",608,{"inputs":[{"name":"h64"}],"output":{"name":"bool"}}],[11,"low_u64","","",608,{"inputs":[{"name":"h64"}],"output":{"name":"u64"}}],[11,"from_str","","",608,{"inputs":[{"name":"h64"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",608,{"inputs":[{"name":"h64"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",608,{"inputs":[{"name":"h64"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",608,{"inputs":[{"name":"h64"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",608,{"inputs":[{"name":"h64"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",608,{"inputs":[{"name":"h64"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",608,{"inputs":[{"name":"h64"}],"output":{"name":"h64"}}],[11,"eq","","",608,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",608,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",608,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",608,{"inputs":[{"name":"h64"},{"name":"h"}],"output":null}],[11,"index","","",608,{"inputs":[{"name":"h64"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",608,{"inputs":[{"name":"h64"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",608,null],[11,"index_mut","","",608,null],[11,"index","","",608,null],[11,"index_mut","","",608,null],[11,"bitor","","",608,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",608,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",608,{"inputs":[{"name":"h64"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",608,{"inputs":[{"name":"h64"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",608,{"inputs":[{"name":"h64"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",608,{"inputs":[{"name":"h64"}],"output":{"name":"self"}}],[11,"from","","",608,{"inputs":[{"name":"h64"},{"name":"u64"}],"output":{"name":"h64"}}],[11,"from","","",608,{"inputs":[{"name":"h64"},{"name":"str"}],"output":{"name":"h64"}}],[11,"deref","","",610,null],[11,"as_ref","","",610,null],[11,"deref_mut","","",610,null],[11,"new","","",610,{"inputs":[{"name":"h128"}],"output":{"name":"h128"}}],[11,"zero","","",610,{"inputs":[{"name":"h128"}],"output":{"name":"h128"}}],[11,"random","","",610,{"inputs":[{"name":"h128"}],"output":{"name":"h128"}}],[11,"randomize","","",610,{"inputs":[{"name":"h128"}],"output":null}],[11,"len","","",610,{"inputs":[{"name":"h128"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",610,null],[11,"from_slice","","",610,null],[11,"copy_to","","",610,null],[11,"shift_bloomed","","",610,{"inputs":[{"name":"h128"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",610,{"inputs":[{"name":"h128"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",610,{"inputs":[{"name":"h128"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",610,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",610,{"inputs":[{"name":"h128"}],"output":{"name":"bool"}}],[11,"low_u64","","",610,{"inputs":[{"name":"h128"}],"output":{"name":"u64"}}],[11,"from_str","","",610,{"inputs":[{"name":"h128"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",610,{"inputs":[{"name":"h128"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",610,{"inputs":[{"name":"h128"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",610,{"inputs":[{"name":"h128"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",610,{"inputs":[{"name":"h128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",610,{"inputs":[{"name":"h128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",610,{"inputs":[{"name":"h128"}],"output":{"name":"h128"}}],[11,"eq","","",610,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",610,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",610,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",610,{"inputs":[{"name":"h128"},{"name":"h"}],"output":null}],[11,"index","","",610,{"inputs":[{"name":"h128"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",610,{"inputs":[{"name":"h128"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",610,null],[11,"index_mut","","",610,null],[11,"index","","",610,null],[11,"index_mut","","",610,null],[11,"bitor","","",610,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",610,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",610,{"inputs":[{"name":"h128"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",610,{"inputs":[{"name":"h128"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",610,{"inputs":[{"name":"h128"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",610,{"inputs":[{"name":"h128"}],"output":{"name":"self"}}],[11,"from","","",610,{"inputs":[{"name":"h128"},{"name":"u64"}],"output":{"name":"h128"}}],[11,"from","","",610,{"inputs":[{"name":"h128"},{"name":"str"}],"output":{"name":"h128"}}],[11,"deref","","",607,null],[11,"as_ref","","",607,null],[11,"deref_mut","","",607,null],[11,"new","","",607,{"inputs":[{"name":"address"}],"output":{"name":"address"}}],[11,"zero","","",607,{"inputs":[{"name":"address"}],"output":{"name":"address"}}],[11,"random","","",607,{"inputs":[{"name":"address"}],"output":{"name":"address"}}],[11,"randomize","","",607,{"inputs":[{"name":"address"}],"output":null}],[11,"len","","",607,{"inputs":[{"name":"address"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",607,null],[11,"from_slice","","",607,null],[11,"copy_to","","",607,null],[11,"shift_bloomed","","",607,{"inputs":[{"name":"address"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",607,{"inputs":[{"name":"address"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",607,{"inputs":[{"name":"address"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",607,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",607,{"inputs":[{"name":"address"}],"output":{"name":"bool"}}],[11,"low_u64","","",607,{"inputs":[{"name":"address"}],"output":{"name":"u64"}}],[11,"from_str","","",607,{"inputs":[{"name":"address"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",607,{"inputs":[{"name":"address"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",607,{"inputs":[{"name":"address"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",607,{"inputs":[{"name":"address"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",607,{"inputs":[{"name":"address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",607,{"inputs":[{"name":"address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",607,{"inputs":[{"name":"address"}],"output":{"name":"address"}}],[11,"eq","","",607,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",607,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",607,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",607,{"inputs":[{"name":"address"},{"name":"h"}],"output":null}],[11,"index","","",607,{"inputs":[{"name":"address"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",607,{"inputs":[{"name":"address"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",607,null],[11,"index_mut","","",607,null],[11,"index","","",607,null],[11,"index_mut","","",607,null],[11,"bitor","","",607,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",607,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",607,{"inputs":[{"name":"address"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",607,{"inputs":[{"name":"address"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",607,{"inputs":[{"name":"address"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",607,{"inputs":[{"name":"address"}],"output":{"name":"self"}}],[11,"from","","",607,{"inputs":[{"name":"address"},{"name":"u64"}],"output":{"name":"address"}}],[11,"from","","",607,{"inputs":[{"name":"address"},{"name":"str"}],"output":{"name":"address"}}],[11,"deref","","",606,null],[11,"as_ref","","",606,null],[11,"deref_mut","","",606,null],[11,"new","","",606,{"inputs":[{"name":"h256"}],"output":{"name":"h256"}}],[11,"zero","","",606,{"inputs":[{"name":"h256"}],"output":{"name":"h256"}}],[11,"random","","",606,{"inputs":[{"name":"h256"}],"output":{"name":"h256"}}],[11,"randomize","","",606,{"inputs":[{"name":"h256"}],"output":null}],[11,"len","","",606,{"inputs":[{"name":"h256"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",606,null],[11,"from_slice","","",606,null],[11,"copy_to","","",606,null],[11,"shift_bloomed","","",606,{"inputs":[{"name":"h256"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",606,{"inputs":[{"name":"h256"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",606,{"inputs":[{"name":"h256"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",606,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",606,{"inputs":[{"name":"h256"}],"output":{"name":"bool"}}],[11,"low_u64","","",606,{"inputs":[{"name":"h256"}],"output":{"name":"u64"}}],[11,"from_str","","",606,{"inputs":[{"name":"h256"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",606,{"inputs":[{"name":"h256"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",606,{"inputs":[{"name":"h256"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",606,{"inputs":[{"name":"h256"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",606,{"inputs":[{"name":"h256"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",606,{"inputs":[{"name":"h256"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",606,{"inputs":[{"name":"h256"}],"output":{"name":"h256"}}],[11,"eq","","",606,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",606,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",606,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",606,{"inputs":[{"name":"h256"},{"name":"h"}],"output":null}],[11,"index","","",606,{"inputs":[{"name":"h256"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",606,{"inputs":[{"name":"h256"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",606,null],[11,"index_mut","","",606,null],[11,"index","","",606,null],[11,"index_mut","","",606,null],[11,"bitor","","",606,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",606,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",606,{"inputs":[{"name":"h256"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",606,{"inputs":[{"name":"h256"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",606,{"inputs":[{"name":"h256"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",606,{"inputs":[{"name":"h256"}],"output":{"name":"self"}}],[11,"from","","",606,{"inputs":[{"name":"h256"},{"name":"u64"}],"output":{"name":"h256"}}],[11,"from","","",606,{"inputs":[{"name":"h256"},{"name":"str"}],"output":{"name":"h256"}}],[11,"deref","","",611,null],[11,"as_ref","","",611,null],[11,"deref_mut","","",611,null],[11,"new","","",611,{"inputs":[{"name":"h264"}],"output":{"name":"h264"}}],[11,"zero","","",611,{"inputs":[{"name":"h264"}],"output":{"name":"h264"}}],[11,"random","","",611,{"inputs":[{"name":"h264"}],"output":{"name":"h264"}}],[11,"randomize","","",611,{"inputs":[{"name":"h264"}],"output":null}],[11,"len","","",611,{"inputs":[{"name":"h264"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",611,null],[11,"from_slice","","",611,null],[11,"copy_to","","",611,null],[11,"shift_bloomed","","",611,{"inputs":[{"name":"h264"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",611,{"inputs":[{"name":"h264"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",611,{"inputs":[{"name":"h264"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",611,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",611,{"inputs":[{"name":"h264"}],"output":{"name":"bool"}}],[11,"low_u64","","",611,{"inputs":[{"name":"h264"}],"output":{"name":"u64"}}],[11,"from_str","","",611,{"inputs":[{"name":"h264"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",611,{"inputs":[{"name":"h264"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",611,{"inputs":[{"name":"h264"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",611,{"inputs":[{"name":"h264"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",611,{"inputs":[{"name":"h264"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",611,{"inputs":[{"name":"h264"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",611,{"inputs":[{"name":"h264"}],"output":{"name":"h264"}}],[11,"eq","","",611,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",611,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",611,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",611,{"inputs":[{"name":"h264"},{"name":"h"}],"output":null}],[11,"index","","",611,{"inputs":[{"name":"h264"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",611,{"inputs":[{"name":"h264"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",611,null],[11,"index_mut","","",611,null],[11,"index","","",611,null],[11,"index_mut","","",611,null],[11,"bitor","","",611,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",611,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",611,{"inputs":[{"name":"h264"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",611,{"inputs":[{"name":"h264"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",611,{"inputs":[{"name":"h264"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",611,{"inputs":[{"name":"h264"}],"output":{"name":"self"}}],[11,"from","","",611,{"inputs":[{"name":"h264"},{"name":"u64"}],"output":{"name":"h264"}}],[11,"from","","",611,{"inputs":[{"name":"h264"},{"name":"str"}],"output":{"name":"h264"}}],[11,"deref","","",612,null],[11,"as_ref","","",612,null],[11,"deref_mut","","",612,null],[11,"new","","",612,{"inputs":[{"name":"h512"}],"output":{"name":"h512"}}],[11,"zero","","",612,{"inputs":[{"name":"h512"}],"output":{"name":"h512"}}],[11,"random","","",612,{"inputs":[{"name":"h512"}],"output":{"name":"h512"}}],[11,"randomize","","",612,{"inputs":[{"name":"h512"}],"output":null}],[11,"len","","",612,{"inputs":[{"name":"h512"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",612,null],[11,"from_slice","","",612,null],[11,"copy_to","","",612,null],[11,"shift_bloomed","","",612,{"inputs":[{"name":"h512"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",612,{"inputs":[{"name":"h512"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",612,{"inputs":[{"name":"h512"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",612,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",612,{"inputs":[{"name":"h512"}],"output":{"name":"bool"}}],[11,"low_u64","","",612,{"inputs":[{"name":"h512"}],"output":{"name":"u64"}}],[11,"from_str","","",612,{"inputs":[{"name":"h512"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",612,{"inputs":[{"name":"h512"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",612,{"inputs":[{"name":"h512"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",612,{"inputs":[{"name":"h512"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",612,{"inputs":[{"name":"h512"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",612,{"inputs":[{"name":"h512"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",612,{"inputs":[{"name":"h512"}],"output":{"name":"h512"}}],[11,"eq","","",612,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",612,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",612,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",612,{"inputs":[{"name":"h512"},{"name":"h"}],"output":null}],[11,"index","","",612,{"inputs":[{"name":"h512"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",612,{"inputs":[{"name":"h512"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",612,null],[11,"index_mut","","",612,null],[11,"index","","",612,null],[11,"index_mut","","",612,null],[11,"bitor","","",612,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",612,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",612,{"inputs":[{"name":"h512"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",612,{"inputs":[{"name":"h512"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",612,{"inputs":[{"name":"h512"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",612,{"inputs":[{"name":"h512"}],"output":{"name":"self"}}],[11,"from","","",612,{"inputs":[{"name":"h512"},{"name":"u64"}],"output":{"name":"h512"}}],[11,"from","","",612,{"inputs":[{"name":"h512"},{"name":"str"}],"output":{"name":"h512"}}],[11,"deref","","",613,null],[11,"as_ref","","",613,null],[11,"deref_mut","","",613,null],[11,"new","","",613,{"inputs":[{"name":"h520"}],"output":{"name":"h520"}}],[11,"zero","","",613,{"inputs":[{"name":"h520"}],"output":{"name":"h520"}}],[11,"random","","",613,{"inputs":[{"name":"h520"}],"output":{"name":"h520"}}],[11,"randomize","","",613,{"inputs":[{"name":"h520"}],"output":null}],[11,"len","","",613,{"inputs":[{"name":"h520"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",613,null],[11,"from_slice","","",613,null],[11,"copy_to","","",613,null],[11,"shift_bloomed","","",613,{"inputs":[{"name":"h520"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",613,{"inputs":[{"name":"h520"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",613,{"inputs":[{"name":"h520"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",613,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",613,{"inputs":[{"name":"h520"}],"output":{"name":"bool"}}],[11,"low_u64","","",613,{"inputs":[{"name":"h520"}],"output":{"name":"u64"}}],[11,"from_str","","",613,{"inputs":[{"name":"h520"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",613,{"inputs":[{"name":"h520"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",613,{"inputs":[{"name":"h520"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",613,{"inputs":[{"name":"h520"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",613,{"inputs":[{"name":"h520"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",613,{"inputs":[{"name":"h520"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",613,{"inputs":[{"name":"h520"}],"output":{"name":"h520"}}],[11,"eq","","",613,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",613,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",613,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",613,{"inputs":[{"name":"h520"},{"name":"h"}],"output":null}],[11,"index","","",613,{"inputs":[{"name":"h520"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",613,{"inputs":[{"name":"h520"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",613,null],[11,"index_mut","","",613,null],[11,"index","","",613,null],[11,"index_mut","","",613,null],[11,"bitor","","",613,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",613,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",613,{"inputs":[{"name":"h520"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",613,{"inputs":[{"name":"h520"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",613,{"inputs":[{"name":"h520"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",613,{"inputs":[{"name":"h520"}],"output":{"name":"self"}}],[11,"from","","",613,{"inputs":[{"name":"h520"},{"name":"u64"}],"output":{"name":"h520"}}],[11,"from","","",613,{"inputs":[{"name":"h520"},{"name":"str"}],"output":{"name":"h520"}}],[11,"deref","","",614,null],[11,"as_ref","","",614,null],[11,"deref_mut","","",614,null],[11,"new","","",614,{"inputs":[{"name":"h1024"}],"output":{"name":"h1024"}}],[11,"zero","","",614,{"inputs":[{"name":"h1024"}],"output":{"name":"h1024"}}],[11,"random","","",614,{"inputs":[{"name":"h1024"}],"output":{"name":"h1024"}}],[11,"randomize","","",614,{"inputs":[{"name":"h1024"}],"output":null}],[11,"len","","",614,{"inputs":[{"name":"h1024"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",614,null],[11,"from_slice","","",614,null],[11,"copy_to","","",614,null],[11,"shift_bloomed","","",614,{"inputs":[{"name":"h1024"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",614,{"inputs":[{"name":"h1024"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",614,{"inputs":[{"name":"h1024"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",614,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",614,{"inputs":[{"name":"h1024"}],"output":{"name":"bool"}}],[11,"low_u64","","",614,{"inputs":[{"name":"h1024"}],"output":{"name":"u64"}}],[11,"from_str","","",614,{"inputs":[{"name":"h1024"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",614,{"inputs":[{"name":"h1024"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",614,{"inputs":[{"name":"h1024"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",614,{"inputs":[{"name":"h1024"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",614,{"inputs":[{"name":"h1024"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",614,{"inputs":[{"name":"h1024"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",614,{"inputs":[{"name":"h1024"}],"output":{"name":"h1024"}}],[11,"eq","","",614,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",614,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",614,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",614,{"inputs":[{"name":"h1024"},{"name":"h"}],"output":null}],[11,"index","","",614,{"inputs":[{"name":"h1024"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",614,{"inputs":[{"name":"h1024"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",614,null],[11,"index_mut","","",614,null],[11,"index","","",614,null],[11,"index_mut","","",614,null],[11,"bitor","","",614,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",614,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",614,{"inputs":[{"name":"h1024"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",614,{"inputs":[{"name":"h1024"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",614,{"inputs":[{"name":"h1024"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",614,{"inputs":[{"name":"h1024"}],"output":{"name":"self"}}],[11,"from","","",614,{"inputs":[{"name":"h1024"},{"name":"u64"}],"output":{"name":"h1024"}}],[11,"from","","",614,{"inputs":[{"name":"h1024"},{"name":"str"}],"output":{"name":"h1024"}}],[11,"deref","","",615,null],[11,"as_ref","","",615,null],[11,"deref_mut","","",615,null],[11,"new","","",615,{"inputs":[{"name":"h2048"}],"output":{"name":"h2048"}}],[11,"zero","","",615,{"inputs":[{"name":"h2048"}],"output":{"name":"h2048"}}],[11,"random","","",615,{"inputs":[{"name":"h2048"}],"output":{"name":"h2048"}}],[11,"randomize","","",615,{"inputs":[{"name":"h2048"}],"output":null}],[11,"len","","",615,{"inputs":[{"name":"h2048"}],"output":{"name":"usize"}}],[11,"clone_from_slice","","",615,null],[11,"from_slice","","",615,null],[11,"copy_to","","",615,null],[11,"shift_bloomed","","",615,{"inputs":[{"name":"h2048"},{"name":"t"}],"output":{"name":"self"}}],[11,"bloom_part","","",615,{"inputs":[{"name":"h2048"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains_bloomed","","",615,{"inputs":[{"name":"h2048"},{"name":"t"}],"output":{"name":"bool"}}],[11,"contains","","",615,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",615,{"inputs":[{"name":"h2048"}],"output":{"name":"bool"}}],[11,"low_u64","","",615,{"inputs":[{"name":"h2048"}],"output":{"name":"u64"}}],[11,"from_str","","",615,{"inputs":[{"name":"h2048"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",615,{"inputs":[{"name":"h2048"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",615,{"inputs":[{"name":"h2048"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_json","","",615,{"inputs":[{"name":"h2048"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",615,{"inputs":[{"name":"h2048"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",615,{"inputs":[{"name":"h2048"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",615,{"inputs":[{"name":"h2048"}],"output":{"name":"h2048"}}],[11,"eq","","",615,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",615,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",615,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",615,{"inputs":[{"name":"h2048"},{"name":"h"}],"output":null}],[11,"index","","",615,{"inputs":[{"name":"h2048"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",615,{"inputs":[{"name":"h2048"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",615,null],[11,"index_mut","","",615,null],[11,"index","","",615,null],[11,"index_mut","","",615,null],[11,"bitor","","",615,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitand","","",615,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"output"}}],[11,"bitxor","","",615,{"inputs":[{"name":"h2048"},{"name":"self"}],"output":{"name":"output"}}],[11,"hex","","Get a hex representation.",615,{"inputs":[{"name":"h2048"}],"output":{"name":"string"}}],[11,"from_bloomed","","Construct new instance equal to the bloomed value of `b`.",615,{"inputs":[{"name":"h2048"},{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",615,{"inputs":[{"name":"h2048"}],"output":{"name":"self"}}],[11,"from","","",615,{"inputs":[{"name":"h2048"},{"name":"u64"}],"output":{"name":"h2048"}}],[11,"from","","",615,{"inputs":[{"name":"h2048"},{"name":"str"}],"output":{"name":"h2048"}}],[0,"uint","ethcore_util","Big unsigned integer types",null,null],[3,"U512","ethcore_util::uint","Little-endian large integer type",null,null],[3,"U256","","Little-endian large integer type",null,null],[3,"U128","","Little-endian large integer type",null,null],[17,"ZERO_U256","","Constant value of `U256::zero()` that can be used for a reference saving an additional instance creation.",null,null],[17,"ONE_U256","","Constant value of `U256::one()` that can be used for a reference saving an additional instance creation.",null,null],[8,"Uint","","Large, fixed-length unsigned integer type.",null,null],[10,"zero","","Returns new instance equalling zero.",616,{"inputs":[{"name":"uint"}],"output":{"name":"self"}}],[10,"one","","Returns new instance equalling one.",616,{"inputs":[{"name":"uint"}],"output":{"name":"self"}}],[16,"FromDecStrErr","","Error type for converting from a decimal string.",616,null],[10,"from_dec_str","","Convert from a decimal string.",616,{"inputs":[{"name":"uint"},{"name":"str"}],"output":{"name":"result"}}],[10,"low_u32","","Conversion to u32",616,{"inputs":[{"name":"uint"}],"output":{"name":"u32"}}],[10,"low_u64","","Conversion to u64",616,{"inputs":[{"name":"uint"}],"output":{"name":"u64"}}],[10,"as_u32","","Conversion to u32 with overflow checking",616,{"inputs":[{"name":"uint"}],"output":{"name":"u32"}}],[10,"as_u64","","Conversion to u64 with overflow checking",616,{"inputs":[{"name":"uint"}],"output":{"name":"u64"}}],[10,"bits","","Return the least number of bits needed to represent the number",616,{"inputs":[{"name":"uint"}],"output":{"name":"usize"}}],[10,"bit","","Return if specific bit is set",616,{"inputs":[{"name":"uint"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"byte","","Return single byte",616,{"inputs":[{"name":"uint"},{"name":"usize"}],"output":{"name":"u8"}}],[10,"to_bytes","","Get this Uint as slice of bytes",616,null],[10,"exp10","","Create `Uint(10**n)`",616,{"inputs":[{"name":"uint"},{"name":"usize"}],"output":{"name":"self"}}],[10,"pow","","Return eponentation `self**other`. Panic on overflow.",616,{"inputs":[{"name":"uint"},{"name":"self"}],"output":{"name":"self"}}],[10,"overflowing_pow","","Return wrapped eponentation `self**other` and flag if there was an overflow",616,null],[10,"overflowing_add","","Add this `Uint` to other returning result and possible overflow",616,null],[10,"overflowing_sub","","Subtract another `Uint` from this returning result and possible overflow",616,null],[10,"overflowing_mul","","Multiple this `Uint` with other returning result and possible overflow",616,null],[10,"overflowing_div","","Divide this `Uint` by other returning result and possible overflow",616,null],[10,"overflowing_rem","","Returns reminder of division of this `Uint` by other and possible overflow",616,null],[10,"overflowing_neg","","Returns negation of this `Uint` and overflow (always true)",616,null],[10,"overflowing_shl","","Shifts this `Uint` and returns overflow",616,null],[11,"eq","","",617,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"ne","","",617,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"clone","","",617,{"inputs":[{"name":"u512"}],"output":{"name":"u512"}}],[11,"from_dec_str","","TODO: optimize, throw appropriate err",617,{"inputs":[{"name":"u512"},{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",617,{"inputs":[{"name":"u512"}],"output":{"name":"u32"}}],[11,"low_u64","","",617,{"inputs":[{"name":"u512"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",617,{"inputs":[{"name":"u512"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",617,{"inputs":[{"name":"u512"}],"output":{"name":"u64"}}],[11,"bits","","Return the least number of bits needed to represent the number",617,{"inputs":[{"name":"u512"}],"output":{"name":"usize"}}],[11,"bit","","",617,{"inputs":[{"name":"u512"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",617,{"inputs":[{"name":"u512"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_bytes","","",617,null],[11,"exp10","","",617,{"inputs":[{"name":"u512"},{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","",617,{"inputs":[{"name":"u512"}],"output":{"name":"self"}}],[11,"one","","",617,{"inputs":[{"name":"u512"}],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring\nhttps://en.wikipedia.org/wiki/Exponentiation_by_squaring",617,{"inputs":[{"name":"u512"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring\nhttps://en.wikipedia.org/wiki/Exponentiation_by_squaring",617,null],[11,"overflowing_add","","",617,null],[11,"overflowing_sub","","",617,null],[11,"overflowing_mul","","",617,null],[11,"overflowing_div","","",617,null],[11,"overflowing_rem","","",617,null],[11,"overflowing_neg","","",617,null],[11,"overflowing_shl","","",617,null],[11,"default","","",617,{"inputs":[{"name":"u512"}],"output":{"name":"self"}}],[11,"serialize","","",617,{"inputs":[{"name":"u512"},{"name":"s"}],"output":{"name":"result"}}],[11,"from","","",617,{"inputs":[{"name":"u512"},{"name":"u64"}],"output":{"name":"u512"}}],[11,"from_json","","",617,{"inputs":[{"name":"u512"},{"name":"json"}],"output":{"name":"self"}}],[11,"from","","",617,{"inputs":[{"name":"u512"},{"name":"u8"}],"output":{"name":"u512"}}],[11,"from","","",617,{"inputs":[{"name":"u512"},{"name":"u16"}],"output":{"name":"u512"}}],[11,"from","","",617,{"inputs":[{"name":"u512"},{"name":"u32"}],"output":{"name":"u512"}}],[11,"from","","",617,{"inputs":[{"name":"u512"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"from","","",617,{"inputs":[{"name":"u512"},{"name":"i64"}],"output":{"name":"u512"}}],[11,"from","","",617,{"inputs":[{"name":"u512"},{"name":"i8"}],"output":{"name":"u512"}}],[11,"from","","",617,{"inputs":[{"name":"u512"},{"name":"i16"}],"output":{"name":"u512"}}],[11,"from","","",617,{"inputs":[{"name":"u512"},{"name":"i32"}],"output":{"name":"u512"}}],[11,"from","","",617,{"inputs":[{"name":"u512"},{"name":"isize"}],"output":{"name":"u512"}}],[11,"from","","",617,null],[11,"from_str","","",617,{"inputs":[{"name":"u512"},{"name":"str"}],"output":{"name":"result"}}],[11,"add","","",617,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"sub","","",617,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"mul","","",617,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"div","","",617,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"rem","","",617,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitand","","",617,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitxor","","",617,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitor","","",617,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"not","","",617,{"inputs":[{"name":"u512"}],"output":{"name":"u512"}}],[11,"shl","","",617,{"inputs":[{"name":"u512"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"shr","","",617,{"inputs":[{"name":"u512"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"cmp","","",617,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",617,{"inputs":[{"name":"u512"},{"name":"u512"}],"output":{"name":"option"}}],[11,"fmt","","",617,{"inputs":[{"name":"u512"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",617,{"inputs":[{"name":"u512"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",617,{"inputs":[{"name":"u512"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",617,{"inputs":[{"name":"u512"},{"name":"h"}],"output":null}],[11,"eq","","",618,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"ne","","",618,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"clone","","",618,{"inputs":[{"name":"u256"}],"output":{"name":"u256"}}],[11,"from_dec_str","","TODO: optimize, throw appropriate err",618,{"inputs":[{"name":"u256"},{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",618,{"inputs":[{"name":"u256"}],"output":{"name":"u32"}}],[11,"low_u64","","",618,{"inputs":[{"name":"u256"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",618,{"inputs":[{"name":"u256"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",618,{"inputs":[{"name":"u256"}],"output":{"name":"u64"}}],[11,"bits","","Return the least number of bits needed to represent the number",618,{"inputs":[{"name":"u256"}],"output":{"name":"usize"}}],[11,"bit","","",618,{"inputs":[{"name":"u256"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",618,{"inputs":[{"name":"u256"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_bytes","","",618,null],[11,"exp10","","",618,{"inputs":[{"name":"u256"},{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","",618,{"inputs":[{"name":"u256"}],"output":{"name":"self"}}],[11,"one","","",618,{"inputs":[{"name":"u256"}],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring\nhttps://en.wikipedia.org/wiki/Exponentiation_by_squaring",618,{"inputs":[{"name":"u256"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring\nhttps://en.wikipedia.org/wiki/Exponentiation_by_squaring",618,null],[11,"overflowing_add","","",618,null],[11,"overflowing_sub","","",618,null],[11,"overflowing_mul","","",618,null],[11,"overflowing_div","","",618,null],[11,"overflowing_rem","","",618,null],[11,"overflowing_neg","","",618,null],[11,"overflowing_shl","","",618,null],[11,"default","","",618,{"inputs":[{"name":"u256"}],"output":{"name":"self"}}],[11,"serialize","","",618,{"inputs":[{"name":"u256"},{"name":"s"}],"output":{"name":"result"}}],[11,"from","","",618,{"inputs":[{"name":"u256"},{"name":"u64"}],"output":{"name":"u256"}}],[11,"from_json","","",618,{"inputs":[{"name":"u256"},{"name":"json"}],"output":{"name":"self"}}],[11,"from","","",618,{"inputs":[{"name":"u256"},{"name":"u8"}],"output":{"name":"u256"}}],[11,"from","","",618,{"inputs":[{"name":"u256"},{"name":"u16"}],"output":{"name":"u256"}}],[11,"from","","",618,{"inputs":[{"name":"u256"},{"name":"u32"}],"output":{"name":"u256"}}],[11,"from","","",618,{"inputs":[{"name":"u256"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"from","","",618,{"inputs":[{"name":"u256"},{"name":"i64"}],"output":{"name":"u256"}}],[11,"from","","",618,{"inputs":[{"name":"u256"},{"name":"i8"}],"output":{"name":"u256"}}],[11,"from","","",618,{"inputs":[{"name":"u256"},{"name":"i16"}],"output":{"name":"u256"}}],[11,"from","","",618,{"inputs":[{"name":"u256"},{"name":"i32"}],"output":{"name":"u256"}}],[11,"from","","",618,{"inputs":[{"name":"u256"},{"name":"isize"}],"output":{"name":"u256"}}],[11,"from","","",618,null],[11,"from_str","","",618,{"inputs":[{"name":"u256"},{"name":"str"}],"output":{"name":"result"}}],[11,"add","","",618,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"sub","","",618,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"mul","","",618,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"div","","",618,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"rem","","",618,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitand","","",618,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitxor","","",618,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitor","","",618,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"not","","",618,{"inputs":[{"name":"u256"}],"output":{"name":"u256"}}],[11,"shl","","",618,{"inputs":[{"name":"u256"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"shr","","",618,{"inputs":[{"name":"u256"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"cmp","","",618,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",618,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"option"}}],[11,"fmt","","",618,{"inputs":[{"name":"u256"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",618,{"inputs":[{"name":"u256"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",618,{"inputs":[{"name":"u256"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",618,{"inputs":[{"name":"u256"},{"name":"h"}],"output":null}],[11,"eq","","",619,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ne","","",619,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"clone","","",619,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[11,"from_dec_str","","TODO: optimize, throw appropriate err",619,{"inputs":[{"name":"u128"},{"name":"str"}],"output":{"name":"result"}}],[11,"low_u32","","",619,{"inputs":[{"name":"u128"}],"output":{"name":"u32"}}],[11,"low_u64","","",619,{"inputs":[{"name":"u128"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",619,{"inputs":[{"name":"u128"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",619,{"inputs":[{"name":"u128"}],"output":{"name":"u64"}}],[11,"bits","","Return the least number of bits needed to represent the number",619,{"inputs":[{"name":"u128"}],"output":{"name":"usize"}}],[11,"bit","","",619,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"byte","","",619,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_bytes","","",619,null],[11,"exp10","","",619,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","",619,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"one","","",619,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring\nhttps://en.wikipedia.org/wiki/Exponentiation_by_squaring",619,{"inputs":[{"name":"u128"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring\nhttps://en.wikipedia.org/wiki/Exponentiation_by_squaring",619,null],[11,"overflowing_add","","",619,null],[11,"overflowing_sub","","",619,null],[11,"overflowing_mul","","",619,null],[11,"overflowing_div","","",619,null],[11,"overflowing_rem","","",619,null],[11,"overflowing_neg","","",619,null],[11,"overflowing_shl","","",619,null],[11,"default","","",619,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"serialize","","",619,{"inputs":[{"name":"u128"},{"name":"s"}],"output":{"name":"result"}}],[11,"from","","",619,{"inputs":[{"name":"u128"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"from_json","","",619,{"inputs":[{"name":"u128"},{"name":"json"}],"output":{"name":"self"}}],[11,"from","","",619,{"inputs":[{"name":"u128"},{"name":"u8"}],"output":{"name":"u128"}}],[11,"from","","",619,{"inputs":[{"name":"u128"},{"name":"u16"}],"output":{"name":"u128"}}],[11,"from","","",619,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"from","","",619,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"from","","",619,{"inputs":[{"name":"u128"},{"name":"i64"}],"output":{"name":"u128"}}],[11,"from","","",619,{"inputs":[{"name":"u128"},{"name":"i8"}],"output":{"name":"u128"}}],[11,"from","","",619,{"inputs":[{"name":"u128"},{"name":"i16"}],"output":{"name":"u128"}}],[11,"from","","",619,{"inputs":[{"name":"u128"},{"name":"i32"}],"output":{"name":"u128"}}],[11,"from","","",619,{"inputs":[{"name":"u128"},{"name":"isize"}],"output":{"name":"u128"}}],[11,"from","","",619,null],[11,"from_str","","",619,{"inputs":[{"name":"u128"},{"name":"str"}],"output":{"name":"result"}}],[11,"add","","",619,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"sub","","",619,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"mul","","",619,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"div","","",619,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"rem","","",619,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitand","","",619,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitxor","","",619,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitor","","",619,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"not","","",619,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[11,"shl","","",619,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"shr","","",619,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"cmp","","",619,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",619,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"option"}}],[11,"fmt","","",619,{"inputs":[{"name":"u128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",619,{"inputs":[{"name":"u128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",619,{"inputs":[{"name":"u128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",619,{"inputs":[{"name":"u128"},{"name":"h"}],"output":null}],[11,"from","","",617,{"inputs":[{"name":"u512"},{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",618,{"inputs":[{"name":"u256"},{"name":"u512"}],"output":{"name":"u256"}}],[11,"from","","",619,{"inputs":[{"name":"u128"},{"name":"u256"}],"output":{"name":"u128"}}],[11,"from","","",619,{"inputs":[{"name":"u128"},{"name":"u512"}],"output":{"name":"u128"}}],[11,"from","","",617,{"inputs":[{"name":"u512"},{"name":"u128"}],"output":{"name":"u512"}}],[11,"from","","",618,{"inputs":[{"name":"u256"},{"name":"u128"}],"output":{"name":"u256"}}],[0,"bytes","ethcore_util","Unified interfaces for bytes operations on basic types",null,null],[3,"PrettySlice","ethcore_util::bytes","Slie pretty print helper",null,null],[4,"BytesRef","","A byte collection reference that can either be a slice or a vector",null,null],[13,"Flexible","","This is a reference to a vector",620,null],[13,"Fixed","","This is a reference to a slice",620,null],[4,"FromBytesError","","Bytes array deserialization error",null,null],[13,"NotLongEnough","","Not enough bytes for the requested type",621,null],[13,"TooLong","","Too many bytes for the requested type",621,null],[6,"Bytes","","Vector of bytes",null,null],[8,"VecLike","","Vector like object",null,null],[10,"vec_push","","Add an element to the collection",622,{"inputs":[{"name":"veclike"},{"name":"t"}],"output":null}],[10,"vec_extend","","Add a slice to the collection",622,null],[8,"ToPretty","","Trait to allow a type to be pretty-printed in `format!`, where unoverridable\ndefaults cannot otherwise be avoided.",null,null],[10,"pretty","","Convert a type into a derivative form in order to make `format!` print it prettily.",623,{"inputs":[{"name":"topretty"}],"output":{"name":"prettyslice"}}],[11,"to_hex","","Express the object as a hex string.",623,{"inputs":[{"name":"topretty"}],"output":{"name":"string"}}],[8,"BytesConvertable","","Slice of bytes to underlying memory",null,null],[10,"bytes","","Get the underlying byte-wise representation of the value.\nDeprecated - use `as_slice` instead.",624,null],[11,"as_slice","","Get the underlying byte-wise representation of the value.",624,null],[11,"to_bytes","","Get a copy of the underlying byte-wise representation.",624,{"inputs":[{"name":"bytesconvertable"}],"output":{"name":"bytes"}}],[8,"Populatable","","Simple trait to allow for raw population of a Sized object from a byte slice.",null,null],[11,"populate_raw","","Copies a bunch of bytes `d` to `self`, overwriting as necessary.",625,null],[11,"copy_raw","","Copies a bunch of bytes `d` to `self`, overwriting as necessary.",625,null],[11,"populate_raw_from","","Copies the raw representation of an object `d` to `self`, overwriting as necessary.",625,{"inputs":[{"name":"populatable"},{"name":"bytesconvertable"}],"output":null}],[11,"copy_raw_from","","Copies the raw representation of an object `d` to `self`, overwriting as necessary.",625,{"inputs":[{"name":"populatable"},{"name":"bytesconvertable"}],"output":null}],[10,"as_slice_mut","","Get the raw slice for this object.",625,null],[8,"FromRawBytes","","Value that can be serialized from bytes array",null,null],[10,"from_bytes","","function that will instantiate and initialize object from slice",626,null],[11,"vec_push","collections::vec","",63,{"inputs":[{"name":"vec"},{"name":"t"}],"output":null}],[11,"vec_extend","","",63,null],[11,"vec_push","elastic_array","",627,{"inputs":[{"name":"elasticarray16"},{"name":"t"}],"output":null}],[11,"vec_extend","","",627,null],[11,"vec_push","","",628,{"inputs":[{"name":"elasticarray32"},{"name":"t"}],"output":null}],[11,"vec_extend","","",628,null],[11,"vec_push","","",629,{"inputs":[{"name":"elasticarray1024"},{"name":"t"}],"output":null}],[11,"vec_extend","","",629,null],[11,"fmt","ethcore_util::bytes","",630,{"inputs":[{"name":"prettyslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",630,{"inputs":[{"name":"prettyslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pretty","","",631,{"inputs":[{"name":"bytes"}],"output":{"name":"prettyslice"}}],[11,"deref","","",620,null],[11,"deref_mut","","",620,null],[11,"fmt","","",621,{"inputs":[{"name":"frombyteserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_bytes","collections::string","",89,null],[11,"from_bytes","collections::vec","",63,null],[0,"rlp","ethcore_util","Rlp serialization module",null,null],[11,"new","elastic_array","",629,{"inputs":[{"name":"elasticarray1024"}],"output":{"name":"elasticarray1024"}}],[11,"push","","",629,null],[11,"pop","","",629,{"inputs":[{"name":"elasticarray1024"}],"output":{"name":"option"}}],[11,"clear","","",629,null],[11,"append_slice","","",629,null],[11,"to_vec","","",629,{"inputs":[{"name":"elasticarray1024"}],"output":{"name":"vec"}}],[11,"insert_slice","","",629,null],[11,"new","","",632,{"inputs":[{"name":"elasticarray2"}],"output":{"name":"elasticarray2"}}],[11,"push","","",632,null],[11,"pop","","",632,{"inputs":[{"name":"elasticarray2"}],"output":{"name":"option"}}],[11,"clear","","",632,null],[11,"append_slice","","",632,null],[11,"to_vec","","",632,{"inputs":[{"name":"elasticarray2"}],"output":{"name":"vec"}}],[11,"insert_slice","","",632,null],[11,"deref","","",632,null],[11,"deref_mut","","",632,null],[11,"new","","",633,{"inputs":[{"name":"elasticarray4"}],"output":{"name":"elasticarray4"}}],[11,"push","","",633,null],[11,"pop","","",633,{"inputs":[{"name":"elasticarray4"}],"output":{"name":"option"}}],[11,"clear","","",633,null],[11,"append_slice","","",633,null],[11,"to_vec","","",633,{"inputs":[{"name":"elasticarray4"}],"output":{"name":"vec"}}],[11,"insert_slice","","",633,null],[11,"deref","","",633,null],[11,"deref_mut","","",633,null],[11,"new","","",634,{"inputs":[{"name":"elasticarray8"}],"output":{"name":"elasticarray8"}}],[11,"push","","",634,null],[11,"pop","","",634,{"inputs":[{"name":"elasticarray8"}],"output":{"name":"option"}}],[11,"clear","","",634,null],[11,"append_slice","","",634,null],[11,"to_vec","","",634,{"inputs":[{"name":"elasticarray8"}],"output":{"name":"vec"}}],[11,"insert_slice","","",634,null],[11,"deref","","",634,null],[11,"deref_mut","","",634,null],[11,"new","","",627,{"inputs":[{"name":"elasticarray16"}],"output":{"name":"elasticarray16"}}],[11,"push","","",627,null],[11,"pop","","",627,{"inputs":[{"name":"elasticarray16"}],"output":{"name":"option"}}],[11,"clear","","",627,null],[11,"append_slice","","",627,null],[11,"to_vec","","",627,{"inputs":[{"name":"elasticarray16"}],"output":{"name":"vec"}}],[11,"insert_slice","","",627,null],[11,"deref","","",627,null],[11,"deref_mut","","",627,null],[11,"new","","",628,{"inputs":[{"name":"elasticarray32"}],"output":{"name":"elasticarray32"}}],[11,"push","","",628,null],[11,"pop","","",628,{"inputs":[{"name":"elasticarray32"}],"output":{"name":"option"}}],[11,"clear","","",628,null],[11,"append_slice","","",628,null],[11,"to_vec","","",628,{"inputs":[{"name":"elasticarray32"}],"output":{"name":"vec"}}],[11,"insert_slice","","",628,null],[11,"deref","","",628,null],[11,"deref_mut","","",628,null],[11,"new","","",635,{"inputs":[{"name":"elasticarray64"}],"output":{"name":"elasticarray64"}}],[11,"push","","",635,null],[11,"pop","","",635,{"inputs":[{"name":"elasticarray64"}],"output":{"name":"option"}}],[11,"clear","","",635,null],[11,"append_slice","","",635,null],[11,"to_vec","","",635,{"inputs":[{"name":"elasticarray64"}],"output":{"name":"vec"}}],[11,"insert_slice","","",635,null],[11,"deref","","",635,null],[11,"deref_mut","","",635,null],[11,"new","","",636,{"inputs":[{"name":"elasticarray128"}],"output":{"name":"elasticarray128"}}],[11,"push","","",636,null],[11,"pop","","",636,{"inputs":[{"name":"elasticarray128"}],"output":{"name":"option"}}],[11,"clear","","",636,null],[11,"append_slice","","",636,null],[11,"to_vec","","",636,{"inputs":[{"name":"elasticarray128"}],"output":{"name":"vec"}}],[11,"insert_slice","","",636,null],[11,"deref","","",636,null],[11,"deref_mut","","",636,null],[11,"new","","",637,{"inputs":[{"name":"elasticarray256"}],"output":{"name":"elasticarray256"}}],[11,"push","","",637,null],[11,"pop","","",637,{"inputs":[{"name":"elasticarray256"}],"output":{"name":"option"}}],[11,"clear","","",637,null],[11,"append_slice","","",637,null],[11,"to_vec","","",637,{"inputs":[{"name":"elasticarray256"}],"output":{"name":"vec"}}],[11,"insert_slice","","",637,null],[11,"deref","","",637,null],[11,"deref_mut","","",637,null],[11,"new","","",638,{"inputs":[{"name":"elasticarray512"}],"output":{"name":"elasticarray512"}}],[11,"push","","",638,null],[11,"pop","","",638,{"inputs":[{"name":"elasticarray512"}],"output":{"name":"option"}}],[11,"clear","","",638,null],[11,"append_slice","","",638,null],[11,"to_vec","","",638,{"inputs":[{"name":"elasticarray512"}],"output":{"name":"vec"}}],[11,"insert_slice","","",638,null],[11,"deref","","",638,null],[11,"deref_mut","","",638,null],[11,"deref","","",629,null],[11,"deref_mut","","",629,null],[11,"new","","",639,{"inputs":[{"name":"elasticarray2048"}],"output":{"name":"elasticarray2048"}}],[11,"push","","",639,null],[11,"pop","","",639,{"inputs":[{"name":"elasticarray2048"}],"output":{"name":"option"}}],[11,"clear","","",639,null],[11,"append_slice","","",639,null],[11,"to_vec","","",639,{"inputs":[{"name":"elasticarray2048"}],"output":{"name":"vec"}}],[11,"insert_slice","","",639,null],[11,"deref","","",639,null],[11,"deref_mut","","",639,null],[3,"ElasticArray1024","ethcore_util::rlp","",null,null],[3,"UntrustedRlp","","Data-oriented view onto rlp-slice.",null,null],[3,"UntrustedRlpIterator","","Iterator over rlp-slice list elements.",null,null],[3,"PayloadInfo","","Stores basic information about item",null,null],[12,"header_len","","Header length in bytes",640,null],[12,"value_len","","Value length in bytes",640,null],[3,"Rlp","","Data-oriented view onto trusted rlp-slice.",null,null],[3,"RlpIterator","","Iterator over trusted rlp-slice list elements.",null,null],[3,"RlpStream","","Appendable rlp encoder.",null,null],[4,"DecoderError","","Error concerning the RLP decoder.",null,null],[13,"FromBytesError","","Couldn't convert given bytes to an instance of required type.",641,null],[13,"RlpIsTooBig","","Data has additional bytes at the end of the valid RLP fragment.",641,null],[13,"RlpIsTooShort","","Data has too few bytes for valid RLP.",641,null],[13,"RlpExpectedToBeList","","Expect an encoded list, RLP was something else.",641,null],[13,"RlpExpectedToBeData","","Expect encoded data, RLP was something else.",641,null],[13,"RlpIncorrectListLen","","Expected a different size list.",641,null],[13,"RlpDataLenWithZeroPrefix","","Data length number has a prefixed zero byte, invalid for numbers.",641,null],[13,"RlpListLenWithZeroPrefix","","List length number has a prefixed zero byte, invalid for numbers.",641,null],[13,"RlpInvalidIndirection","","Non-canonical (longer than necessary) representation used for data or list.",641,null],[13,"RlpInconsistentLengthAndData","","Declared length is inconsistent with data specified after.",641,null],[4,"Prototype","","RLP prototype",null,null],[13,"Null","","Empty",642,null],[13,"Data","","Value",642,null],[13,"List","","List",642,null],[5,"decode","","Shortcut function to decode trusted rlp",null,null],[5,"encode","","Shortcut function to encode structure into rlp.",null,{"inputs":[{"name":"e"}],"output":{"name":"elasticarray1024"}}],[0,"rlptraits","","Common RLP traits",null,null],[8,"Decoder","ethcore_util::rlp::rlptraits","Type is able to decode RLP.",null,null],[10,"read_value","","Read a value from the RLP into a given type.",643,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"as_rlp","","Get underlying `UntrustedRLP` object.",643,{"inputs":[{"name":"decoder"}],"output":{"name":"untrustedrlp"}}],[10,"as_raw","","Get underlying raw bytes slice.",643,null],[8,"Decodable","","RLP decodable trait",null,null],[10,"decode","","Decode a value from RLP bytes",644,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"RlpDecodable","","Internal helper trait. Implement `Decodable` for custom types.",null,null],[10,"decode","","Decode a value from RLP bytes",645,{"inputs":[{"name":"rlpdecodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"View","","A view into RLP encoded data",null,null],[16,"Prototype","","RLP prototype type",646,null],[16,"PayloadInfo","","Payload info type",646,null],[16,"Data","","Data type",646,null],[16,"Item","","Item type",646,null],[16,"Iter","","Iterator type",646,null],[10,"new","","Creates a new instance of `Rlp` reader",646,null],[10,"as_raw","","The raw data of the RLP.",646,null],[10,"prototype","","Get the prototype of the RLP.",646,{"inputs":[{"name":"view"}],"output":{"name":"prototype"}}],[10,"payload_info","","Get payload info.",646,{"inputs":[{"name":"view"}],"output":{"name":"payloadinfo"}}],[10,"data","","Get underlieing data.",646,{"inputs":[{"name":"view"}],"output":{"name":"data"}}],[10,"item_count","","Returns number of RLP items.",646,{"inputs":[{"name":"view"}],"output":{"name":"usize"}}],[10,"size","","Returns the number of bytes in the data, or zero if it isn't data.",646,{"inputs":[{"name":"view"}],"output":{"name":"usize"}}],[10,"at","","Get view onto RLP-slice at index.",646,{"inputs":[{"name":"view"},{"name":"usize"}],"output":{"name":"item"}}],[10,"is_null","","No value",646,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"is_empty","","Contains a zero-length string or zero-length list.",646,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"is_list","","List value",646,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"is_data","","String value",646,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"is_int","","Int value",646,{"inputs":[{"name":"view"}],"output":{"name":"bool"}}],[10,"iter","","Get iterator over rlp-slices",646,{"inputs":[{"name":"view"}],"output":{"name":"iter"}}],[10,"as_val","","Decode data into an object",646,{"inputs":[{"name":"view"}],"output":{"name":"result"}}],[10,"val_at","","Decode data at given list index into an object",646,{"inputs":[{"name":"view"},{"name":"usize"}],"output":{"name":"result"}}],[8,"Encoder","","Raw RLP encoder",null,null],[10,"emit_value","","Write a value represented as bytes",647,{"inputs":[{"name":"encoder"},{"name":"e"}],"output":null}],[10,"emit_raw","","Write raw preencoded data to the output",647,null],[8,"ByteEncodable","","Primitive data type encodable to RLP",null,null],[10,"to_bytes","","Serialize this object to given byte container",648,{"inputs":[{"name":"byteencodable"},{"name":"v"}],"output":null}],[10,"bytes_len","","Get size of serialised data in bytes",648,{"inputs":[{"name":"byteencodable"}],"output":{"name":"usize"}}],[8,"Encodable","","Structure encodable to RLP. Implement this trait for",null,null],[10,"rlp_append","","Append a value to the stream",649,{"inputs":[{"name":"encodable"},{"name":"rlpstream"}],"output":null}],[11,"rlp_bytes","","Get rlp-encoded bytes for this instance",649,{"inputs":[{"name":"encodable"}],"output":{"name":"elasticarray1024"}}],[11,"rlp_sha3","","Get the hash or RLP encoded representation",649,{"inputs":[{"name":"encodable"}],"output":{"name":"h256"}}],[8,"RlpEncodable","","Encodable wrapper trait required to handle special case of encoding a &[u8] as string and not as list",null,null],[10,"rlp_append","","Append a value to the stream",650,{"inputs":[{"name":"rlpencodable"},{"name":"rlpstream"}],"output":null}],[8,"Stream","","RLP encoding stream",null,null],[10,"new","","Initializes instance of empty `Stream`.",651,{"inputs":[{"name":"stream"}],"output":{"name":"self"}}],[10,"new_list","","Initializes the `Stream` as a list.",651,{"inputs":[{"name":"stream"},{"name":"usize"}],"output":{"name":"self"}}],[10,"append","","Apends value to the end of stream, chainable.",651,{"inputs":[{"name":"stream"},{"name":"e"}],"output":{"name":"self"}}],[10,"begin_list","","Declare appending the list of given size, chainable.",651,{"inputs":[{"name":"stream"},{"name":"usize"}],"output":{"name":"self"}}],[10,"append_empty_data","","Apends null to the end of stream, chainable.",651,{"inputs":[{"name":"stream"}],"output":{"name":"self"}}],[10,"append_raw","","Appends raw (pre-serialised) RLP data. Use with caution. Chainable.",651,null],[10,"clear","","Clear the output stream so far.",651,{"inputs":[{"name":"stream"}],"output":null}],[10,"is_finished","","Returns true if stream doesnt expect any more items.",651,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[10,"as_raw","","Get raw encoded bytes",651,null],[10,"out","","Streams out encoded bytes.",651,{"inputs":[{"name":"stream"}],"output":{"name":"vec"}}],[11,"eq","ethcore_util::rlp","",641,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",641,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",641,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",641,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"fmt","","",641,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",641,{"inputs":[{"name":"decodererror"},{"name":"frombyteserror"}],"output":{"name":"decodererror"}}],[11,"from","","",652,{"inputs":[{"name":"rlp"},{"name":"untrustedrlp"}],"output":{"name":"rlp"}}],[11,"fmt","","",652,{"inputs":[{"name":"rlp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",652,{"inputs":[{"name":"rlp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance of `Rlp`",652,null],[11,"as_raw","","",652,null],[11,"prototype","","",652,{"inputs":[{"name":"rlp"}],"output":{"name":"prototype"}}],[11,"payload_info","","",652,{"inputs":[{"name":"rlp"}],"output":{"name":"payloadinfo"}}],[11,"data","","",652,{"inputs":[{"name":"rlp"}],"output":{"name":"data"}}],[11,"item_count","","",652,{"inputs":[{"name":"rlp"}],"output":{"name":"usize"}}],[11,"size","","",652,{"inputs":[{"name":"rlp"}],"output":{"name":"usize"}}],[11,"at","","",652,{"inputs":[{"name":"rlp"},{"name":"usize"}],"output":{"name":"item"}}],[11,"is_null","","",652,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"is_empty","","",652,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"is_list","","",652,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"is_data","","",652,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"is_int","","",652,{"inputs":[{"name":"rlp"}],"output":{"name":"bool"}}],[11,"iter","","",652,{"inputs":[{"name":"rlp"}],"output":{"name":"iter"}}],[11,"as_val","","",652,{"inputs":[{"name":"rlp"}],"output":{"name":"result"}}],[11,"val_at","","",652,{"inputs":[{"name":"rlp"},{"name":"usize"}],"output":{"name":"result"}}],[11,"as_val","","Decode into an object",652,{"inputs":[{"name":"rlp"}],"output":{"name":"t"}}],[11,"val_at","","Decode list item at given index into an object",652,{"inputs":[{"name":"rlp"},{"name":"usize"}],"output":{"name":"t"}}],[11,"next","","",653,{"inputs":[{"name":"rlpiterator"}],"output":{"name":"option"}}],[11,"fmt","","",642,{"inputs":[{"name":"prototype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"total","","Total size of the RLP.",640,{"inputs":[{"name":"payloadinfo"}],"output":{"name":"usize"}}],[11,"fmt","","",654,{"inputs":[{"name":"untrustedrlp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",654,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"untrustedrlp"}}],[11,"fmt","","",654,{"inputs":[{"name":"untrustedrlp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",654,null],[11,"as_raw","","",654,null],[11,"prototype","","",654,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"prototype"}}],[11,"payload_info","","",654,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"payloadinfo"}}],[11,"data","","",654,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"data"}}],[11,"item_count","","",654,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"usize"}}],[11,"size","","",654,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"usize"}}],[11,"at","","",654,{"inputs":[{"name":"untrustedrlp"},{"name":"usize"}],"output":{"name":"item"}}],[11,"is_null","","",654,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"is_empty","","",654,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"is_list","","",654,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"is_data","","",654,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"is_int","","",654,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"bool"}}],[11,"iter","","",654,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"iter"}}],[11,"as_val","","",654,{"inputs":[{"name":"untrustedrlp"}],"output":{"name":"result"}}],[11,"val_at","","",654,{"inputs":[{"name":"untrustedrlp"},{"name":"usize"}],"output":{"name":"result"}}],[11,"next","","",655,{"inputs":[{"name":"untrustedrlpiterator"}],"output":{"name":"option"}}],[11,"decode","collections::vec","",63,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","ethcore_util::standard::option","",383,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","ethcore_util::rlp","",656,{"inputs":[{"name":"rlpstream"}],"output":{"name":"self"}}],[11,"new_list","","",656,{"inputs":[{"name":"rlpstream"},{"name":"usize"}],"output":{"name":"self"}}],[11,"append","","",656,{"inputs":[{"name":"rlpstream"},{"name":"e"}],"output":{"name":"self"}}],[11,"begin_list","","",656,{"inputs":[{"name":"rlpstream"},{"name":"usize"}],"output":{"name":"rlpstream"}}],[11,"append_empty_data","","",656,{"inputs":[{"name":"rlpstream"}],"output":{"name":"rlpstream"}}],[11,"append_raw","","",656,null],[11,"clear","","",656,{"inputs":[{"name":"rlpstream"}],"output":null}],[11,"is_finished","","",656,{"inputs":[{"name":"rlpstream"}],"output":{"name":"bool"}}],[11,"as_raw","","",656,null],[11,"out","","",656,{"inputs":[{"name":"rlpstream"}],"output":{"name":"vec"}}],[11,"drain","","Drain the object and return the underlying ElasticArray.",656,{"inputs":[{"name":"rlpstream"}],"output":{"name":"elasticarray1024"}}],[11,"rlp_append","collections::vec","",63,{"inputs":[{"name":"vec"},{"name":"rlpstream"}],"output":null}],[11,"rlp_append","","",63,{"inputs":[{"name":"vec"},{"name":"rlpstream"}],"output":null}],[17,"NULL_RLP","ethcore_util::rlp","The RLP encoded empty data (used to mean \"null value\").",null,null],[17,"EMPTY_LIST_RLP","","The RLP encoded empty list.",null,null],[17,"SHA3_NULL_RLP","","The SHA3 of the RLP encoding of empty data.",null,null],[17,"SHA3_EMPTY_LIST_RLP","","The SHA3 of the RLP encoding of empty list.",null,null],[0,"misc","ethcore_util","Diff misc.",null,null],[4,"Diff","ethcore_util::misc","Diff type for specifying a change (or not).",null,null],[13,"Same","","Both sides are the same.",657,null],[13,"Born","","Left (pre, source) side doesn't include value, right side (post, destination) does.",657,null],[13,"Changed","","Both sides include data; it chaged value between them.",657,null],[13,"Died","","Left (pre, source) side does include value, right side (post, destination) does not.",657,null],[4,"Filth","","Boolean type for clean/dirty status.",null,null],[13,"Clean","","Data has not been changed.",658,null],[13,"Dirty","","Data has been changed.",658,null],[5,"now","","Generate a timestamp representing now (UTC) in RFC3339 format.",null,{"inputs":[],"output":{"name":"str"}}],[5,"short_now","","Generate a timstamp string representing now (UTC).",null,{"inputs":[],"output":{"name":"str"}}],[5,"sha","","Generate a SHA string",null,{"inputs":[],"output":{"name":"str"}}],[5,"short_sha","","Generate a short SHA string",null,{"inputs":[],"output":{"name":"str"}}],[5,"commit_date","","Generate the commit date string",null,{"inputs":[],"output":{"name":"str"}}],[5,"target","","Generate the target triple string",null,{"inputs":[],"output":{"name":"str"}}],[5,"semver","","Generate a semver string",null,{"inputs":[],"output":{"name":"str"}}],[5,"contents","","Read the whole contents of a file `name`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"version","","Get the standard version string for this software.",null,{"inputs":[],"output":{"name":"string"}}],[11,"eq","","",657,{"inputs":[{"name":"diff"},{"name":"diff"}],"output":{"name":"bool"}}],[11,"ne","","",657,{"inputs":[{"name":"diff"},{"name":"diff"}],"output":{"name":"bool"}}],[11,"clone","","",657,{"inputs":[{"name":"diff"}],"output":{"name":"diff"}}],[11,"fmt","","",657,{"inputs":[{"name":"diff"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct new object with given `pre` and `post`.",657,{"inputs":[{"name":"diff"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"pre","","Get the before value, if there is one.",657,{"inputs":[{"name":"diff"}],"output":{"name":"option"}}],[11,"post","","Get the after value, if there is one.",657,{"inputs":[{"name":"diff"}],"output":{"name":"option"}}],[11,"is_same","","Determine whether there was a change or not.",657,{"inputs":[{"name":"diff"}],"output":{"name":"bool"}}],[11,"clone","","",658,{"inputs":[{"name":"filth"}],"output":{"name":"filth"}}],[11,"eq","","",658,{"inputs":[{"name":"filth"},{"name":"filth"}],"output":{"name":"bool"}}],[11,"ne","","",658,{"inputs":[{"name":"filth"},{"name":"filth"}],"output":{"name":"bool"}}],[11,"from_json","ethcore_util::json_aid","",631,{"inputs":[{"name":"bytes"},{"name":"json"}],"output":{"name":"self"}}],[11,"from_json","collections::btree::map","",421,{"inputs":[{"name":"btreemap"},{"name":"json"}],"output":{"name":"self"}}],[11,"from_json","collections::vec","",63,{"inputs":[{"name":"vec"},{"name":"json"}],"output":{"name":"self"}}],[11,"from_json","ethcore_util::standard::option","",383,{"inputs":[{"name":"option"},{"name":"json"}],"output":{"name":"self"}}],[0,"vector","ethcore_util","Vector extensions.",null,null],[8,"SharedPrefix","ethcore_util::vector","Returns len of prefix shared with elem",null,null],[10,"shared_prefix_len","","Get common prefix length",659,null],[11,"shared_prefix_len","collections::vec","",63,null],[0,"sha3","ethcore_util","Wrapper around tiny-keccak crate.",null,null],[17,"SHA3_EMPTY","ethcore_util::sha3","Get the SHA3 (i.e. Keccak) hash of the empty bytes string.",null,null],[8,"Hashable","","Types implementing this trait are sha3able.",null,null],[10,"sha3","","Calculate SHA3 of this object.",660,{"inputs":[{"name":"hashable"}],"output":{"name":"h256"}}],[11,"sha3_into","","Calculate SHA3 of this object and place result into dest.",660,null],[0,"hashdb","ethcore_util","Database of byte-slices keyed to their Keccak hash.",null,null],[8,"HashDB","ethcore_util::hashdb","Trait modelling datastore keyed by a 32-byte Keccak hash.",null,null],[10,"keys","","Get the keys in the database together with number of underlying references.",661,{"inputs":[{"name":"hashdb"}],"output":{"name":"hashmap"}}],[10,"lookup","","Deprecated. use `get`.",661,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"get","","Look up a given hash into the bytes that hash to it, returning None if the\nhash is not known.",661,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"option"}}],[10,"exists","","Deprecated. Use `contains`.",661,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"contains","","Check for the existance of a hash-key.",661,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":{"name":"bool"}}],[10,"insert","","Insert a datum item into the DB and return the datum's hash for a later lookup. Insertions\nare counted and the equivalent number of `kill()`s must be performed before the data\nis considered dead.",661,null],[10,"emplace","","Like `insert()` , except you provide the key and the data is all moved.",661,{"inputs":[{"name":"hashdb"},{"name":"h256"},{"name":"bytes"}],"output":null}],[10,"kill","","Deprecated - use `remove`.",661,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":null}],[11,"remove","","Remove a datum previously inserted. Insertions can be \"owed\" such that the same number of `insert()`s may\nhappen without the data being eventually being inserted into the DB.",661,{"inputs":[{"name":"hashdb"},{"name":"h256"}],"output":null}],[0,"memorydb","ethcore_util","Reference-counted memory-based HashDB implementation.",null,null],[3,"MemoryDB","ethcore_util::memorydb","Reference-counted memory-based HashDB implementation.",null,null],[11,"clone","","",662,{"inputs":[{"name":"memorydb"}],"output":{"name":"memorydb"}}],[11,"fmt","","",662,{"inputs":[{"name":"memorydb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance of the memory DB.",662,{"inputs":[{"name":"memorydb"}],"output":{"name":"memorydb"}}],[11,"clear","","Clear all data from the database.",662,{"inputs":[{"name":"memorydb"}],"output":null}],[11,"purge","","Purge all zero-referenced data from the database.",662,{"inputs":[{"name":"memorydb"}],"output":null}],[11,"raw","","Grab the raw information associated with a key. Returns None if the key\ndoesn't exist.",662,{"inputs":[{"name":"memorydb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"drain","","Return the internal map of hashes to data, clearing the current state.",662,{"inputs":[{"name":"memorydb"}],"output":{"name":"hashmap"}}],[11,"denote","","Denote than an existing value has the given key. Used when a key gets removed without\na prior insert and thus has a negative reference with no value.",662,null],[11,"lookup","","",662,{"inputs":[{"name":"memorydb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"keys","","",662,{"inputs":[{"name":"memorydb"}],"output":{"name":"hashmap"}}],[11,"exists","","",662,{"inputs":[{"name":"memorydb"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"insert","","",662,null],[11,"emplace","","",662,{"inputs":[{"name":"memorydb"},{"name":"h256"},{"name":"bytes"}],"output":null}],[11,"kill","","",662,{"inputs":[{"name":"memorydb"},{"name":"h256"}],"output":null}],[0,"overlaydb","ethcore_util","Disk-backed HashDB implementation.",null,null],[3,"OverlayDB","ethcore_util::overlaydb","Implementation of the HashDB trait for a disk-backed database with a memory overlay.",null,null],[11,"new","","Create a new instance of OverlayDB given a `backing` database.",663,{"inputs":[{"name":"overlaydb"},{"name":"db"}],"output":{"name":"overlaydb"}}],[11,"new_with_arc","","Create a new instance of OverlayDB given a `backing` database.",663,{"inputs":[{"name":"overlaydb"},{"name":"arc"}],"output":{"name":"overlaydb"}}],[11,"new_temp","","Create a new instance of OverlayDB with an anonymous temporary database.",663,{"inputs":[{"name":"overlaydb"}],"output":{"name":"overlaydb"}}],[11,"commit","","Commit all memory operations to the backing database.",663,{"inputs":[{"name":"overlaydb"}],"output":{"name":"result"}}],[11,"revert","","Revert all operations on this object (i.e. `insert()`s and `kill()`s) since the\nlast `commit()`.",663,{"inputs":[{"name":"overlaydb"}],"output":null}],[11,"keys","","",663,{"inputs":[{"name":"overlaydb"}],"output":{"name":"hashmap"}}],[11,"lookup","","",663,{"inputs":[{"name":"overlaydb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"exists","","",663,{"inputs":[{"name":"overlaydb"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"insert","","",663,null],[11,"emplace","","",663,{"inputs":[{"name":"overlaydb"},{"name":"h256"},{"name":"bytes"}],"output":null}],[11,"kill","","",663,{"inputs":[{"name":"overlaydb"},{"name":"h256"}],"output":null}],[0,"journaldb","ethcore_util","Disk-backed HashDB implementation.",null,null],[3,"JournalDB","ethcore_util::journaldb","Implementation of the HashDB trait for a disk-backed database with a memory overlay\nand latent-removal semantics.",null,null],[11,"clone","","",664,{"inputs":[{"name":"journaldb"}],"output":{"name":"journaldb"}}],[11,"new","","Create a new instance given a `backing` database.",664,{"inputs":[{"name":"journaldb"},{"name":"db"}],"output":{"name":"journaldb"}}],[11,"new_with_arc","","Create a new instance given a shared `backing` database.",664,{"inputs":[{"name":"journaldb"},{"name":"arc"}],"output":{"name":"journaldb"}}],[11,"is_empty","","Check if this database has any commits",664,{"inputs":[{"name":"journaldb"}],"output":{"name":"bool"}}],[11,"commit","","Commit all recent insert operations and historical removals from the old era\nto the backing database.",664,{"inputs":[{"name":"journaldb"},{"name":"u64"},{"name":"h256"},{"name":"option"}],"output":{"name":"result"}}],[11,"keys","","",664,{"inputs":[{"name":"journaldb"}],"output":{"name":"hashmap"}}],[11,"lookup","","",664,{"inputs":[{"name":"journaldb"},{"name":"h256"}],"output":{"name":"option"}}],[11,"exists","","",664,{"inputs":[{"name":"journaldb"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"insert","","",664,null],[11,"emplace","","",664,{"inputs":[{"name":"journaldb"},{"name":"h256"},{"name":"bytes"}],"output":null}],[11,"kill","","",664,{"inputs":[{"name":"journaldb"},{"name":"h256"}],"output":null}],[0,"chainfilter","ethcore_util","Multilevel blockchain bloom filter.",null,null],[3,"BloomIndex","ethcore_util::chainfilter","Represents bloom index in cache",null,null],[12,"level","","Bloom level",665,null],[12,"index","","Filter Index",665,null],[3,"MemoryCache","","In memory cache for blooms.",null,null],[3,"ChainFilter","","Should be used for search operations on blockchain.",null,null],[8,"FilterDataSource","","Types implementing this trait should provide read access for bloom filters database.",null,null],[10,"bloom_at_index","","returns reference to log at given position if it exists",666,{"inputs":[{"name":"filterdatasource"},{"name":"bloomindex"}],"output":{"name":"option"}}],[11,"fmt","","",665,{"inputs":[{"name":"bloomindex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",665,{"inputs":[{"name":"bloomindex"}],"output":{"name":"bloomindex"}}],[11,"hash","","",665,null],[11,"eq","","",665,{"inputs":[{"name":"bloomindex"},{"name":"bloomindex"}],"output":{"name":"bool"}}],[11,"ne","","",665,{"inputs":[{"name":"bloomindex"},{"name":"bloomindex"}],"output":{"name":"bool"}}],[11,"new","","Default constructor for `BloomIndex`",665,{"inputs":[{"name":"bloomindex"},{"name":"u8"},{"name":"usize"}],"output":{"name":"bloomindex"}}],[11,"new","","Default constructor for MemoryCache",667,{"inputs":[{"name":"memorycache"}],"output":{"name":"memorycache"}}],[11,"insert_blooms","","inserts all blooms into cache",667,{"inputs":[{"name":"memorycache"},{"name":"hashmap"}],"output":null}],[11,"bloom_at_index","","",667,{"inputs":[{"name":"memorycache"},{"name":"bloomindex"}],"output":{"name":"option"}}],[11,"new","","Creates new filter instance.",668,{"inputs":[{"name":"chainfilter"},{"name":"d"},{"name":"usize"},{"name":"u8"}],"output":{"name":"self"}}],[11,"add_bloom","","Adds new bloom to all filter levels",668,{"inputs":[{"name":"chainfilter"},{"name":"h2048"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"add_blooms","","Adds new blooms starting from block number.",668,null],[11,"reset_bloom","","Resets bloom at level 0 and forces rebuild on higher levels.",668,{"inputs":[{"name":"chainfilter"},{"name":"h2048"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"clear_bloom","","Sets lowest level bloom to 0 and forces rebuild on higher levels.",668,{"inputs":[{"name":"chainfilter"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"blocks_with_address","","Returns numbers of blocks that may contain Address.",668,{"inputs":[{"name":"chainfilter"},{"name":"address"},{"name":"usize"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"blocks_with_topic","","Returns numbers of blocks that may contain Topic.",668,{"inputs":[{"name":"chainfilter"},{"name":"h256"},{"name":"usize"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"blocks_with_bloom","","Returns numbers of blocks that may log bloom.",668,{"inputs":[{"name":"chainfilter"},{"name":"h2048"},{"name":"usize"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"crypto","ethcore_util","Ethcore crypto.",null,null],[3,"KeyPair","ethcore_util::crypto","secp256k1 Key pair",null,null],[4,"CryptoError","","Crypto error",null,null],[13,"InvalidSecret","","Invalid secret key",669,null],[13,"InvalidPublic","","Invalid public key",669,null],[13,"InvalidSignature","","Invalid EC signature",669,null],[13,"InvalidMessage","","Invalid AES message",669,null],[13,"Io","","IO Error",669,null],[0,"ec","","EC functions",null,null],[5,"recover","ethcore_util::crypto::ec","Recovers Public key from signed message hash.",null,{"inputs":[{"name":"signature"},{"name":"h256"}],"output":{"name":"result"}}],[5,"sign","","Returns siganture of message hash.",null,{"inputs":[{"name":"secret"},{"name":"h256"}],"output":{"name":"result"}}],[5,"verify","","Verify signature.",null,{"inputs":[{"name":"public"},{"name":"signature"},{"name":"h256"}],"output":{"name":"result"}}],[5,"is_low","","Check if this is a \"low\" signature.",null,{"inputs":[{"name":"signature"}],"output":{"name":"bool"}}],[5,"is_low_s","","Check if this is a \"low\" signature.",null,{"inputs":[{"name":"u256"}],"output":{"name":"bool"}}],[5,"is_valid","","Check if each component of the signature is in range.",null,{"inputs":[{"name":"signature"}],"output":{"name":"bool"}}],[0,"ecdh","ethcore_util::crypto","ECDH functions",null,null],[5,"agree","ethcore_util::crypto::ecdh","Agree on a shared secret",null,{"inputs":[{"name":"secret"},{"name":"public"}],"output":{"name":"result"}}],[0,"ecies","ethcore_util::crypto","ECIES function",null,null],[5,"encrypt","ethcore_util::crypto::ecies","Encrypt a message with a public key",null,null],[5,"decrypt","","Decrypt a message with a secret key",null,null],[0,"aes","ethcore_util::crypto","AES encryption",null,null],[5,"encrypt","ethcore_util::crypto::aes","Encrypt a message",null,null],[5,"decrypt","","Decrypt a message",null,null],[6,"Secret","ethcore_util::crypto","Secret key for secp256k1 EC operations. 256 bit generic \"hash\" data.",null,null],[6,"Public","","Public key for secp256k1 EC operations. 512 bit generic \"hash\" data.",null,null],[6,"Signature","","Signature for secp256k1 EC operations; encodes two 256-bit curve points\nand a third sign bit. 520 bit generic \"hash\" data.",null,null],[11,"sign_schnorr","secp256k1","Create a Schnorr signature",670,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"verify_schnorr","","Verify a Schnorr signature",670,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"signature"},{"name":"publickey"}],"output":{"name":"result"}}],[11,"recover_schnorr","","Retrieves the public key for which `sig` is a valid signature for `msg`.\nRequires a verify-capable context.",670,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"signature"}],"output":{"name":"result"}}],[11,"new","","Creates a new Secp256k1 context",670,{"inputs":[{"name":"secp256k1"}],"output":{"name":"secp256k1"}}],[11,"with_caps","","Creates a new Secp256k1 context with the specified capabilities",670,{"inputs":[{"name":"secp256k1"},{"name":"contextflag"}],"output":{"name":"secp256k1"}}],[11,"without_caps","","Creates a new Secp256k1 context with no capabilities (just de/serialization)",670,{"inputs":[{"name":"secp256k1"}],"output":{"name":"secp256k1"}}],[11,"randomize","","(Re)randomizes the Secp256k1 context for cheap sidechannel resistence;\nsee comment in libsecp256k1 commit d2275795f by Gregory Maxwell",670,null],[11,"generate_keypair","","Generates a random keypair. Convenience function for `key::SecretKey::new`\nand `key::PublicKey::from_secret_key`; call those functions directly for\nbatch key generation. Requires a signing-capable context.",670,{"inputs":[{"name":"secp256k1"},{"name":"r"}],"output":{"name":"result"}}],[11,"sign","","Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce\nRequires a signing-capable context.",670,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"sign_recoverable","","Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce\nRequires a signing-capable context.",670,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"recover","","Determines the public key for which `sig` is a valid signature for\n`msg`. Requires a verify-capable context.",670,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"recoverablesignature"}],"output":{"name":"result"}}],[11,"verify","","Checks that `sig` is a valid ECDSA signature for `msg` using the public\nkey `pubkey`. Returns `Ok(true)` on success. Note that this function cannot\nbe used for Bitcoin consensus checking since there may exist signatures\nwhich OpenSSL would verify but not libsecp256k1, or vice-versa. Requires a\nverify-capable context.",670,{"inputs":[{"name":"secp256k1"},{"name":"message"},{"name":"signature"},{"name":"publickey"}],"output":{"name":"result"}}],[11,"fmt","secp256k1::ecdh","",671,{"inputs":[{"name":"sharedsecret"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",671,{"inputs":[{"name":"sharedsecret"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"ne","","",671,{"inputs":[{"name":"sharedsecret"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"clone","","",671,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"new","","Creates a new shared secret from a pubkey and secret key",671,{"inputs":[{"name":"sharedsecret"},{"name":"secp256k1"},{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"sharedsecret"}}],[11,"new_raw","","Creates a new unhashed shared secret from a pubkey and secret key",671,{"inputs":[{"name":"sharedsecret"},{"name":"secp256k1"},{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"sharedsecret"}}],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",671,null],[11,"from","","",671,{"inputs":[{"name":"sharedsecret"},{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"index","","",671,{"inputs":[{"name":"sharedsecret"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",671,null],[11,"index","","",671,null],[11,"index","","",671,null],[11,"fmt","secp256k1::ffi","",672,{"inputs":[{"name":"context"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",672,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",673,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",673,null],[11,"len","","Returns the length of the object as an array",673,{"inputs":[{"name":"publickey"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",673,{"inputs":[{"name":"publickey"}],"output":{"name":"bool"}}],[11,"eq","","",673,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"clone","","",673,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"index","","",673,{"inputs":[{"name":"publickey"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",673,null],[11,"index","","",673,null],[11,"index","","",673,null],[11,"index","","",673,null],[11,"decode","","",673,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",673,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",673,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",673,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",673,{"inputs":[{"name":"publickey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) public key usable for the FFI interface",673,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"blank","","Create a new (uninitialized) public key usable for the FFI interface",673,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"hash","","",673,null],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",674,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",674,null],[11,"len","","Returns the length of the object as an array",674,{"inputs":[{"name":"signature"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",674,{"inputs":[{"name":"signature"}],"output":{"name":"bool"}}],[11,"eq","","",674,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"clone","","",674,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"index","","",674,{"inputs":[{"name":"signature"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",674,null],[11,"index","","",674,null],[11,"index","","",674,null],[11,"index","","",674,null],[11,"decode","","",674,{"inputs":[{"name":"signature"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",674,{"inputs":[{"name":"signature"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",674,{"inputs":[{"name":"signature"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",674,{"inputs":[{"name":"signature"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",674,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",675,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",675,null],[11,"len","","Returns the length of the object as an array",675,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",675,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"eq","","",675,{"inputs":[{"name":"recoverablesignature"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"clone","","",675,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"index","","",675,{"inputs":[{"name":"recoverablesignature"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",675,null],[11,"index","","",675,null],[11,"index","","",675,null],[11,"index","","",675,null],[11,"decode","","",675,{"inputs":[{"name":"recoverablesignature"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",675,{"inputs":[{"name":"recoverablesignature"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",675,{"inputs":[{"name":"recoverablesignature"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",675,{"inputs":[{"name":"recoverablesignature"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",675,{"inputs":[{"name":"recoverablesignature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",674,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",674,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",675,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",675,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",676,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",676,null],[11,"len","","Returns the length of the object as an array",676,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",676,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"eq","","",676,{"inputs":[{"name":"sharedsecret"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"clone","","",676,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"index","","",676,{"inputs":[{"name":"sharedsecret"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",676,null],[11,"index","","",676,null],[11,"index","","",676,null],[11,"index","","",676,null],[11,"decode","","",676,{"inputs":[{"name":"sharedsecret"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",676,{"inputs":[{"name":"sharedsecret"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",676,{"inputs":[{"name":"sharedsecret"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",676,{"inputs":[{"name":"sharedsecret"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",676,{"inputs":[{"name":"sharedsecret"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",676,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",676,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"as_ptr","secp256k1::key","Converts the object to a raw pointer for FFI interfacing",677,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",677,null],[11,"len","","Returns the length of the object as an array",677,{"inputs":[{"name":"secretkey"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",677,{"inputs":[{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"eq","","",677,{"inputs":[{"name":"secretkey"},{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"clone","","",677,{"inputs":[{"name":"secretkey"}],"output":{"name":"secretkey"}}],[11,"index","","",677,{"inputs":[{"name":"secretkey"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",677,null],[11,"index","","",677,null],[11,"index","","",677,null],[11,"index","","",677,null],[11,"decode","","",677,{"inputs":[{"name":"secretkey"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",677,{"inputs":[{"name":"secretkey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",677,{"inputs":[{"name":"secretkey"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",677,{"inputs":[{"name":"secretkey"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",677,{"inputs":[{"name":"secretkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",678,null],[11,"fmt","","",678,{"inputs":[{"name":"publickey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",678,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"ne","","",678,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"clone","","",678,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"new","","Creates a new random secret key",677,{"inputs":[{"name":"secretkey"},{"name":"secp256k1"},{"name":"r"}],"output":{"name":"secretkey"}}],[11,"from_slice","","Converts a `SECRET_KEY_SIZE`-byte slice to a secret key",677,null],[11,"add_assign","","Adds one secret key to another, modulo the curve order",677,{"inputs":[{"name":"secretkey"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"new","","Creates a new zeroed out public key",678,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"is_valid","","Determines whether a pubkey is valid",678,{"inputs":[{"name":"publickey"}],"output":{"name":"bool"}}],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",678,null],[11,"from_secret_key","","Creates a new public key from a secret key.",678,{"inputs":[{"name":"publickey"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"from_slice","","Creates a public key directly from a slice",678,null],[11,"serialize_vec","","Serialize the key as a byte-encoded pair of values. In compressed form\nthe y-coordinate is represented by only a single bit, as x determines\nit up to one bit.",678,{"inputs":[{"name":"publickey"},{"name":"secp256k1"},{"name":"bool"}],"output":{"name":"arrayvec"}}],[11,"add_exp_assign","","Adds the pk corresponding to `other` to the pk `self` in place",678,{"inputs":[{"name":"publickey"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"decode","","",678,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[11,"from","","",678,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"encode","","",678,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",678,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",678,{"inputs":[{"name":"publickey"},{"name":"s"}],"output":{"name":"result"}}],[11,"as_ptr","secp256k1::schnorr","Converts the object to a raw pointer for FFI interfacing",679,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",679,null],[11,"len","","Returns the length of the object as an array",679,{"inputs":[{"name":"signature"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",679,{"inputs":[{"name":"signature"}],"output":{"name":"bool"}}],[11,"eq","","",679,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"clone","","",679,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"index","","",679,{"inputs":[{"name":"signature"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",679,null],[11,"index","","",679,null],[11,"index","","",679,null],[11,"index","","",679,null],[11,"decode","","",679,{"inputs":[{"name":"signature"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",679,{"inputs":[{"name":"signature"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",679,{"inputs":[{"name":"signature"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",679,{"inputs":[{"name":"signature"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",679,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","Deserializes a signature from a 64-byte vector",679,null],[11,"serialize","","Serializes a signature to a 64-byte vector",679,{"inputs":[{"name":"signature"}],"output":{"name":"vec"}}],[11,"fmt","secp256k1","",680,{"inputs":[{"name":"recoveryid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",680,{"inputs":[{"name":"recoveryid"},{"name":"recoveryid"}],"output":{"name":"bool"}}],[11,"ne","","",680,{"inputs":[{"name":"recoveryid"},{"name":"recoveryid"}],"output":{"name":"bool"}}],[11,"clone","","",680,{"inputs":[{"name":"recoveryid"}],"output":{"name":"recoveryid"}}],[11,"fmt","","",681,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",681,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"ne","","",681,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"clone","","",681,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"fmt","","",682,{"inputs":[{"name":"recoverablesignature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",682,{"inputs":[{"name":"recoverablesignature"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"ne","","",682,{"inputs":[{"name":"recoverablesignature"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"clone","","",682,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"from_i32","","Allows library users to create valid recovery IDs from i32.",680,{"inputs":[{"name":"recoveryid"},{"name":"i32"}],"output":{"name":"result"}}],[11,"to_i32","","Allows library users to convert recovery IDs to i32.",680,{"inputs":[{"name":"recoveryid"}],"output":{"name":"i32"}}],[11,"from_der","","Converts a DER-encoded byte slice to a signature",681,null],[11,"from_der_lax","","Converts a \"lax DER\"-encoded byte slice to a signature. This is basically\nonly useful for validating signatures in the Bitcoin blockchain from before\n2016. It should never be used in new applications. This library does not\nsupport serializing to this \"format\"",681,null],[11,"normalize_s","","Normalizes a signature to a \"low S\" form. In ECDSA, signatures are\nof the form (r, s) where r and s are numbers lying in some finite\nfield. The verification equation will pass for (r, s) iff it passes\nfor (r, -s), so it is possible to ``modify'' signatures in transit\nby flipping the sign of s. This does not constitute a forgery since\nthe signed message still cannot be changed, but for some applications,\nchanging even the signature itself can be a problem. Such applications\nrequire a \"strong signature\". It is believed that ECDSA is a strong\nsignature except for this ambiguity in the sign of s, so to accomodate\nthese applications libsecp256k1 will only accept signatures for which\ns is in the lower half of the field range. This eliminates the\nambiguity.",681,null],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",681,null],[11,"as_mut_ptr","","Obtains a raw mutable pointer suitable for use with FFI functions",681,null],[11,"serialize_der","","Serializes the signature in DER format",681,{"inputs":[{"name":"signature"},{"name":"secp256k1"}],"output":{"name":"vec"}}],[11,"from","","",681,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"signature"}}],[11,"from_compact","","Converts a compact-encoded byte slice to a signature. This\nrepresentation is nonstandard and defined by the libsecp256k1\nlibrary.",682,null],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",682,null],[11,"serialize_compact","","Serializes the recoverable signature in compact format",682,null],[11,"to_standard","","Converts a recoverable signature to a non-recoverable one (this is needed\nfor verification",682,{"inputs":[{"name":"recoverablesignature"},{"name":"secp256k1"}],"output":{"name":"signature"}}],[11,"from","","",682,{"inputs":[{"name":"recoverablesignature"},{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"index","","",681,{"inputs":[{"name":"signature"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",681,null],[11,"index","","",681,null],[11,"index","","",681,null],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",683,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",683,null],[11,"len","","Returns the length of the object as an array",683,{"inputs":[{"name":"message"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",683,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"eq","","",683,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"clone","","",683,{"inputs":[{"name":"message"}],"output":{"name":"message"}}],[11,"index","","",683,{"inputs":[{"name":"message"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",683,null],[11,"index","","",683,null],[11,"index","","",683,null],[11,"index","","",683,null],[11,"decode","","",683,{"inputs":[{"name":"message"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",683,{"inputs":[{"name":"message"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",683,{"inputs":[{"name":"message"},{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",683,{"inputs":[{"name":"message"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",683,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Converts a `MESSAGE_SIZE`-byte slice to a message object",683,null],[11,"fmt","","",684,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",684,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",684,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",684,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",684,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",684,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"description","","",684,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",685,{"inputs":[{"name":"contextflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",685,{"inputs":[{"name":"contextflag"}],"output":{"name":"contextflag"}}],[11,"eq","","",685,{"inputs":[{"name":"contextflag"},{"name":"contextflag"}],"output":{"name":"bool"}}],[11,"ne","","",685,{"inputs":[{"name":"contextflag"},{"name":"contextflag"}],"output":{"name":"bool"}}],[11,"fmt","","",685,{"inputs":[{"name":"contextflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",670,{"inputs":[{"name":"secp256k1"}],"output":{"name":"secp256k1"}}],[11,"eq","","",670,{"inputs":[{"name":"secp256k1"},{"name":"secp256k1"}],"output":{"name":"bool"}}],[11,"fmt","","",670,{"inputs":[{"name":"secp256k1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",670,null],[11,"from_rsv","ethcore_util::crypto","Create a new signature from the R, S and V componenets.",686,{"inputs":[{"name":"signature"},{"name":"h256"},{"name":"h256"},{"name":"u8"}],"output":{"name":"signature"}}],[11,"to_rsv","","Convert transaction to R, S and V components.",686,null],[11,"fmt","","",669,{"inputs":[{"name":"cryptoerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",669,{"inputs":[{"name":"cryptoerror"},{"name":"error"}],"output":{"name":"cryptoerror"}}],[11,"from","","",669,{"inputs":[{"name":"cryptoerror"},{"name":"error"}],"output":{"name":"cryptoerror"}}],[11,"eq","","",687,{"inputs":[{"name":"keypair"},{"name":"keypair"}],"output":{"name":"bool"}}],[11,"ne","","",687,{"inputs":[{"name":"keypair"},{"name":"keypair"}],"output":{"name":"bool"}}],[11,"fmt","","",687,{"inputs":[{"name":"keypair"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_secret","","Create a pair from secret key",687,{"inputs":[{"name":"keypair"},{"name":"secret"}],"output":{"name":"result"}}],[11,"create","","Create a new random key pair",687,{"inputs":[{"name":"keypair"}],"output":{"name":"result"}}],[11,"public","","Returns public key",687,{"inputs":[{"name":"keypair"}],"output":{"name":"public"}}],[11,"secret","","Returns private key",687,{"inputs":[{"name":"keypair"}],"output":{"name":"secret"}}],[11,"sign","","Sign a message with our secret key.",687,{"inputs":[{"name":"keypair"},{"name":"h256"}],"output":{"name":"result"}}],[0,"triehash","ethcore_util","Generetes trie root.",null,null],[5,"ordered_trie_root","ethcore_util::triehash","Generates a trie root hash for a vector of values",null,{"inputs":[{"name":"vec"}],"output":{"name":"h256"}}],[5,"trie_root","","Generates a trie root hash for a vector of key-values",null,{"inputs":[{"name":"vec"}],"output":{"name":"h256"}}],[5,"sec_trie_root","","Generates a key-hashed (secure) trie root hash for a vector of key-values.",null,{"inputs":[{"name":"vec"}],"output":{"name":"h256"}}],[0,"trie","ethcore_util","Trie interface and implementation.",null,null],[0,"trietraits","ethcore_util::trie","Export the trietraits module.",null,null],[8,"Trie","ethcore_util::trie::trietraits","A key-value datastore implemented as a database-backed modified Merkle tree.",null,null],[10,"root","","Return the root of the trie.",688,{"inputs":[{"name":"trie"}],"output":{"name":"h256"}}],[11,"is_empty","","Is the trie empty?",688,{"inputs":[{"name":"trie"}],"output":{"name":"bool"}}],[10,"contains","","Does the trie contain a given key?",688,null],[10,"get","","What is the value of the given key in this trie?",688,null],[8,"TrieMut","","A key-value datastore implemented as a database-backed modified Merkle tree.",null,null],[10,"insert","","Insert a `key`/`value` pair into the trie. An `empty` value is equivalent to removing\n`key` from the trie.",689,null],[10,"remove","","Remove a `key` from the trie. Equivalent to making it equal to the empty\nvalue.",689,null],[0,"standardmap","ethcore_util::trie","Export the standardmap module.\nKey-value datastore with a modified Merkle tree.",null,null],[3,"StandardMap","ethcore_util::trie::standardmap","Standard test map for profiling tries.",null,null],[12,"alphabet","","The alphabet to use for keys.",690,null],[12,"min_key","","Minimum size of key.",690,null],[12,"journal_key","","Delta size of key.",690,null],[12,"value_mode","","Mode of value generation.",690,null],[12,"count","","Number of keys.",690,null],[4,"Alphabet","","Alphabet to use when creating words for insertion into tries.",null,null],[13,"All","","All values are allowed in each bytes of the key.",691,null],[13,"Low","","Only a 6 values ('a' - 'f') are chosen to compose the key.",691,null],[13,"Mid","","Quite a few values (around 32) are chosen to compose the key.",691,null],[13,"Custom","","A set of bytes given is used to compose the key.",691,null],[4,"ValueMode","","Means of determining the value.",null,null],[13,"Mirror","","Same as the key.",692,null],[13,"Random","","Randomly (50:50) 1 or 32 byte randomly string.",692,null],[11,"make","","Create the standard map (set of keys and values) for the object's fields.",690,{"inputs":[{"name":"standardmap"}],"output":{"name":"vec"}}],[0,"journal","ethcore_util::trie","Export the journal module.",null,null],[3,"Score","ethcore_util::trie::journal","How many insertions and removals were done in an `apply` operation.",null,null],[12,"inserts","","Number of insertions.",693,null],[12,"removes","","Number of removals.",693,null],[3,"Journal","","A journal of operations on the backing database.",null,null],[11,"fmt","","",694,{"inputs":[{"name":"journal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty, object.",694,{"inputs":[{"name":"journal"}],"output":{"name":"journal"}}],[11,"new_node","","Given the RLP that encodes a node, append a reference to that node `out` and leave `journal`\nsuch that the reference is valid, once applied.",694,{"inputs":[{"name":"journal"},{"name":"bytes"},{"name":"rlpstream"}],"output":null}],[11,"delete_node_sha3","","Given the RLP that encodes a now-unused node, leave `journal` in such a state that it is noted.",694,{"inputs":[{"name":"journal"},{"name":"h256"}],"output":null}],[11,"delete_node","","Register an RLP-encoded node for deletion (given a slice), if it needs to be deleted.",694,null],[11,"apply","","Apply this journal to the HashDB `db` and return the number of insertions and removals done.",694,{"inputs":[{"name":"journal"},{"name":"hashdb"}],"output":{"name":"score"}}],[0,"node","ethcore_util::trie","Export the node module.",null,null],[4,"Node","ethcore_util::trie::node","Type of node in the trie and essential information thereof.",null,null],[13,"Empty","","Null trie node; could be an empty root or an empty branch entry.",695,null],[13,"Leaf","","Leaf node; has key slice and value. Value may not be empty.",695,null],[13,"Extension","","Extension node; has key slice and node data. Data may not be null.",695,null],[13,"Branch","","Branch node; has array of 16 child nodes (each possibly null) and an optional immediate node data.",695,null],[11,"fmt","","",695,{"inputs":[{"name":"node"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",695,{"inputs":[{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[11,"ne","","",695,{"inputs":[{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[11,"clone","","",695,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"decoded","","Decode the `node_rlp` and return the Node.",695,null],[11,"encoded","","Encode the node into RLP.",695,{"inputs":[{"name":"node"}],"output":{"name":"bytes"}}],[11,"encoded_and_added","","Encode the node, adding it to `journal` if necessary and return the RLP valid for\ninsertion into a parent node. ",695,{"inputs":[{"name":"node"},{"name":"journal"}],"output":{"name":"bytes"}}],[0,"triedb","ethcore_util::trie","Export the triedb module.",null,null],[3,"TrieDB","ethcore_util::trie::triedb","A `Trie` implementation using a generic `HashDB` backing database.",null,null],[12,"hash_count","","The number of hashes performed so far in operations on this trie.",696,null],[3,"TrieDBIterator","","Iterator for going through all values in the trie.",null,null],[11,"new","","Create a new trie with the backing database `db` and `root`\nPanics, if `root` does not exist",696,{"inputs":[{"name":"triedb"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"db","","Get the backing database.",696,{"inputs":[{"name":"triedb"}],"output":{"name":"hashdb"}}],[11,"keys","","Determine all the keys in the backing database that belong to the trie.",696,{"inputs":[{"name":"triedb"}],"output":{"name":"vec"}}],[11,"to_map","","Convert a vector of hashes to a hashmap of hash to occurances.",696,{"inputs":[{"name":"triedb"},{"name":"vec"}],"output":{"name":"hashmap"}}],[11,"db_items_remaining","","Determine occurances of items in the backing database which are not related to this\ntrie.",696,{"inputs":[{"name":"triedb"}],"output":{"name":"hashmap"}}],[11,"clone","","",697,{"inputs":[{"name":"triedbiterator"}],"output":{"name":"triedbiterator"}}],[11,"next","","",697,{"inputs":[{"name":"triedbiterator"}],"output":{"name":"option"}}],[11,"iter","","Get all keys/values stored in the trie.",696,{"inputs":[{"name":"triedb"}],"output":{"name":"triedbiterator"}}],[11,"root","","",696,{"inputs":[{"name":"triedb"}],"output":{"name":"h256"}}],[11,"contains","","",696,null],[11,"get","","",696,null],[11,"fmt","","",696,{"inputs":[{"name":"triedb"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"triedbmut","ethcore_util::trie","Export the triedbmut module.",null,null],[3,"TrieDBMut","ethcore_util::trie::triedbmut","A `Trie` implementation using a generic `HashDB` backing database.",null,null],[12,"hash_count","","The number of hashes performed so far in operations on this trie.",698,null],[11,"new","","Create a new trie with the backing database `db` and empty `root`\nInitialise to the state entailed by the genesis block.\nThis guarantees the trie is built correctly.",698,{"inputs":[{"name":"triedbmut"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"from_existing","","Create a new trie with the backing database `db` and `root`.\nPanics, if `root` does not exist.",698,{"inputs":[{"name":"triedbmut"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"db","","Get the backing database.",698,{"inputs":[{"name":"triedbmut"}],"output":{"name":"hashdb"}}],[11,"db_mut","","Get the backing database.",698,{"inputs":[{"name":"triedbmut"}],"output":{"name":"hashdb"}}],[11,"keys","","Determine all the keys in the backing database that belong to the trie.",698,{"inputs":[{"name":"triedbmut"}],"output":{"name":"vec"}}],[11,"to_map","","Convert a vector of hashes to a hashmap of hash to occurances.",698,{"inputs":[{"name":"triedbmut"},{"name":"vec"}],"output":{"name":"hashmap"}}],[11,"db_items_remaining","","Determine occurances of items in the backing database which are not related to this\ntrie.",698,{"inputs":[{"name":"triedbmut"}],"output":{"name":"hashmap"}}],[11,"root","","",698,{"inputs":[{"name":"triedbmut"}],"output":{"name":"h256"}}],[11,"contains","","",698,null],[11,"get","","",698,null],[11,"insert","","",698,null],[11,"remove","","",698,null],[11,"fmt","","",698,{"inputs":[{"name":"triedbmut"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sectriedb","ethcore_util::trie","Export the sectriedb module.",null,null],[3,"SecTrieDB","ethcore_util::trie::sectriedb","A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.",null,null],[11,"new","","Create a new trie with the backing database `db` and empty `root`\nInitialise to the state entailed by the genesis block.\nThis guarantees the trie is built correctly.",699,{"inputs":[{"name":"sectriedb"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"raw","","Get a reference to the underlying raw TrieDB struct.",699,{"inputs":[{"name":"sectriedb"}],"output":{"name":"triedb"}}],[11,"raw_mut","","Get a mutable reference to the underlying raw TrieDB struct.",699,{"inputs":[{"name":"sectriedb"}],"output":{"name":"triedb"}}],[11,"root","","",699,{"inputs":[{"name":"sectriedb"}],"output":{"name":"h256"}}],[11,"contains","","",699,null],[11,"get","","",699,null],[0,"sectriedbmut","ethcore_util::trie","Export the sectriedbmut module.",null,null],[3,"SecTrieDBMut","ethcore_util::trie::sectriedbmut","A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.",null,null],[11,"new","","Create a new trie with the backing database `db` and empty `root`\nInitialise to the state entailed by the genesis block.\nThis guarantees the trie is built correctly.",700,{"inputs":[{"name":"sectriedbmut"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"from_existing","","Create a new trie with the backing database `db` and `root`\nPanics, if `root` does not exist",700,{"inputs":[{"name":"sectriedbmut"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"self"}}],[11,"db","","Get the backing database.",700,{"inputs":[{"name":"sectriedbmut"}],"output":{"name":"hashdb"}}],[11,"db_mut","","Get the backing database.",700,{"inputs":[{"name":"sectriedbmut"}],"output":{"name":"hashdb"}}],[11,"root","","",700,{"inputs":[{"name":"sectriedbmut"}],"output":{"name":"h256"}}],[11,"contains","","",700,null],[11,"get","","",700,null],[11,"insert","","",700,null],[11,"remove","","",700,null],[0,"nibbleslice","ethcore_util","Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.",null,null],[3,"NibbleSlice","ethcore_util::nibbleslice","Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.",null,null],[3,"NibbleSliceIterator","","Iterator type for a nibble slice.",null,null],[11,"cmp","","",701,{"inputs":[{"name":"nibbleslice"},{"name":"nibbleslice"}],"output":{"name":"ordering"}}],[11,"clone","","",701,{"inputs":[{"name":"nibbleslice"}],"output":{"name":"nibbleslice"}}],[11,"next","","",702,{"inputs":[{"name":"nibblesliceiterator"}],"output":{"name":"option"}}],[11,"new","","Create a new nibble slice with the given byte-slice.",701,null],[11,"new_offset","","Create a new nibble slice with the given byte-slice with a nibble offset.",701,null],[11,"new_composed","","Create a composed nibble slice; one followed by the other.",701,{"inputs":[{"name":"nibbleslice"},{"name":"nibbleslice"},{"name":"nibbleslice"}],"output":{"name":"self"}}],[11,"iter","","Get an iterator for the series of nibbles.",701,{"inputs":[{"name":"nibbleslice"}],"output":{"name":"nibblesliceiterator"}}],[11,"from_encoded","","Create a new nibble slice from the given HPE encoded data (e.g. output of `encoded()`).",701,null],[11,"is_empty","","Is this an empty slice?",701,{"inputs":[{"name":"nibbleslice"}],"output":{"name":"bool"}}],[11,"len","","Get the length (in nibbles, naturally) of this slice.",701,{"inputs":[{"name":"nibbleslice"}],"output":{"name":"usize"}}],[11,"at","","Get the nibble at position `i`.",701,{"inputs":[{"name":"nibbleslice"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"mid","","Return object which represents a view on to this slice (further) offset by `i` nibbles.",701,{"inputs":[{"name":"nibbleslice"},{"name":"usize"}],"output":{"name":"nibbleslice"}}],[11,"starts_with","","Do we start with the same nibbles as the whole of `them`?",701,{"inputs":[{"name":"nibbleslice"},{"name":"self"}],"output":{"name":"bool"}}],[11,"common_prefix","","How many of the same nibbles at the beginning do we match with `them`?",701,{"inputs":[{"name":"nibbleslice"},{"name":"self"}],"output":{"name":"usize"}}],[11,"encoded","","Encode while nibble slice in prefixed hex notation, noting whether it `is_leaf`.",701,{"inputs":[{"name":"nibbleslice"},{"name":"bool"}],"output":{"name":"bytes"}}],[11,"encoded_leftmost","","Encode only the leftmost `n` bytes of the nibble slice in prefixed hex notation,\nnoting whether it `is_leaf`.",701,{"inputs":[{"name":"nibbleslice"},{"name":"usize"},{"name":"bool"}],"output":{"name":"bytes"}}],[11,"eq","","",701,{"inputs":[{"name":"nibbleslice"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",701,{"inputs":[{"name":"nibbleslice"},{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",701,{"inputs":[{"name":"nibbleslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"heap_size_of_children","ethcore_util::hash","",609,{"inputs":[{"name":"h32"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",608,{"inputs":[{"name":"h64"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",610,{"inputs":[{"name":"h128"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",607,{"inputs":[{"name":"address"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",606,{"inputs":[{"name":"h256"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",611,{"inputs":[{"name":"h264"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",612,{"inputs":[{"name":"h512"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",613,{"inputs":[{"name":"h520"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",614,{"inputs":[{"name":"h1024"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",615,{"inputs":[{"name":"h2048"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","ethcore_util::uint","",619,{"inputs":[{"name":"u128"}],"output":{"name":"usize"}}],[11,"heap_size_of_children","","",618,{"inputs":[{"name":"u256"}],"output":{"name":"usize"}}],[0,"squeeze","ethcore_util","Helper module that should be used to randomly squeeze\ncaches to a given size in bytes",null,null],[8,"Squeeze","ethcore_util::squeeze","Should be used to squeeze collections to certain size in bytes",null,null],[10,"squeeze","","Try to reduce collection size to `size` bytes",703,{"inputs":[{"name":"squeeze"},{"name":"usize"}],"output":null}],[11,"squeeze","std::collections::hash::map","",38,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":null}],[0,"semantic_version","ethcore_util","Semantic version formatting and comparing.",null,null],[3,"SemanticVersion","ethcore_util::semantic_version","A version value with strict meaning. Use `as_u32` to convert to a simple integer.",null,null],[12,"major","","Major version - API/feature removals & breaking changes.",704,null],[12,"minor","","Minor version - API/feature additions.",704,null],[12,"tiny","","Tiny version - bug fixes.",704,null],[11,"new","","Create a new object.",704,{"inputs":[{"name":"semanticversion"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"semanticversion"}}],[11,"as_u32","","Convert to a `u32` representation.",704,{"inputs":[{"name":"semanticversion"}],"output":{"name":"u32"}}],[0,"io","ethcore_util","General IO module.",null,null],[3,"IoContext","ethcore_util::io","IO access point. This is passed to all IO handlers and provides an interface to the IO subsystem.",null,null],[3,"IoService","","General IO Service. Starts an event loop and dispatches IO requests.\n'Message' is a notification message type",null,null],[3,"IoChannel","","Allows sending messages into the event loop. All the IO handlers will get the message\nin the `message` callback.",null,null],[3,"IoManager","","Root IO handler. Manages user handlers, messages and IO timers.",null,null],[4,"IoError","","IO Error",null,null],[13,"Mio","","Low level error from mio crate",705,null],[11,"new","","Create a new IO access point. Takes references to all the data that can be updated within the IO handler.",706,{"inputs":[{"name":"iocontext"},{"name":"iochannel"},{"name":"handlerid"}],"output":{"name":"iocontext"}}],[11,"register_timer","","Register a new IO timer. 'IoHandler::timeout' will be called with the token.",706,{"inputs":[{"name":"iocontext"},{"name":"timertoken"},{"name":"u64"}],"output":{"name":"result"}}],[11,"clear_timer","","Delete a timer.",706,{"inputs":[{"name":"iocontext"},{"name":"timertoken"}],"output":{"name":"result"}}],[11,"register_stream","","Register a new IO stream.",706,{"inputs":[{"name":"iocontext"},{"name":"streamtoken"}],"output":{"name":"result"}}],[11,"deregister_stream","","Deregister an IO stream.",706,{"inputs":[{"name":"iocontext"},{"name":"streamtoken"}],"output":{"name":"result"}}],[11,"update_registration","","Reregister an IO stream.",706,{"inputs":[{"name":"iocontext"},{"name":"streamtoken"}],"output":{"name":"result"}}],[11,"message","","Broadcast a message to other IO clients",706,{"inputs":[{"name":"iocontext"},{"name":"message"}],"output":null}],[11,"channel","","Get message channel",706,{"inputs":[{"name":"iocontext"}],"output":{"name":"iochannel"}}],[11,"start","","Creates a new instance and registers it with the event loop.",707,{"inputs":[{"name":"iomanager"},{"name":"arc"},{"name":"eventloop"}],"output":{"name":"result"}}],[11,"ready","","",707,{"inputs":[{"name":"iomanager"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"timeout","","",707,{"inputs":[{"name":"iomanager"},{"name":"eventloop"},{"name":"token"}],"output":null}],[11,"notify","","",707,{"inputs":[{"name":"iomanager"},{"name":"eventloop"},{"name":"message"}],"output":null}],[11,"clone","","",708,{"inputs":[{"name":"iochannel"}],"output":{"name":"iochannel"}}],[11,"send","","Send a msessage through the channel",708,{"inputs":[{"name":"iochannel"},{"name":"message"}],"output":{"name":"result"}}],[11,"send_io","","Send low level io message",708,{"inputs":[{"name":"iochannel"},{"name":"iomessage"}],"output":{"name":"result"}}],[11,"disconnected","","Create a new channel to connected to event loop.",708,{"inputs":[{"name":"iochannel"}],"output":{"name":"iochannel"}}],[11,"on_panic","","",709,{"inputs":[{"name":"ioservice"},{"name":"f"}],"output":null}],[11,"start","","Starts IO event loop",709,{"inputs":[{"name":"ioservice"}],"output":{"name":"result"}}],[11,"register_handler","","Regiter a IO hadnler with the event loop.",709,{"inputs":[{"name":"ioservice"},{"name":"arc"}],"output":{"name":"result"}}],[11,"send_message","","Send a message over the network. Normaly `HostIo::send` should be used. This can be used from non-io threads.",709,{"inputs":[{"name":"ioservice"},{"name":"message"}],"output":{"name":"result"}}],[11,"channel","","Create a new message channel",709,{"inputs":[{"name":"ioservice"}],"output":{"name":"iochannel"}}],[11,"drop","","",709,{"inputs":[{"name":"ioservice"}],"output":null}],[6,"TimerToken","","Timer ID",null,null],[6,"StreamToken","","Timer ID",null,null],[17,"TOKENS_PER_HANDLER","","Maximum number of tokens a handler can use",null,null],[8,"IoHandler","","Generic IO handler.\nAll the handler function are called from within IO event loop.\n`Message` type is used as notification data",null,null],[11,"initialize","","Initialize the handler",710,{"inputs":[{"name":"iohandler"},{"name":"iocontext"}],"output":null}],[11,"timeout","","Timer function called after a timeout created with `HandlerIo::timeout`.",710,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"timertoken"}],"output":null}],[11,"message","","Called when a broadcasted message is received. The message can only be sent from a different IO handler.",710,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"message"}],"output":null}],[11,"stream_hup","","Called when an IO stream gets closed",710,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"streamtoken"}],"output":null}],[11,"stream_readable","","Called when an IO stream can be read from",710,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"streamtoken"}],"output":null}],[11,"stream_writable","","Called when an IO stream can be written to",710,{"inputs":[{"name":"iohandler"},{"name":"iocontext"},{"name":"streamtoken"}],"output":null}],[11,"register_stream","","Register a new stream with the event loop",710,{"inputs":[{"name":"iohandler"},{"name":"streamtoken"},{"name":"token"},{"name":"eventloop"}],"output":null}],[11,"update_stream","","Re-register a stream with the event loop",710,{"inputs":[{"name":"iohandler"},{"name":"streamtoken"},{"name":"token"},{"name":"eventloop"}],"output":null}],[11,"deregister_stream","","Deregister a stream. Called whenstream is removed from event loop",710,{"inputs":[{"name":"iohandler"},{"name":"streamtoken"},{"name":"eventloop"}],"output":null}],[11,"fmt","","",705,{"inputs":[{"name":"ioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",705,{"inputs":[{"name":"ioerror"},{"name":"notifyerror"}],"output":{"name":"ioerror"}}],[0,"network","ethcore_util","Network and general IO module.",null,null],[3,"NetworkContext","ethcore_util::network","IO access point. This is passed to all IO handlers and provides an interface to the IO subsystem.",null,null],[3,"NetworkService","","IO Service with networking\n`Message` defines a notification data type.",null,null],[3,"NetworkConfiguration","","Network service configuration",null,null],[12,"config_path","","Directory path to store network configuration. None means nothing will be saved",711,null],[12,"listen_address","","IP address to listen for incoming connections. Listen to all connections by default",711,null],[12,"public_address","","IP address to advertise. Detected automatically if none.",711,null],[12,"udp_port","","Port for UDP connections, same as TCP by default",711,null],[12,"nat_enabled","","Enable NAT configuration",711,null],[12,"discovery_enabled","","Enable discovery",711,null],[12,"pin","","Pin to boot nodes only",711,null],[12,"boot_nodes","","List of initial node addresses",711,null],[12,"use_secret","","Use provided node key instead of default",711,null],[12,"ideal_peers","","Number of connected peers to maintain",711,null],[3,"NetworkStats","","Network statistics structure",null,null],[4,"NetworkIoMessage","","Messages used to communitate with the event loop from other threads.",null,null],[13,"AddHandler","","Register a new protocol handler.",712,null],[12,"handler","ethcore_util::network::NetworkIoMessage","Handler shared instance.",712,null],[12,"protocol","","Protocol Id.",712,null],[12,"versions","","Supported protocol versions.",712,null],[13,"AddTimer","ethcore_util::network","Register a new protocol timer",712,null],[12,"protocol","ethcore_util::network::NetworkIoMessage","Protocol Id.",712,null],[12,"token","","Timer token.",712,null],[12,"delay","","Timer delay in milliseconds.",712,null],[13,"Disconnect","ethcore_util::network","Disconnect a peer",712,null],[13,"User","","User message",712,null],[4,"NetworkError","","Network error.",null,null],[13,"Auth","","Authentication error.",713,null],[13,"BadProtocol","","Unrecognised protocol.",713,null],[13,"Expired","","Message expired.",713,null],[13,"PeerNotFound","","Peer not found.",713,null],[13,"Disconnect","","Peer is diconnected.",713,null],[13,"Io","","Socket IO error.",713,null],[5,"is_valid_node_url","","Check if node url is valid",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",711,{"inputs":[{"name":"networkconfiguration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance of default settings.",711,{"inputs":[{"name":"networkconfiguration"}],"output":{"name":"networkconfiguration"}}],[11,"new_with_port","","Create new default configuration with sepcified listen port.",711,{"inputs":[{"name":"networkconfiguration"},{"name":"u16"}],"output":{"name":"networkconfiguration"}}],[11,"clone","","",712,{"inputs":[{"name":"networkiomessage"}],"output":{"name":"networkiomessage"}}],[11,"send","","Send a packet over the network to another peer.",714,{"inputs":[{"name":"networkcontext"},{"name":"peerid"},{"name":"packetid"},{"name":"vec"}],"output":{"name":"result"}}],[11,"respond","","Respond to a current network message. Panics if no there is no packet in the context.",714,{"inputs":[{"name":"networkcontext"},{"name":"packetid"},{"name":"vec"}],"output":{"name":"result"}}],[11,"message","","Send an IO message",714,{"inputs":[{"name":"networkcontext"},{"name":"message"}],"output":null}],[11,"disable_peer","","Disable current protocol capability for given peer. If no capabilities left peer gets disconnected.",714,{"inputs":[{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[11,"disconnect_peer","","Disconnect peer. Reconnect can be attempted later.",714,{"inputs":[{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[11,"register_timer","","Register a new IO timer. 'IoHandler::timeout' will be called with the token.",714,{"inputs":[{"name":"networkcontext"},{"name":"timertoken"},{"name":"u64"}],"output":{"name":"result"}}],[11,"peer_info","","Returns peer identification string",714,{"inputs":[{"name":"networkcontext"},{"name":"peerid"}],"output":{"name":"string"}}],[11,"start","","Starts IO event loop",715,{"inputs":[{"name":"networkservice"},{"name":"networkconfiguration"}],"output":{"name":"result"}}],[11,"register_protocol","","Regiter a new protocol handler with the event loop.",715,null],[11,"host_info","","Returns host identifier string as advertised to other peers",715,{"inputs":[{"name":"networkservice"}],"output":{"name":"string"}}],[11,"io","","Returns underlying io service.",715,{"inputs":[{"name":"networkservice"}],"output":{"name":"ioservice"}}],[11,"stats","","Returns underlying io service.",715,{"inputs":[{"name":"networkservice"}],"output":{"name":"networkstats"}}],[11,"on_panic","","",715,{"inputs":[{"name":"networkservice"},{"name":"f"}],"output":null}],[11,"fmt","","",713,{"inputs":[{"name":"networkerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",713,{"inputs":[{"name":"networkerror"},{"name":"decodererror"}],"output":{"name":"networkerror"}}],[11,"from","","",713,{"inputs":[{"name":"networkerror"},{"name":"ioerror"}],"output":{"name":"networkerror"}}],[11,"from","","",713,{"inputs":[{"name":"networkerror"},{"name":"cryptoerror"}],"output":{"name":"networkerror"}}],[11,"fmt","","",716,{"inputs":[{"name":"networkstats"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",716,{"inputs":[{"name":"networkstats"}],"output":{"name":"networkstats"}}],[11,"inc_recv","","Increase bytes received.",716,{"inputs":[{"name":"networkstats"},{"name":"usize"}],"output":null}],[11,"inc_send","","Increase bytes sent.",716,{"inputs":[{"name":"networkstats"},{"name":"usize"}],"output":null}],[11,"inc_sessions","","Increase number of sessions.",716,{"inputs":[{"name":"networkstats"}],"output":null}],[11,"send","","Get bytes sent.",716,{"inputs":[{"name":"networkstats"}],"output":{"name":"usize"}}],[11,"recv","","Get bytes received.",716,{"inputs":[{"name":"networkstats"}],"output":{"name":"usize"}}],[11,"sessions","","Get total number of sessions created.",716,{"inputs":[{"name":"networkstats"}],"output":{"name":"usize"}}],[6,"PeerId","","Local (temporary) peer session ID.",null,null],[6,"PacketId","","Protocol handler level packet id",null,null],[8,"NetworkProtocolHandler","","Network IO protocol handler. This needs to be implemented for each new subprotocol.\nAll the handler function are called from within IO event loop.\n`Message` is the type for message data.",null,null],[11,"initialize","","Initialize the handler",717,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"}],"output":null}],[10,"read","","Called when new network packet received.",717,null],[10,"connected","","Called when new peer is connected. Only called when peer supports the same protocol.",717,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[10,"disconnected","","Called when a previously connected peer disconnects.",717,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[11,"timeout","","Timer function called after a timeout created with `NetworkContext::timeout`.",717,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"},{"name":"timertoken"}],"output":null}],[11,"message","","Called when a broadcasted message is received. The message can only be sent from a different IO handler.",717,{"inputs":[{"name":"networkprotocolhandler"},{"name":"networkcontext"},{"name":"message"}],"output":null}],[0,"log","ethcore_util","Common log helper functions",null,null],[5,"init_log","ethcore_util::log","Intialize log with default settings",null,{"inputs":[],"output":null}],[0,"panics","ethcore_util","Panic utilities",null,null],[3,"PanicHandler","ethcore_util::panics","Structure that allows to catch panics and notify listeners",null,null],[8,"OnPanicListener","","Thread-safe closure for handling possible panics",null,null],[10,"call","","Invoke listener",718,{"inputs":[{"name":"onpaniclistener"},{"name":"str"}],"output":null}],[8,"ForwardPanic","","Forwards panics from child",null,null],[10,"forward_from","","Attach `on_panic` listener to `child` and rethrow all panics",719,{"inputs":[{"name":"forwardpanic"},{"name":"s"}],"output":null}],[8,"MayPanic","","Trait indicating that the structure catches some of the panics (most probably from spawned threads)\nand it's possbile to be notified when one of the threads panics.",null,null],[10,"on_panic","","`closure` will be invoked whenever panic in thread is caught",720,{"inputs":[{"name":"maypanic"},{"name":"f"}],"output":null}],[11,"new_in_arc","","Creates new `PanicHandler` wrapped in `Arc`",721,{"inputs":[{"name":"panichandler"}],"output":{"name":"arc"}}],[11,"new","","Creates new `PanicHandler`",721,{"inputs":[{"name":"panichandler"}],"output":{"name":"panichandler"}}],[11,"catch_panic","","Invoke closure and catch any possible panics.\nIn case of panic notifies all listeners about it.",721,{"inputs":[{"name":"panichandler"},{"name":"g"}],"output":{"name":"result"}}],[11,"on_panic","","",721,{"inputs":[{"name":"panichandler"},{"name":"f"}],"output":null}],[11,"forward_from","alloc::arc","",573,{"inputs":[{"name":"arc"},{"name":"s"}],"output":null}],[0,"keys","ethcore_util","Key management module",null,null],[0,"directory","ethcore_util::keys","Keys Directory",null,null],[3,"KdfPbkdf2Params","ethcore_util::keys::directory","Kdf of type `Pbkdf2`\nhttps://en.wikipedia.org/wiki/PBKDF2",null,null],[12,"dk_len","","desired length of the derived key, in octets",722,null],[12,"salt","","cryptographic salt",722,null],[12,"c","","number of iterations for derived key",722,null],[12,"prf","","pseudo-random 2-parameters function",722,null],[3,"KdfScryptParams","","Kdf of type `Scrypt`.\nhttps://en.wikipedia.org/wiki/Scrypt",null,null],[12,"dk_len","","Desired length of the derived key, in octets.",723,null],[12,"p","","Parallelization parameter.",723,null],[12,"n","","CPU/memory cost parameter.",723,null],[12,"r","","TODO: comment",723,null],[12,"salt","","Cryptographic salt.",723,null],[3,"KeyFileCrypto","","Encrypted password or other arbitrary message\nwith settings for password derived key generator for decrypting content.",null,null],[12,"cipher_type","","Cipher type.",724,null],[12,"cipher_text","","Cipher text (encrypted message).",724,null],[12,"kdf","","Password derived key generator function settings.",724,null],[12,"mac","","Mac",724,null],[3,"KeyFileContent","","Stored key file struct with encrypted message (cipher_text)\nalso contains password derivation function settings (PBKDF2/Scrypt)",null,null],[12,"crypto","","Holds cypher and decrypt function settings.",725,null],[12,"id","","The identifier.",725,null],[3,"KeyDirectory","","Represents directory for saving/loading key files.",null,null],[4,"CryptoCipherType","","Cipher type (currently only aes-128-ctr)",null,null],[13,"Aes128Ctr","","aes-128-ctr with 128-bit initialisation vector(iv)",726,null],[4,"Pbkdf2CryptoFunction","","key generator function",null,null],[13,"HMacSha256","","keyed-hash generator (HMAC-256)",727,null],[4,"KeyFileKdf","","Settings for password derived key geberator function.",null,null],[13,"Pbkdf2","","Password-Based Key Derivation Function 2 (PBKDF2) type.\nhttps://en.wikipedia.org/wiki/PBKDF2",728,null],[13,"Scrypt","","Scrypt password-based key derivation function.\nhttps://en.wikipedia.org/wiki/Scrypt",728,null],[6,"Uuid","","Universally unique identifier",null,null],[11,"clone","","",726,{"inputs":[{"name":"cryptociphertype"}],"output":{"name":"cryptociphertype"}}],[11,"fmt","","",726,{"inputs":[{"name":"cryptociphertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",726,{"inputs":[{"name":"cryptociphertype"},{"name":"cryptociphertype"}],"output":{"name":"bool"}}],[11,"ne","","",726,{"inputs":[{"name":"cryptociphertype"},{"name":"cryptociphertype"}],"output":{"name":"bool"}}],[11,"clone","","",727,{"inputs":[{"name":"pbkdf2cryptofunction"}],"output":{"name":"pbkdf2cryptofunction"}}],[11,"fmt","","",727,{"inputs":[{"name":"pbkdf2cryptofunction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",727,{"inputs":[{"name":"pbkdf2cryptofunction"},{"name":"pbkdf2cryptofunction"}],"output":{"name":"bool"}}],[11,"ne","","",727,{"inputs":[{"name":"pbkdf2cryptofunction"},{"name":"pbkdf2cryptofunction"}],"output":{"name":"bool"}}],[11,"clone","","",722,{"inputs":[{"name":"kdfpbkdf2params"}],"output":{"name":"kdfpbkdf2params"}}],[11,"clone","","",723,{"inputs":[{"name":"kdfscryptparams"}],"output":{"name":"kdfscryptparams"}}],[11,"clone","","",728,{"inputs":[{"name":"keyfilekdf"}],"output":{"name":"keyfilekdf"}}],[11,"clone","","",724,{"inputs":[{"name":"keyfilecrypto"}],"output":{"name":"keyfilecrypto"}}],[11,"new_pbkdf2","","New pbkdf2-type secret.\n`cipher-text` - encrypted cipher text.\n`dk-len` - desired length of the derived key, in octets.\n`c` - number of iterations for derived key.\n`salt` - cryptographic site, random 256-bit hash (ensure it's crypto-random).\n`iv` - initialisation vector.",724,{"inputs":[{"name":"keyfilecrypto"},{"name":"bytes"},{"name":"h128"},{"name":"h256"},{"name":"h256"},{"name":"u32"},{"name":"u32"}],"output":{"name":"keyfilecrypto"}}],[11,"clone","","",725,{"inputs":[{"name":"keyfilecontent"}],"output":{"name":"keyfilecontent"}}],[11,"new","","New stored key file struct with encrypted message (cipher_text)\nalso contains password derivation function settings (PBKDF2/Scrypt)\nto decrypt cipher_text given the password is provided.",725,{"inputs":[{"name":"keyfilecontent"},{"name":"keyfilecrypto"}],"output":{"name":"keyfilecontent"}}],[11,"version","","Returns key file version if it is known.",725,{"inputs":[{"name":"keyfilecontent"}],"output":{"name":"option"}}],[11,"new","","Initializes new cache directory context with a given `path`",729,{"inputs":[{"name":"keydirectory"},{"name":"path"}],"output":{"name":"keydirectory"}}],[11,"save","","saves (inserts or updates) given key",729,{"inputs":[{"name":"keydirectory"},{"name":"keyfilecontent"}],"output":{"name":"result"}}],[11,"get","","Returns key given by id if corresponding file exists and no load error occured.\nWarns if any error occured during the key loading",729,{"inputs":[{"name":"keydirectory"},{"name":"uuid"}],"output":{"name":"option"}}],[11,"path","","Returns current path to the directory with keys",729,{"inputs":[{"name":"keydirectory"}],"output":{"name":"str"}}],[11,"collect_garbage","","Removes keys that never been requested during last `MAX_USAGE_TRACK` times",729,{"inputs":[{"name":"keydirectory"}],"output":null}],[11,"cache_size","","Reports how many keys are currently cached.",729,{"inputs":[{"name":"keydirectory"}],"output":{"name":"usize"}}],[11,"delete","","Removes key file from key directory",729,{"inputs":[{"name":"keydirectory"},{"name":"uuid"}],"output":{"name":"result"}}],[11,"list","","Enumerates all keys in the directory",729,{"inputs":[{"name":"keydirectory"}],"output":{"name":"result"}}],[0,"store","ethcore_util::keys","Secret Store",null,null],[3,"SecretStore","ethcore_util::keys::store","Represent service for storing encrypted arbitrary data",null,null],[4,"EncryptedHashMapError","","Error retrieving value from encrypted hashmap",null,null],[13,"InvalidPassword","","Encryption failed",730,null],[13,"UnknownIdentifier","","No key in the hashmap",730,null],[13,"InvalidValueFormat","","Stored value is not well formed for the requested type",730,null],[8,"EncryptedHashMap","","Encrypted hash-map, each request should contain password",null,null],[10,"get","","Returns existing value for the key, if any",731,{"inputs":[{"name":"encryptedhashmap"},{"name":"key"},{"name":"str"}],"output":{"name":"result"}}],[10,"insert","","Insert new encrypted key-value and returns previous if there was any",731,{"inputs":[{"name":"encryptedhashmap"},{"name":"key"},{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[10,"remove","","Removes key-value by key and returns the removed one, if any exists and password was provided",731,{"inputs":[{"name":"encryptedhashmap"},{"name":"key"},{"name":"option"}],"output":{"name":"option"}}],[11,"delete","","Deletes key-value by key and returns if the key-value existed",731,{"inputs":[{"name":"encryptedhashmap"},{"name":"key"}],"output":{"name":"bool"}}],[11,"fmt","","",730,{"inputs":[{"name":"encryptedhashmaperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","new instance of Secret Store",732,{"inputs":[{"name":"secretstore"}],"output":{"name":"secretstore"}}],[11,"get","","",732,{"inputs":[{"name":"secretstore"},{"name":"h128"},{"name":"str"}],"output":{"name":"result"}}],[11,"insert","","",732,{"inputs":[{"name":"secretstore"},{"name":"h128"},{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"remove","","",732,{"inputs":[{"name":"secretstore"},{"name":"h128"},{"name":"option"}],"output":{"name":"option"}}],[14,"xjson!","ethcore_util","",null,null],[14,"map!","","",null,null],[14,"mapx!","","",null,null],[14,"x!","","",null,null],[14,"xx!","","",null,null],[14,"flush!","","",null,null],[14,"flushln!","","",null,null],[11,"from","ethcore_util::uint","",618,{"inputs":[{"name":"u256"},{"name":"h256"}],"output":{"name":"u256"}}],[11,"from","","",618,{"inputs":[{"name":"u256"},{"name":"h256"}],"output":{"name":"u256"}}]],"paths":[[8,"Read"],[8,"Write"],[8,"BufRead"],[8,"Seek"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"StdError"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[4,"Cow"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"FileAttr"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"sockaddr_nl"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"sigset_t"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[3,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"Timespec"],[3,"Instant"],[3,"SystemTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[4,"Handler"],[3,"PanicInfo"],[3,"Location"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[8,"Any"],[3,"TypeId"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[4,"Ordering"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"PhantomData"],[3,"RangeFull"],[3,"RangeTo"],[3,"Unique"],[3,"Shared"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Rc"],[3,"Weak"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"Root"],[3,"NodeRef"],[3,"Handle"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"EnumSet"],[3,"Iter"],[4,"Bound"],[8,"FromStr"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[4,"IntErrorKind"],[3,"NonZero"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"Write"],[8,"Octal"],[8,"Binary"],[8,"Display"],[8,"Debug"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"SliceConcatExt"],[8,"MutableByteVector"],[8,"Hash"],[8,"Hasher"],[4,"Json"],[3,"Arc"],[4,"CharacterSet"],[4,"Newline"],[3,"Config"],[4,"FromBase64Error"],[4,"FromHexError"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[3,"Encoder"],[4,"JsonEvent"],[4,"ParserState"],[4,"StackElement"],[4,"InternalStackElement"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"FormatShim"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"FromBase64"],[8,"FromHex"],[8,"HeapSizeOf"],[8,"Itertools"],[8,"FromJson"],[3,"Mismatch"],[3,"OutOfBounds"],[4,"BaseDataError"],[4,"UtilError"],[8,"FixedHash"],[3,"H256"],[3,"Address"],[3,"H64"],[3,"H32"],[3,"H128"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"H1024"],[3,"H2048"],[8,"Uint"],[3,"U512"],[3,"U256"],[3,"U128"],[4,"BytesRef"],[4,"FromBytesError"],[8,"VecLike"],[8,"ToPretty"],[8,"BytesConvertable"],[8,"Populatable"],[8,"FromRawBytes"],[3,"ElasticArray16"],[3,"ElasticArray32"],[3,"ElasticArray1024"],[3,"PrettySlice"],[6,"Bytes"],[3,"ElasticArray2"],[3,"ElasticArray4"],[3,"ElasticArray8"],[3,"ElasticArray64"],[3,"ElasticArray128"],[3,"ElasticArray256"],[3,"ElasticArray512"],[3,"ElasticArray2048"],[3,"PayloadInfo"],[4,"DecoderError"],[4,"Prototype"],[8,"Decoder"],[8,"Decodable"],[8,"RlpDecodable"],[8,"View"],[8,"Encoder"],[8,"ByteEncodable"],[8,"Encodable"],[8,"RlpEncodable"],[8,"Stream"],[3,"Rlp"],[3,"RlpIterator"],[3,"UntrustedRlp"],[3,"UntrustedRlpIterator"],[3,"RlpStream"],[4,"Diff"],[4,"Filth"],[8,"SharedPrefix"],[8,"Hashable"],[8,"HashDB"],[3,"MemoryDB"],[3,"OverlayDB"],[3,"JournalDB"],[3,"BloomIndex"],[8,"FilterDataSource"],[3,"MemoryCache"],[3,"ChainFilter"],[4,"CryptoError"],[3,"Secp256k1"],[3,"SharedSecret"],[3,"Context"],[3,"PublicKey"],[3,"Signature"],[3,"RecoverableSignature"],[3,"SharedSecret"],[3,"SecretKey"],[3,"PublicKey"],[3,"Signature"],[3,"RecoveryId"],[3,"Signature"],[3,"RecoverableSignature"],[3,"Message"],[4,"Error"],[4,"ContextFlag"],[6,"Signature"],[3,"KeyPair"],[8,"Trie"],[8,"TrieMut"],[3,"StandardMap"],[4,"Alphabet"],[4,"ValueMode"],[3,"Score"],[3,"Journal"],[4,"Node"],[3,"TrieDB"],[3,"TrieDBIterator"],[3,"TrieDBMut"],[3,"SecTrieDB"],[3,"SecTrieDBMut"],[3,"NibbleSlice"],[3,"NibbleSliceIterator"],[8,"Squeeze"],[3,"SemanticVersion"],[4,"IoError"],[3,"IoContext"],[3,"IoManager"],[3,"IoChannel"],[3,"IoService"],[8,"IoHandler"],[3,"NetworkConfiguration"],[4,"NetworkIoMessage"],[4,"NetworkError"],[3,"NetworkContext"],[3,"NetworkService"],[3,"NetworkStats"],[8,"NetworkProtocolHandler"],[8,"OnPanicListener"],[8,"ForwardPanic"],[8,"MayPanic"],[3,"PanicHandler"],[3,"KdfPbkdf2Params"],[3,"KdfScryptParams"],[3,"KeyFileCrypto"],[3,"KeyFileContent"],[4,"CryptoCipherType"],[4,"Pbkdf2CryptoFunction"],[4,"KeyFileKdf"],[3,"KeyDirectory"],[4,"EncryptedHashMapError"],[8,"EncryptedHashMap"],[3,"SecretStore"]]};
searchIndex['ethcore_rpc'] = {"items":[[3,"HttpServer","ethcore_rpc","Http server.",null,null],[0,"v1","","Ethcore rpc v1.",null,null],[3,"Web3Client","ethcore_rpc::v1","Web3 rpc implementation.",null,null],[3,"EthClient","","Eth rpc implementation.",null,null],[3,"EthFilterClient","","Eth filter rpc implementation.",null,null],[3,"NetClient","","Net rpc implementation.",null,null],[0,"traits","","Ethereum rpc interfaces.",null,null],[0,"web3","ethcore_rpc::v1::traits","Web3 rpc interface.",null,null],[8,"Web3","ethcore_rpc::v1::traits::web3","Web3 rpc interface.",null,null],[11,"client_version","","Returns current client version.",0,{"inputs":[{"name":"web3"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",0,{"inputs":[{"name":"web3"}],"output":{"name":"iodelegate"}}],[0,"eth","ethcore_rpc::v1::traits","Eth rpc interface.",null,null],[8,"Eth","ethcore_rpc::v1::traits::eth","Eth rpc interface.",null,null],[11,"protocol_version","","Returns protocol version.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"syncing","","Returns an object with data about the sync status or false. (wtf?)",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"hashrate","","Returns the number of hashes per second that the node is mining with.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"author","","Returns block author.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"is_mining","","Returns true if client is actively mining new blocks.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"gas_price","","Returns current gas_price.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"accounts","","Returns accounts list.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_number","","Returns highest block number.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"balance","","Returns balance of the given account.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"storage_at","","Returns content of the storage at given address.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_by_hash","","Returns block with given hash.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_by_number","","Returns block with given number.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_count","","Returns the number of transactions sent from given address at given time (block number).",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_transaction_count","","Returns the number of transactions in a block.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_uncles_count","","Returns the number of uncles in a given block.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"code_at","","Returns the code at given address at given time (block number).",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"send_transaction","","Sends transaction.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"call","","Call contract.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"estimate_gas","","Estimate gas needed for execution of given contract.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_by_hash","","Get transaction by it's hash.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_by_block_hash_and_index","","Returns transaction at given block hash and index.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_by_block_number_and_index","","Returns transaction by given block number and index.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_receipt","","Returns transaction receipt.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"uncle_at","","Returns an uncles at given block and index.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"compilers","","Returns available compilers.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"compile_lll","","Compiles lll code.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"compile_solidity","","Compiles solidity.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"compile_serpent","","Compiles serpent.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"logs","","Returns logs matching given filter object.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"work","","Returns the hash of the current block, the seedHash, and the boundary condition to be met.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"submit_work","","Used for submitting a proof-of-work solution.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"submit_hashrate","","Used for submitting mining hashrate.",1,{"inputs":[{"name":"eth"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",1,{"inputs":[{"name":"eth"}],"output":{"name":"iodelegate"}}],[8,"EthFilter","","Eth filters rpc api (polling).",null,null],[11,"new_filter","","Returns id of new filter.",2,{"inputs":[{"name":"ethfilter"},{"name":"params"}],"output":{"name":"result"}}],[11,"new_block_filter","","Returns id of new block filter.",2,{"inputs":[{"name":"ethfilter"},{"name":"params"}],"output":{"name":"result"}}],[11,"new_pending_transaction_filter","","Returns id of new block filter.",2,{"inputs":[{"name":"ethfilter"},{"name":"params"}],"output":{"name":"result"}}],[11,"filter_changes","","Returns filter changes since last poll.",2,{"inputs":[{"name":"ethfilter"},{"name":"params"}],"output":{"name":"result"}}],[11,"filter_logs","","Returns filter logs.",2,{"inputs":[{"name":"ethfilter"},{"name":"params"}],"output":{"name":"result"}}],[11,"uninstall_filter","","Uninstalls filter.",2,{"inputs":[{"name":"ethfilter"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",2,{"inputs":[{"name":"ethfilter"}],"output":{"name":"iodelegate"}}],[0,"net","ethcore_rpc::v1::traits","Net rpc interface.",null,null],[8,"Net","ethcore_rpc::v1::traits::net","Net rpc interface.",null,null],[11,"version","","Returns protocol version.",3,{"inputs":[{"name":"net"},{"name":"params"}],"output":{"name":"result"}}],[11,"peer_count","","Returns number of peers connected to node.",3,{"inputs":[{"name":"net"},{"name":"params"}],"output":{"name":"result"}}],[11,"is_listening","","Returns true if client is actively listening for network connections.\nOtherwise false.",3,{"inputs":[{"name":"net"},{"name":"params"}],"output":{"name":"result"}}],[11,"to_delegate","","Should be used to convert object to io delegate.",3,{"inputs":[{"name":"net"}],"output":{"name":"iodelegate"}}],[11,"new","ethcore_rpc::v1","Creates new Web3Client.",4,{"inputs":[{"name":"web3client"}],"output":{"name":"self"}}],[11,"client_version","","",4,{"inputs":[{"name":"web3client"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Creates new EthClient.",5,{"inputs":[{"name":"ethclient"},{"name":"arc"},{"name":"arc"}],"output":{"name":"self"}}],[11,"protocol_version","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"syncing","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"author","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"is_mining","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"hashrate","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"gas_price","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_number","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_transaction_count","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_uncles_count","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"code_at","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_by_hash","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"block_by_number","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_by_hash","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_by_block_hash_and_index","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"transaction_by_block_number_and_index","","",5,{"inputs":[{"name":"ethclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Creates new Eth filter client.",6,{"inputs":[{"name":"ethfilterclient"},{"name":"arc"}],"output":{"name":"self"}}],[11,"new_block_filter","","",6,{"inputs":[{"name":"ethfilterclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new_pending_transaction_filter","","",6,{"inputs":[{"name":"ethfilterclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"filter_changes","","",6,{"inputs":[{"name":"ethfilterclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","","Creates new NetClient.",7,{"inputs":[{"name":"netclient"},{"name":"arc"}],"output":{"name":"self"}}],[11,"version","","",7,{"inputs":[{"name":"netclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"peer_count","","",7,{"inputs":[{"name":"netclient"},{"name":"params"}],"output":{"name":"result"}}],[11,"new","ethcore_rpc","Construct new http server object with given number of threads.",8,{"inputs":[{"name":"httpserver"},{"name":"usize"}],"output":{"name":"httpserver"}}],[11,"add_delegate","","Add io delegate.",8,{"inputs":[{"name":"httpserver"},{"name":"iodelegate"}],"output":null}],[11,"start_async","","Start server asynchronously in new thread",8,{"inputs":[{"name":"httpserver"},{"name":"str"},{"name":"str"}],"output":null}]],"paths":[[8,"Web3"],[8,"Eth"],[8,"EthFilter"],[8,"Net"],[3,"Web3Client"],[3,"EthClient"],[3,"EthFilterClient"],[3,"NetClient"],[3,"HttpServer"]]};
searchIndex['parity'] = {"items":[[14,"die!","parity","",null,null]],"paths":[]};
searchIndex['ethsync'] = {"items":[[3,"EthSync","ethsync","Ethereum network protocol handler",null,null],[3,"SyncStatus","","Syncing status and statistics",null,null],[12,"state","","State",0,null],[12,"protocol_version","","Syncing protocol version. That's the maximum protocol version we connect to.",0,null],[12,"start_block_number","","BlockChain height for the moment the sync started.",0,null],[12,"last_imported_block_number","","Last fully downloaded and imported block number (if any).",0,null],[12,"highest_block_number","","Highest block number in the download queue (if any).",0,null],[12,"blocks_total","","Total number of blocks for the sync process.",0,null],[12,"blocks_received","","Number of blocks downloaded so far.",0,null],[12,"num_peers","","Total number of connected peers",0,null],[12,"num_active_peers","","Total number of active peers",0,null],[4,"SyncState","","Sync state",null,null],[13,"NotSynced","","Initial chain sync has not started yet",1,null],[13,"Idle","","Initial chain sync complete. Waiting for new packets",1,null],[13,"Waiting","","Block downloading paused. Waiting for block queue to process blocks and free some space",1,null],[13,"Blocks","","Downloading blocks",1,null],[13,"NewBlocks","","Downloading blocks learned from NewHashes packet",1,null],[11,"fmt","","",1,{"inputs":[{"name":"syncstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"syncstate"},{"name":"syncstate"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"syncstate"},{"name":"syncstate"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"syncstate"}],"output":{"name":"syncstate"}}],[11,"register","","Creates and register protocol with the network service",2,{"inputs":[{"name":"ethsync"},{"name":"networkservice"},{"name":"arc"}],"output":{"name":"arc"}}],[11,"status","","Get sync status",2,{"inputs":[{"name":"ethsync"}],"output":{"name":"syncstatus"}}],[11,"stop","","Stop sync",2,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"}],"output":null}],[11,"restart","","Restart sync",2,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"}],"output":null}],[11,"initialize","","",2,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"}],"output":null}],[11,"read","","",2,null],[11,"connected","","",2,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[11,"disconnected","","",2,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"},{"name":"peerid"}],"output":null}],[11,"timeout","","",2,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"},{"name":"timertoken"}],"output":null}],[11,"message","","",2,{"inputs":[{"name":"ethsync"},{"name":"networkcontext"},{"name":"syncmessage"}],"output":null}]],"paths":[[3,"SyncStatus"],[4,"SyncState"],[3,"EthSync"]]};
searchIndex['ethcore'] = {"items":[[0,"block","ethcore","Blockchain block.",null,null],[3,"Block","ethcore::block","A block, encoded as it is on the block chain.",null,null],[12,"header","","The header of this block.",0,null],[12,"transactions","","The transactions in this block.",0,null],[12,"uncles","","The uncles of this block.",0,null],[3,"ExecutedBlock","","Internal type for a block's common elements.",null,null],[3,"BlockRefMut","","A set of references to `ExecutedBlock` fields that are publicly accessible.",null,null],[12,"header","","Block header.",1,null],[12,"transactions","","Block transactions.",1,null],[12,"uncles","","Block uncles.",1,null],[12,"receipts","","Transaction receipts.",1,null],[12,"state","","State.",1,null],[3,"OpenBlock","","Block that is ready for transactions to be added.",null,null],[3,"ClosedBlock","","Just like OpenBlock, except that we've applied `Engine::on_close_block`, finished up the non-seal header fields,\nand collected the uncles.",null,null],[3,"SealedBlock","","A block that has a valid seal.",null,null],[5,"enact","","Enact the block given by block header, transactions and uncles",null,null],[5,"enact_bytes","","Enact the block given by `block_bytes` using `engine` on the database `db` with given `parent` block header",null,null],[5,"enact_verified","","Enact the block given by `block_bytes` using `engine` on the database `db` with given `parent` block header",null,{"inputs":[{"name":"preverifiedblock"},{"name":"engine"},{"name":"journaldb"},{"name":"header"},{"name":"lasthashes"}],"output":{"name":"result"}}],[5,"enact_and_seal","","Enact the block given by `block_bytes` using `engine` on the database `db` with given `parent` block header. Seal the block aferwards",null,null],[8,"IsBlock","","Trait for a object that is_a `ExecutedBlock`.",null,null],[10,"block","","Get the block associated with this object.",2,{"inputs":[{"name":"isblock"}],"output":{"name":"executedblock"}}],[11,"header","","Get the header associated with this object's block.",2,{"inputs":[{"name":"isblock"}],"output":{"name":"header"}}],[11,"state","","Get the final state associated with this object's block.",2,{"inputs":[{"name":"isblock"}],"output":{"name":"state"}}],[11,"transactions","","Get all information on transactions in this block.",2,{"inputs":[{"name":"isblock"}],"output":{"name":"vec"}}],[11,"receipts","","Get all information on receipts in this block.",2,{"inputs":[{"name":"isblock"}],"output":{"name":"vec"}}],[11,"uncles","","Get all uncles in this block.",2,{"inputs":[{"name":"isblock"}],"output":{"name":"vec"}}],[11,"clone","","",0,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"fmt","","",0,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"is_good","","Returns true if the given bytes form a valid encoding of a block in RLP.",0,null],[11,"decode","","",0,{"inputs":[{"name":"block"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"executedblock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fields","","Get a structure containing individual references to all public fields.",3,{"inputs":[{"name":"executedblock"}],"output":{"name":"blockrefmut"}}],[11,"block","","",3,{"inputs":[{"name":"executedblock"}],"output":{"name":"executedblock"}}],[11,"new","","Create a new OpenBlock ready for transaction pushing.",4,{"inputs":[{"name":"openblock"},{"name":"engine"},{"name":"journaldb"},{"name":"header"},{"name":"lasthashes"},{"name":"address"},{"name":"bytes"}],"output":{"name":"self"}}],[11,"set_author","","Alter the author for the block.",4,{"inputs":[{"name":"openblock"},{"name":"address"}],"output":null}],[11,"set_timestamp","","Alter the timestamp of the block.",4,{"inputs":[{"name":"openblock"},{"name":"u64"}],"output":null}],[11,"set_difficulty","","Alter the difficulty for the block.",4,{"inputs":[{"name":"openblock"},{"name":"u256"}],"output":null}],[11,"set_gas_limit","","Alter the gas limit for the block.",4,{"inputs":[{"name":"openblock"},{"name":"u256"}],"output":null}],[11,"set_gas_used","","Alter the gas limit for the block.",4,{"inputs":[{"name":"openblock"},{"name":"u256"}],"output":null}],[11,"set_extra_data","","Alter the extra_data for the block.",4,{"inputs":[{"name":"openblock"},{"name":"bytes"}],"output":{"name":"result"}}],[11,"push_uncle","","Add an uncle to the block, if possible.",4,{"inputs":[{"name":"openblock"},{"name":"header"}],"output":{"name":"result"}}],[11,"env_info","","Get the environment info concerning this block.",4,{"inputs":[{"name":"openblock"}],"output":{"name":"envinfo"}}],[11,"push_transaction","","Push a transaction into the block.",4,{"inputs":[{"name":"openblock"},{"name":"signedtransaction"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","Turn this into a `ClosedBlock`. A BlockChain must be provided in order to figure out the uncles.",4,{"inputs":[{"name":"openblock"}],"output":{"name":"closedblock"}}],[11,"block","","",4,{"inputs":[{"name":"openblock"}],"output":{"name":"executedblock"}}],[11,"block","","",5,{"inputs":[{"name":"closedblock"}],"output":{"name":"executedblock"}}],[11,"hash","","Get the hash of the header without seal arguments.",5,{"inputs":[{"name":"closedblock"}],"output":{"name":"h256"}}],[11,"seal","","Provide a valid seal in order to turn this into a `SealedBlock`.",5,{"inputs":[{"name":"closedblock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"reopen","","Turn this back into an `OpenBlock`.",5,{"inputs":[{"name":"closedblock"}],"output":{"name":"openblock"}}],[11,"drain","","Drop this object and return the underlieing database.",5,{"inputs":[{"name":"closedblock"}],"output":{"name":"journaldb"}}],[11,"rlp_bytes","","Get the RLP-encoding of the block.",6,{"inputs":[{"name":"sealedblock"}],"output":{"name":"bytes"}}],[11,"drain","","Drop this object and return the underlieing database.",6,{"inputs":[{"name":"sealedblock"}],"output":{"name":"journaldb"}}],[11,"block","","",6,{"inputs":[{"name":"sealedblock"}],"output":{"name":"executedblock"}}],[0,"blockchain","ethcore","Blockchain database.",null,null],[3,"TreeRoute","ethcore::blockchain","Represents a tree route between `from` block and `to` block:",null,null],[12,"blocks","","A vector of hashes of all blocks, ordered from `from` to `to`.",7,null],[12,"ancestor","","Best common ancestor of these blocks.",7,null],[12,"index","","An index where best common ancestor would be.",7,null],[3,"CacheSize","","Represents blockchain's in-memory cache size in bytes.",null,null],[12,"blocks","","Blocks cache size.",8,null],[12,"block_details","","BlockDetails cache size.",8,null],[12,"transaction_addresses","","Transaction addresses cache size.",8,null],[12,"block_logs","","Logs cache size.",8,null],[12,"blocks_blooms","","Blooms cache size.",8,null],[3,"BlockChain","","Structure providing fast access to blockchain data.",null,null],[8,"BlockProvider","","Interface for querying blocks by hash and by number.",null,null],[10,"is_known","","Returns true if the given block is known\n(though not necessarily a part of the canon chain).",9,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"bool"}}],[10,"block","","Get raw block data",9,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[10,"block_details","","Get the familial details concerning a block.",9,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[10,"block_hash","","Get the hash of given block's number.",9,{"inputs":[{"name":"blockprovider"},{"name":"blocknumber"}],"output":{"name":"option"}}],[10,"transaction_address","","Get the address of transaction with given hash.",9,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_header","","Get the partial-header of a block.",9,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[11,"uncles","","Get a list of uncles for a given block.\nReturns None if block deos not exist.",9,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[11,"uncle_hashes","","Get a list of uncle hashes for a given block.\nReturns None if block does not exist.",9,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_number","","Get the number of given block's hash.",9,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[11,"transaction","","Get transaction with given transaction hash.",9,{"inputs":[{"name":"blockprovider"},{"name":"transactionaddress"}],"output":{"name":"option"}}],[11,"transactions","","Get a list of transactions for a given block.\nReturns None if block does not exist.",9,{"inputs":[{"name":"blockprovider"},{"name":"h256"}],"output":{"name":"option"}}],[11,"genesis_hash","","Returns reference to genesis hash.",9,{"inputs":[{"name":"blockprovider"}],"output":{"name":"h256"}}],[11,"genesis_header","","Returns the header of the genesis block.",9,{"inputs":[{"name":"blockprovider"}],"output":{"name":"header"}}],[11,"fmt","","",8,{"inputs":[{"name":"cachesize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_known","","Returns true if the given block is known\n(though not necessarily a part of the canon chain).",10,{"inputs":[{"name":"blockchain"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"block","","Get raw block data",10,{"inputs":[{"name":"blockchain"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_details","","Get the familial details concerning a block.",10,{"inputs":[{"name":"blockchain"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_hash","","Get the hash of given block's number.",10,{"inputs":[{"name":"blockchain"},{"name":"blocknumber"}],"output":{"name":"option"}}],[11,"transaction_address","","Get the address of transaction with given hash.",10,{"inputs":[{"name":"blockchain"},{"name":"h256"}],"output":{"name":"option"}}],[11,"new","","Create new instance of blockchain from given Genesis",10,null],[11,"configure_cache","","Set the cache configuration.",10,{"inputs":[{"name":"blockchain"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"tree_route","","Returns a tree route between `from` and `to`, which is a tuple of:",10,{"inputs":[{"name":"blockchain"},{"name":"h256"},{"name":"h256"}],"output":{"name":"option"}}],[11,"insert_block","","Inserts the block into backing cache database.\nExpects the block to be valid and already verified.\nIf the block is already known, does nothing.",10,null],[11,"is_known_transaction","","Returns true if transaction is known.",10,{"inputs":[{"name":"blockchain"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"best_block_hash","","Get best block hash.",10,{"inputs":[{"name":"blockchain"}],"output":{"name":"h256"}}],[11,"best_block_number","","Get best block number.",10,{"inputs":[{"name":"blockchain"}],"output":{"name":"blocknumber"}}],[11,"best_block_total_difficulty","","Get best block total difficulty.",10,{"inputs":[{"name":"blockchain"}],"output":{"name":"u256"}}],[11,"log_blooms","","Get the transactions' log blooms of a block.",10,{"inputs":[{"name":"blockchain"},{"name":"h256"}],"output":{"name":"option"}}],[11,"cache_size","","Get current cache size.",10,{"inputs":[{"name":"blockchain"}],"output":{"name":"cachesize"}}],[11,"collect_garbage","","Ticks our cache system and throws out any old data.",10,{"inputs":[{"name":"blockchain"}],"output":null}],[0,"block_queue","ethcore","A queue of blocks. Sits between network or other I/O and the BlockChain.\nSorts them ready for blockchain insertion.",null,null],[3,"BlockQueueInfo","ethcore::block_queue","Block queue status",null,null],[12,"unverified_queue_size","","Number of queued blocks pending verification",11,null],[12,"verified_queue_size","","Number of verified queued blocks pending import",11,null],[12,"verifying_queue_size","","Number of blocks being verified",11,null],[3,"BlockQueue","","A queue of blocks. Sits between network or other I/O and the BlockChain.\nSorts them ready for blockchain insertion.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"blockqueueinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"total_queue_size","","The total size of the queues.",11,{"inputs":[{"name":"blockqueueinfo"}],"output":{"name":"usize"}}],[11,"incomplete_queue_size","","The size of the unverified and verifying queues.",11,{"inputs":[{"name":"blockqueueinfo"}],"output":{"name":"usize"}}],[11,"is_full","","Indicates that queue is full",11,{"inputs":[{"name":"blockqueueinfo"}],"output":{"name":"bool"}}],[11,"is_empty","","Indicates that queue is empty",11,{"inputs":[{"name":"blockqueueinfo"}],"output":{"name":"bool"}}],[11,"new","","Creates a new queue instance.",12,{"inputs":[{"name":"blockqueue"},{"name":"arc"},{"name":"iochannel"}],"output":{"name":"blockqueue"}}],[11,"clear","","Clear the queue and stop verification activity.",12,{"inputs":[{"name":"blockqueue"}],"output":null}],[11,"flush","","Wait for queue to be empty",12,{"inputs":[{"name":"blockqueue"}],"output":null}],[11,"block_status","","Check if the block is currently in the queue",12,{"inputs":[{"name":"blockqueue"},{"name":"h256"}],"output":{"name":"blockstatus"}}],[11,"import_block","","Add a block to the queue.",12,{"inputs":[{"name":"blockqueue"},{"name":"bytes"}],"output":{"name":"importresult"}}],[11,"mark_as_bad","","Mark given block and all its children as bad. Stops verification.",12,{"inputs":[{"name":"blockqueue"},{"name":"h256"}],"output":null}],[11,"mark_as_good","","Mark given block as processed",12,null],[11,"drain","","Removes up to `max` verified blocks from the queue",12,{"inputs":[{"name":"blockqueue"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"queue_info","","Get queue status.",12,{"inputs":[{"name":"blockqueue"}],"output":{"name":"blockqueueinfo"}}],[11,"on_panic","","",12,{"inputs":[{"name":"blockqueue"},{"name":"f"}],"output":null}],[11,"drop","","",12,{"inputs":[{"name":"blockqueue"}],"output":null}],[0,"client","ethcore","Blockchain database client.",null,null],[3,"BlockChainInfo","ethcore::client","Information about the blockchain gthered together.",null,null],[12,"total_difficulty","","Blockchain difficulty.",13,null],[12,"pending_total_difficulty","","Block queue difficulty.",13,null],[12,"genesis_hash","","Genesis block hash.",13,null],[12,"best_block_hash","","Best blockchain block hash.",13,null],[12,"best_block_number","","Best blockchain block number.",13,null],[3,"ClientReport","","Report on the status of a client.",null,null],[12,"blocks_imported","","How many blocks have been imported so far.",14,null],[12,"transactions_applied","","How many transactions have been applied so far.",14,null],[12,"gas_processed","","How much gas has been processed so far.",14,null],[3,"Client","","Blockchain database client backed by a persistent database. Owns and manages a blockchain and a block queue.\nCall `import_block()` to import a block asynchronously; `flush_queue()` flushes the queue.",null,null],[4,"BlockId","","Uniquely identifies block.",null,null],[13,"Hash","","Block's sha3.\nQuerying by hash is always faster.",15,null],[13,"Number","","Block number within canon blockchain.",15,null],[13,"Earliest","","Earliest block (genesis).",15,null],[13,"Latest","","Latest mined block.",15,null],[4,"TransactionId","","Uniquely identifies transaction.",null,null],[13,"Hash","","Transaction's sha3.",16,null],[13,"Location","","Block id and transaction index within this block.\nQuerying by block position is always faster.",16,null],[4,"BlockStatus","","General block status",null,null],[13,"InChain","","Part of the blockchain.",17,null],[13,"Queued","","Queued for import.",17,null],[13,"Bad","","Known as bad.",17,null],[13,"Unknown","","Unknown.",17,null],[8,"BlockChainClient","","Blockchain database client. Owns and manages a blockchain and a block queue.",null,null],[10,"block_header","","Get raw block header data by block id.",18,{"inputs":[{"name":"blockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"block_body","","Get raw block body data by block id.\nBlock body is an RLP list of two items: uncles and transactions.",18,{"inputs":[{"name":"blockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"block","","Get raw block data by block header hash.",18,{"inputs":[{"name":"blockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"block_status","","Get block status by block header hash.",18,{"inputs":[{"name":"blockchainclient"},{"name":"blockid"}],"output":{"name":"blockstatus"}}],[10,"block_total_difficulty","","Get block total difficulty.",18,{"inputs":[{"name":"blockchainclient"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"code","","Get address code.",18,{"inputs":[{"name":"blockchainclient"},{"name":"address"}],"output":{"name":"option"}}],[10,"transaction","","Get transaction with given hash.",18,{"inputs":[{"name":"blockchainclient"},{"name":"transactionid"}],"output":{"name":"option"}}],[10,"tree_route","","Get a tree route between `from` and `to`.\nSee `BlockChain::tree_route`.",18,{"inputs":[{"name":"blockchainclient"},{"name":"h256"},{"name":"h256"}],"output":{"name":"option"}}],[10,"state_data","","Get latest state node",18,{"inputs":[{"name":"blockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[10,"block_receipts","","Get raw block receipts data by block header hash.",18,{"inputs":[{"name":"blockchainclient"},{"name":"h256"}],"output":{"name":"option"}}],[10,"import_block","","Import a block into the blockchain.",18,{"inputs":[{"name":"blockchainclient"},{"name":"bytes"}],"output":{"name":"importresult"}}],[10,"queue_info","","Get block queue information.",18,{"inputs":[{"name":"blockchainclient"}],"output":{"name":"blockqueueinfo"}}],[10,"clear_queue","","Clear block queue and abort all import activity.",18,{"inputs":[{"name":"blockchainclient"}],"output":null}],[10,"chain_info","","Get blockchain information.",18,{"inputs":[{"name":"blockchainclient"}],"output":{"name":"blockchaininfo"}}],[11,"best_block_header","","Get the best block header.",18,{"inputs":[{"name":"blockchainclient"}],"output":{"name":"bytes"}}],[11,"clone","","",15,{"inputs":[{"name":"blockid"}],"output":{"name":"blockid"}}],[11,"eq","","",15,{"inputs":[{"name":"blockid"},{"name":"blockid"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"blockid"},{"name":"blockid"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"blockid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"transactionid"}],"output":{"name":"transactionid"}}],[11,"eq","","",16,{"inputs":[{"name":"transactionid"},{"name":"transactionid"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"transactionid"},{"name":"transactionid"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"transactionid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"blockstatus"},{"name":"blockstatus"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"blockstatus"},{"name":"blockstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"blockstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"blockchaininfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"blockchaininfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"clientreport"},{"name":"clientreport"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"clientreport"},{"name":"clientreport"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"clientreport"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"clientreport"}],"output":{"name":"clientreport"}}],[11,"default","","",14,{"inputs":[{"name":"clientreport"}],"output":{"name":"clientreport"}}],[11,"accrue_block","","Alter internal reporting to reflect the additional `block` has been processed.",14,{"inputs":[{"name":"clientreport"},{"name":"preverifiedblock"}],"output":null}],[11,"new","","Create a new client with given spec and DB path.",19,{"inputs":[{"name":"client"},{"name":"spec"},{"name":"path"},{"name":"iochannel"}],"output":{"name":"result"}}],[11,"flush_queue","","Flush the block import queue.",19,{"inputs":[{"name":"client"}],"output":null}],[11,"import_verified_blocks","","This is triggered by a message coming from a block queue when the block is ready for insertion",19,{"inputs":[{"name":"client"},{"name":"iochannel"}],"output":{"name":"usize"}}],[11,"state","","Get a copy of the best block's state.",19,{"inputs":[{"name":"client"}],"output":{"name":"state"}}],[11,"cache_info","","Get info on the cache.",19,{"inputs":[{"name":"client"}],"output":{"name":"cachesize"}}],[11,"report","","Get the report.",19,{"inputs":[{"name":"client"}],"output":{"name":"clientreport"}}],[11,"tick","","Tick the client.",19,{"inputs":[{"name":"client"}],"output":null}],[11,"configure_cache","","Set up the cache behaviour.",19,{"inputs":[{"name":"client"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"block_header","","",19,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"block_body","","",19,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"block","","",19,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"block_status","","",19,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"blockstatus"}}],[11,"block_total_difficulty","","",19,{"inputs":[{"name":"client"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"code","","",19,{"inputs":[{"name":"client"},{"name":"address"}],"output":{"name":"option"}}],[11,"transaction","","",19,{"inputs":[{"name":"client"},{"name":"transactionid"}],"output":{"name":"option"}}],[11,"tree_route","","",19,{"inputs":[{"name":"client"},{"name":"h256"},{"name":"h256"}],"output":{"name":"option"}}],[11,"state_data","","",19,{"inputs":[{"name":"client"},{"name":"h256"}],"output":{"name":"option"}}],[11,"block_receipts","","",19,{"inputs":[{"name":"client"},{"name":"h256"}],"output":{"name":"option"}}],[11,"import_block","","",19,{"inputs":[{"name":"client"},{"name":"bytes"}],"output":{"name":"importresult"}}],[11,"queue_info","","",19,{"inputs":[{"name":"client"}],"output":{"name":"blockqueueinfo"}}],[11,"clear_queue","","",19,{"inputs":[{"name":"client"}],"output":null}],[11,"chain_info","","",19,{"inputs":[{"name":"client"}],"output":{"name":"blockchaininfo"}}],[11,"on_panic","","",19,{"inputs":[{"name":"client"},{"name":"f"}],"output":null}],[0,"error","ethcore","General error types for use in ethcore.",null,null],[4,"ExecutionError","ethcore::error","Result of executing the transaction.",null,null],[13,"NotEnoughBaseGas","","Returned when there gas paid for transaction execution is\nlower than base gas required.",20,null],[12,"required","ethcore::error::ExecutionError","Absolute minimum gas required.",20,null],[12,"got","","Gas provided.",20,null],[13,"BlockGasLimitReached","ethcore::error","Returned when block (gas_used + gas) > gas_limit.",20,null],[12,"gas_limit","ethcore::error::ExecutionError","Gas limit of block for transaction.",20,null],[12,"gas_used","","Gas used in block prior to transaction.",20,null],[12,"gas","","Amount of gas in block.",20,null],[13,"InvalidNonce","ethcore::error","Returned when transaction nonce does not match state nonce.",20,null],[12,"expected","ethcore::error::ExecutionError","Nonce expected.",20,null],[12,"got","","Nonce found.",20,null],[13,"NotEnoughCash","ethcore::error","Returned when cost of transaction (value + gas_price * gas) exceeds\ncurrent sender balance.",20,null],[12,"required","ethcore::error::ExecutionError","Minimum required balance.",20,null],[12,"got","","Actual balance.",20,null],[13,"Internal","ethcore::error","Returned when internal evm error occurs.",20,null],[4,"TransactionError","","Errors concerning transaction proessing.",null,null],[13,"InvalidGasLimit","","Transaction's gas limit (aka gas) is invalid.",21,null],[4,"BlockError","","Errors concerning block processing.",null,null],[13,"TooManyUncles","","Block has too many uncles.",22,null],[13,"ExtraDataOutOfBounds","","Extra data is of an invalid length.",22,null],[13,"InvalidSealArity","","Seal is incorrect format.",22,null],[13,"TooMuchGasUsed","","Block has too much gas used.",22,null],[13,"InvalidUnclesHash","","Uncles hash in header is invalid.",22,null],[13,"UncleTooOld","","An uncle is from a generation too old.",22,null],[13,"UncleIsBrother","","An uncle is from the same generation as the block.",22,null],[13,"UncleInChain","","An uncle is already in the chain.",22,null],[13,"UncleParentNotInChain","","An uncle has a parent not in the chain.",22,null],[13,"InvalidStateRoot","","State root header field is invalid.",22,null],[13,"InvalidGasUsed","","Gas used header field is invalid.",22,null],[13,"InvalidTransactionsRoot","","Transactions root header field is invalid.",22,null],[13,"DifficultyOutOfBounds","","Difficulty is out of range; this can be used as an looser error prior to getting a definitive\nvalue for difficulty. This error needs only provide bounds of which it is out.",22,null],[13,"InvalidDifficulty","","Difficulty header field is invalid; this is a strong error used after getting a definitive\nvalue for difficulty (which is provided).",22,null],[13,"MismatchedH256SealElement","","Seal element of type H256 (max_hash for Ethash, but could be something else for\nother seal engines) is out of bounds.",22,null],[13,"InvalidProofOfWork","","Proof-of-work aspect of seal, which we assume is a 256-bit value, is invalid.",22,null],[13,"InvalidGasLimit","","Gas limit header field is invalid.",22,null],[13,"InvalidReceiptsRoot","","Receipts trie root header field is invalid.",22,null],[13,"InvalidTimestamp","","Timestamp header field is invalid.",22,null],[13,"InvalidLogBloom","","Log bloom header field is invalid.",22,null],[13,"InvalidParentHash","","Parent hash field of header is invalid; this is an invalid error indicating a logic flaw in the codebase.\nTODO: remove and favour an assert!/panic!.",22,null],[13,"InvalidNumber","","Number field of header is invalid.",22,null],[13,"RidiculousNumber","","Block number isn't sensible.",22,null],[13,"UnknownParent","","Parent given is unknown.",22,null],[13,"UnknownUncleParent","","Uncle parent given is unknown.",22,null],[4,"ImportError","","Import to the block queue result",null,null],[13,"Bad","","Bad block detected",23,null],[13,"AlreadyInChain","","Already in the block chain",23,null],[13,"AlreadyQueued","","Already in the block queue",23,null],[13,"UnknownParent","","Unknown parent",23,null],[4,"Error","","General error type which should be capable of representing all errors in ethcore.",null,null],[13,"Util","","Error concerning a utility.",24,null],[13,"Block","","Error concerning block processing.",24,null],[13,"UnknownEngineName","","Unknown engine given.",24,null],[13,"Execution","","Error concerning EVM code execution.",24,null],[13,"Transaction","","Error concerning transaction processing.",24,null],[6,"ImportResult","","Result of import block operation.",null,null],[11,"fmt","","",20,{"inputs":[{"name":"executionerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"executionerror"},{"name":"executionerror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"executionerror"},{"name":"executionerror"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"transactionerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"blockerror"},{"name":"blockerror"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"blockerror"},{"name":"blockerror"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"blockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"importerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",23,{"inputs":[{"name":"importerror"},{"name":"error"}],"output":{"name":"importerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",24,{"inputs":[{"name":"error"},{"name":"transactionerror"}],"output":{"name":"error"}}],[11,"from","","",24,{"inputs":[{"name":"error"},{"name":"blockerror"}],"output":{"name":"error"}}],[11,"from","","",24,{"inputs":[{"name":"error"},{"name":"executionerror"}],"output":{"name":"error"}}],[11,"from","","",24,{"inputs":[{"name":"error"},{"name":"cryptoerror"}],"output":{"name":"error"}}],[11,"from","","",24,{"inputs":[{"name":"error"},{"name":"decodererror"}],"output":{"name":"error"}}],[11,"from","","",24,{"inputs":[{"name":"error"},{"name":"utilerror"}],"output":{"name":"error"}}],[11,"from","","",24,{"inputs":[{"name":"error"},{"name":"ioerror"}],"output":{"name":"error"}}],[0,"ethereum","ethcore","Ethereum protocol module.",null,null],[5,"new_olympic","ethcore::ethereum","Create a new Olympic chain spec.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_frontier","","Create a new Frontier mainnet chain spec.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_frontier_test","","Create a new Frontier chain spec as though it never changes to Homestead.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_homestead_test","","Create a new Homestead chain spec as though it never changed from Frontier.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_mainnet_like","","Create a new Frontier main net chain spec without genesis accounts.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_morden","","Create a new Morden chain spec.",null,{"inputs":[],"output":{"name":"spec"}}],[0,"ethash","","Export the ethash module.",null,null],[3,"Ethash","ethcore::ethereum::ethash","Engine using Ethash proof-of-work consensus algorithm, suitable for Ethereum\nmainnet chains in the Olympic, Frontier and Homestead eras.",null,null],[11,"new_boxed","","Create a new boxed instance of Ethash engine",25,{"inputs":[{"name":"ethash"},{"name":"spec"}],"output":{"name":"box"}}],[0,"denominations","ethcore::ethereum","Export the denominations module.",null,null],[5,"ether","ethcore::ethereum::denominations","1 Ether in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[5,"finney","","1 Finney in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[5,"szabo","","1 Szabo in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[5,"shannon","","1 Shannon in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[5,"wei","","1 Wei in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[0,"header","ethcore","Block header.",null,null],[3,"Header","ethcore::header","A block header.",null,null],[12,"parent_hash","","Parent hash.",26,null],[12,"timestamp","","Block timestamp.",26,null],[12,"number","","Block number.",26,null],[12,"author","","Block author.",26,null],[12,"transactions_root","","Transactions root.",26,null],[12,"uncles_hash","","Block uncles hash.",26,null],[12,"extra_data","","Block extra data.",26,null],[12,"state_root","","State root.",26,null],[12,"receipts_root","","Block receipts root.",26,null],[12,"log_bloom","","Block bloom.",26,null],[12,"gas_used","","Gas used for contracts execution.",26,null],[12,"gas_limit","","Block gas limit.",26,null],[12,"difficulty","","Block difficulty.",26,null],[12,"seal","","Block seal.",26,null],[12,"hash","","The memoized hash of the RLP representation *including* the seal fields.",26,null],[12,"bare_hash","","The memoized hash of the RLP representation *without* the seal fields.",26,null],[6,"BlockNumber","","Type for Block number",null,null],[11,"clone","","",26,{"inputs":[{"name":"header"}],"output":{"name":"header"}}],[11,"fmt","","",26,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",26,{"inputs":[{"name":"header"}],"output":{"name":"self"}}],[11,"new","","Create a new, default-valued, header.",26,{"inputs":[{"name":"header"}],"output":{"name":"self"}}],[11,"number","","Get the number field of the header.",26,{"inputs":[{"name":"header"}],"output":{"name":"blocknumber"}}],[11,"timestamp","","Get the timestamp field of the header.",26,{"inputs":[{"name":"header"}],"output":{"name":"u64"}}],[11,"author","","Get the author field of the header.",26,{"inputs":[{"name":"header"}],"output":{"name":"address"}}],[11,"extra_data","","Get the extra data field of the header.",26,{"inputs":[{"name":"header"}],"output":{"name":"bytes"}}],[11,"state_root","","Get the state root field of the header.",26,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"receipts_root","","Get the receipts root field of the header.",26,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"gas_limit","","Get the gas limit field of the header.",26,{"inputs":[{"name":"header"}],"output":{"name":"u256"}}],[11,"difficulty","","Get the difficulty field of the header.",26,{"inputs":[{"name":"header"}],"output":{"name":"u256"}}],[11,"seal","","Get the seal field of the header.",26,{"inputs":[{"name":"header"}],"output":{"name":"vec"}}],[11,"set_number","","Set the number field of the header.",26,{"inputs":[{"name":"header"},{"name":"blocknumber"}],"output":null}],[11,"set_timestamp","","Set the timestamp field of the header.",26,{"inputs":[{"name":"header"},{"name":"u64"}],"output":null}],[11,"set_timestamp_now","","Set the timestamp field of the header to the current time.",26,{"inputs":[{"name":"header"}],"output":null}],[11,"set_author","","Set the author field of the header.",26,{"inputs":[{"name":"header"},{"name":"address"}],"output":null}],[11,"set_extra_data","","Set the extra data field of the header.",26,{"inputs":[{"name":"header"},{"name":"bytes"}],"output":null}],[11,"set_gas_used","","Set the gas used field of the header.",26,{"inputs":[{"name":"header"},{"name":"u256"}],"output":null}],[11,"set_gas_limit","","Set the gas limit field of the header.",26,{"inputs":[{"name":"header"},{"name":"u256"}],"output":null}],[11,"set_difficulty","","Set the difficulty field of the header.",26,{"inputs":[{"name":"header"},{"name":"u256"}],"output":null}],[11,"set_seal","","Set the seal field of the header.",26,{"inputs":[{"name":"header"},{"name":"vec"}],"output":null}],[11,"hash","","Get the hash of this header (sha3 of the RLP).",26,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"bare_hash","","Get the hash of the header excluding the seal",26,{"inputs":[{"name":"header"}],"output":{"name":"h256"}}],[11,"note_dirty","","Note that some fields have changed. Resets the memoised hash.",26,{"inputs":[{"name":"header"}],"output":null}],[11,"stream_rlp","","Place this header into an RLP stream `s`, optionally `with_seal`.",26,{"inputs":[{"name":"header"},{"name":"rlpstream"},{"name":"seal"}],"output":null}],[11,"rlp","","Get the RLP of this header, optionally `with_seal`.",26,{"inputs":[{"name":"header"},{"name":"seal"}],"output":{"name":"bytes"}}],[11,"rlp_sha3","","Get the SHA3 (Keccak) of this header, optionally `with_seal`.",26,{"inputs":[{"name":"header"},{"name":"seal"}],"output":{"name":"h256"}}],[11,"decode","","",26,{"inputs":[{"name":"header"},{"name":"d"}],"output":{"name":"result"}}],[11,"rlp_append","","",26,{"inputs":[{"name":"header"},{"name":"rlpstream"}],"output":null}],[0,"service","ethcore","Creates and registers client and network services.",null,null],[3,"ClientService","ethcore::service","Client service setup. Creates and registers client and network services with the IO subsystem.",null,null],[4,"SyncMessage","","Message type for external and internal events",null,null],[13,"NewChainBlock","","New block has been imported into the blockchain",27,null],[13,"BlockVerified","","A block is ready",27,null],[6,"NetSyncMessage","","IO Message type used for Network service",null,null],[11,"clone","","",27,{"inputs":[{"name":"syncmessage"}],"output":{"name":"syncmessage"}}],[11,"start","","Start the service in a separate thread.",28,{"inputs":[{"name":"clientservice"},{"name":"spec"},{"name":"networkconfiguration"},{"name":"path"}],"output":{"name":"result"}}],[11,"add_node","","Add a node to network",28,{"inputs":[{"name":"clientservice"},{"name":"str"}],"output":null}],[11,"io","","Get general IO interface",28,{"inputs":[{"name":"clientservice"}],"output":{"name":"ioservice"}}],[11,"client","","Get client interface",28,{"inputs":[{"name":"clientservice"}],"output":{"name":"arc"}}],[11,"network","","Get network service component",28,{"inputs":[{"name":"clientservice"}],"output":{"name":"networkservice"}}],[11,"on_panic","","",28,{"inputs":[{"name":"clientservice"},{"name":"f"}],"output":null}],[0,"spec","ethcore","Parameters for a block chain.",null,null],[3,"Spec","ethcore::spec","Parameters for a block chain; includes both those intrinsic to the design of the\nchain and those to be interpreted by the active chain engine.",null,null],[12,"name","","User friendly spec name",29,null],[12,"engine_name","","What engine are we using for this?",29,null],[12,"nodes","","Known nodes on the network in enode format.",29,null],[12,"engine_params","","Parameters concerning operation of the specific engine we're using.\nMaps the parameter name to an RLP-encoded value.",29,null],[12,"builtins","","Builtin-contracts we would like to see in the chain.\n(In principle these are just hints for the engine since that has the last word on them.)",29,null],[12,"parent_hash","","The genesis block's parent hash field.",29,null],[12,"author","","The genesis block's author field.",29,null],[12,"difficulty","","The genesis block's difficulty field.",29,null],[12,"gas_limit","","The genesis block's gas limit field.",29,null],[12,"gas_used","","The genesis block's gas used field.",29,null],[12,"timestamp","","The genesis block's timestamp field.",29,null],[12,"transactions_root","","Transactions root of the genesis block. Should be SHA3_NULL_RLP.",29,null],[12,"receipts_root","","Receipts root of the genesis block. Should be SHA3_NULL_RLP.",29,null],[12,"extra_data","","The genesis block's extra data field.",29,null],[12,"seal_fields","","The number of seal fields in the genesis block.",29,null],[12,"seal_rlp","","Each seal field, expressed as RLP, concatenated.",29,null],[11,"fmt","","",29,{"inputs":[{"name":"spec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_engine","","Convert this object into a boxed Engine of the right underlying type.",29,{"inputs":[{"name":"spec"}],"output":{"name":"result"}}],[11,"state_root","","Return the state root for the genesis state, memoising accordingly.",29,{"inputs":[{"name":"spec"}],"output":{"name":"h256"}}],[11,"nodes","","Get the known knodes of the network in enode format.",29,{"inputs":[{"name":"spec"}],"output":{"name":"vec"}}],[11,"genesis_header","","Get the header of the genesis block.",29,{"inputs":[{"name":"spec"}],"output":{"name":"header"}}],[11,"genesis_block","","Compose the genesis block for this chain.",29,{"inputs":[{"name":"spec"}],"output":{"name":"bytes"}}],[11,"overwrite_genesis","","Overwrite the genesis components with the given JSON, assuming standard Ethereum test format.",29,{"inputs":[{"name":"spec"},{"name":"json"}],"output":null}],[11,"set_genesis_state","","Alter the value of the genesis state.",29,{"inputs":[{"name":"spec"},{"name":"podstate"}],"output":null}],[11,"is_state_root_valid","","Returns `false` if the memoized state root is invalid. `true` otherwise.",29,{"inputs":[{"name":"spec"}],"output":{"name":"bool"}}],[11,"from_json","","Loads a chain-specification from a json data structure",29,{"inputs":[{"name":"spec"},{"name":"json"}],"output":{"name":"spec"}}],[11,"ensure_db_good","","Ensure that the given state DB has the trie nodes in for the genesis state.",29,{"inputs":[{"name":"spec"},{"name":"hashdb"}],"output":{"name":"bool"}}],[11,"from_json_utf8","","Create a new Spec from a JSON UTF-8 data resource `data`.",29,null],[11,"from_json_str","","Create a new Spec from a JSON string.",29,{"inputs":[{"name":"spec"},{"name":"str"}],"output":{"name":"spec"}}],[11,"new_test","","Create a new Spec which conforms to the Morden chain except that it's a NullEngine consensus.",29,{"inputs":[{"name":"spec"}],"output":{"name":"spec"}}],[0,"transaction","ethcore","Transaction data structure.",null,null],[3,"Transaction","ethcore::transaction","A set of information describing an externally-originating message call\nor contract creation operation.",null,null],[12,"nonce","","Nonce.",30,null],[12,"gas_price","","Gas price.",30,null],[12,"gas","","Gas paid up front for transaction execution.",30,null],[12,"action","","Action, can be either call or contract create.",30,null],[12,"value","","Transfered value.",30,null],[12,"data","","Transaction data.",30,null],[3,"SignedTransaction","","Signed transaction information.",null,null],[3,"LocalizedTransaction","","Signed Transaction that is a part of canon blockchain.",null,null],[12,"signed","","Signed part.",31,null],[12,"block_number","","Block number.",31,null],[12,"block_hash","","Block hash.",31,null],[12,"transaction_index","","Transaction index within block.",31,null],[4,"Action","","Transaction action type.",null,null],[13,"Create","","Create creates new contract.",32,null],[13,"Call","","Calls contract at given address.",32,null],[11,"eq","","",32,{"inputs":[{"name":"action"},{"name":"action"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"action"},{"name":"action"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"action"}],"output":{"name":"action"}}],[11,"fmt","","",32,{"inputs":[{"name":"action"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",32,{"inputs":[{"name":"action"}],"output":{"name":"action"}}],[11,"decode","","",32,{"inputs":[{"name":"action"},{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"transaction"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"transaction"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"transaction"}],"output":{"name":"transaction"}}],[11,"fmt","","",30,{"inputs":[{"name":"transaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",30,{"inputs":[{"name":"transaction"}],"output":{"name":"transaction"}}],[11,"rlp_append_unsigned_transaction","","Append object with a without signature into RLP stream",30,{"inputs":[{"name":"transaction"},{"name":"rlpstream"}],"output":null}],[11,"from_json","","",33,{"inputs":[{"name":"signedtransaction"},{"name":"json"}],"output":{"name":"signedtransaction"}}],[11,"hash","","The message hash of the transaction.",30,{"inputs":[{"name":"transaction"}],"output":{"name":"h256"}}],[11,"sign","","Signs the transaction as coming from `sender`.",30,{"inputs":[{"name":"transaction"},{"name":"secret"}],"output":{"name":"signedtransaction"}}],[11,"gas_required_for","","Get the transaction cost in gas for the given params.",30,null],[11,"gas_required","","Get the transaction cost in gas for this transaction.",30,{"inputs":[{"name":"transaction"},{"name":"schedule"}],"output":{"name":"u64"}}],[11,"clone","","",33,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"signedtransaction"}}],[11,"fmt","","",33,{"inputs":[{"name":"signedtransaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"signedtransaction"},{"name":"signedtransaction"}],"output":{"name":"bool"}}],[11,"deref","","",33,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"target"}}],[11,"decode","","",33,{"inputs":[{"name":"signedtransaction"},{"name":"d"}],"output":{"name":"result"}}],[11,"rlp_append","","",33,{"inputs":[{"name":"signedtransaction"},{"name":"rlpstream"}],"output":null}],[11,"rlp_append_sealed_transaction","","Append object with a signature into RLP stream",33,{"inputs":[{"name":"signedtransaction"},{"name":"rlpstream"}],"output":null}],[11,"hash","","Get the hash of this header (sha3 of the RLP).",33,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"h256"}}],[11,"standard_v","","0 is `v` is 27, 1 if 28, and 4 otherwise.",33,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"u8"}}],[11,"signature","","Construct a signature object from the sig.",33,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"signature"}}],[11,"check_low_s","","Checks whether the signature has a low 's' value.",33,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"result"}}],[11,"sender","","Returns transaction sender.",33,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"localizedtransaction"},{"name":"localizedtransaction"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"localizedtransaction"},{"name":"localizedtransaction"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"localizedtransaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",31,{"inputs":[{"name":"localizedtransaction"}],"output":{"name":"target"}}],[0,"views","ethcore","Block oriented views onto rlp.",null,null],[3,"TransactionView","ethcore::views","View onto transaction rlp.",null,null],[3,"AccountView","","View onto transaction rlp.",null,null],[3,"BlockView","","View onto block rlp.",null,null],[3,"HeaderView","","View onto block header rlp.",null,null],[11,"new","","Creates new view onto block from raw bytes.",34,null],[11,"new_from_rlp","","Creates new view onto block from rlp.",34,{"inputs":[{"name":"transactionview"},{"name":"rlp"}],"output":{"name":"transactionview"}}],[11,"rlp","","Return reference to underlaying rlp.",34,{"inputs":[{"name":"transactionview"}],"output":{"name":"rlp"}}],[11,"nonce","","Get the nonce field of the transaction.",34,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"gas_price","","Get the gas_price field of the transaction.",34,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"gas","","Get the gas field of the transaction.",34,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"value","","Get the value field of the transaction.",34,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"data","","Get the data field of the transaction.",34,{"inputs":[{"name":"transactionview"}],"output":{"name":"bytes"}}],[11,"v","","Get the v field of the transaction.",34,{"inputs":[{"name":"transactionview"}],"output":{"name":"u8"}}],[11,"r","","Get the r field of the transaction.",34,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"s","","Get the s field of the transaction.",34,{"inputs":[{"name":"transactionview"}],"output":{"name":"u256"}}],[11,"sha3","","",34,{"inputs":[{"name":"transactionview"}],"output":{"name":"h256"}}],[11,"new","","Creates new view onto block from raw bytes.",35,null],[11,"new_from_rlp","","Creates new view onto block from rlp.",35,{"inputs":[{"name":"accountview"},{"name":"rlp"}],"output":{"name":"accountview"}}],[11,"rlp","","Return reference to underlaying rlp.",35,{"inputs":[{"name":"accountview"}],"output":{"name":"rlp"}}],[11,"nonce","","Get the nonce field of the transaction.",35,{"inputs":[{"name":"accountview"}],"output":{"name":"u256"}}],[11,"balance","","Get the gas_price field of the transaction.",35,{"inputs":[{"name":"accountview"}],"output":{"name":"u256"}}],[11,"storage_root","","Get the gas field of the transaction.",35,{"inputs":[{"name":"accountview"}],"output":{"name":"h256"}}],[11,"code_hash","","Get the value field of the transaction.",35,{"inputs":[{"name":"accountview"}],"output":{"name":"h256"}}],[11,"new","","Creates new view onto block from raw bytes.",36,null],[11,"new_from_rlp","","Creates new view onto block from rlp.",36,{"inputs":[{"name":"blockview"},{"name":"rlp"}],"output":{"name":"blockview"}}],[11,"rlp","","Return reference to underlaying rlp.",36,{"inputs":[{"name":"blockview"}],"output":{"name":"rlp"}}],[11,"header","","Create new Header object from header rlp.",36,{"inputs":[{"name":"blockview"}],"output":{"name":"header"}}],[11,"header_view","","Create new header view obto block head rlp.",36,{"inputs":[{"name":"blockview"}],"output":{"name":"headerview"}}],[11,"transactions","","Return List of transactions in given block.",36,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"localized_transactions","","Return List of transactions with additional localization info.",36,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"transactions_count","","Return number of transactions in given block, without deserializing them.",36,{"inputs":[{"name":"blockview"}],"output":{"name":"usize"}}],[11,"transaction_views","","Return List of transactions in given block.",36,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"transaction_hashes","","Return transaction hashes.",36,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"transaction_at","","Returns transaction at given index without deserializing unnecessary data.",36,{"inputs":[{"name":"blockview"},{"name":"usize"}],"output":{"name":"option"}}],[11,"localized_transaction_at","","Returns localized transaction at given index.",36,{"inputs":[{"name":"blockview"},{"name":"usize"}],"output":{"name":"option"}}],[11,"uncles","","Return list of uncles of given block.",36,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"uncles_count","","Return number of uncles in given block, without deserializing them.",36,{"inputs":[{"name":"blockview"}],"output":{"name":"usize"}}],[11,"uncle_views","","Return List of transactions in given block.",36,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"uncle_hashes","","Return list of uncle hashes of given block.",36,{"inputs":[{"name":"blockview"}],"output":{"name":"vec"}}],[11,"sha3","","",36,{"inputs":[{"name":"blockview"}],"output":{"name":"h256"}}],[11,"new","","Creates new view onto header from raw bytes.",37,null],[11,"new_from_rlp","","Creates new view onto header from rlp.",37,{"inputs":[{"name":"headerview"},{"name":"rlp"}],"output":{"name":"headerview"}}],[11,"rlp","","Returns raw rlp.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"rlp"}}],[11,"parent_hash","","Returns parent hash.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"uncles_hash","","Returns uncles hash.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"author","","Returns author.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"address"}}],[11,"state_root","","Returns state root.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"transactions_root","","Returns transactions root.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"receipts_root","","Returns block receipts root.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[11,"log_bloom","","Returns block log bloom.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"h2048"}}],[11,"difficulty","","Returns block difficulty.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"u256"}}],[11,"number","","Returns block number.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"blocknumber"}}],[11,"gas_limit","","Returns block gas limit.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"u256"}}],[11,"gas_used","","Returns block gas used.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"u256"}}],[11,"timestamp","","Returns timestamp.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"u64"}}],[11,"extra_data","","Returns block extra data.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"bytes"}}],[11,"seal","","Returns block seal.",37,{"inputs":[{"name":"headerview"}],"output":{"name":"vec"}}],[11,"sha3","","",37,{"inputs":[{"name":"headerview"}],"output":{"name":"h256"}}],[0,"receipt","ethcore","Receipt",null,null],[3,"Receipt","ethcore::receipt","Information describing execution of a transaction.",null,null],[12,"state_root","","The state root after executing the transaction.",38,null],[12,"gas_used","","The total gas used in the block following execution of the transaction.",38,null],[12,"log_bloom","","The OR-wide combination of all logs' blooms for this transaction.",38,null],[12,"logs","","The logs stemming from this transaction.",38,null],[11,"clone","","",38,{"inputs":[{"name":"receipt"}],"output":{"name":"receipt"}}],[11,"fmt","","",38,{"inputs":[{"name":"receipt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",38,{"inputs":[{"name":"receipt"}],"output":{"name":"receipt"}}],[11,"new","","Create a new receipt.",38,{"inputs":[{"name":"receipt"},{"name":"h256"},{"name":"u256"},{"name":"vec"}],"output":{"name":"receipt"}}],[11,"rlp_append","","",38,{"inputs":[{"name":"receipt"},{"name":"rlpstream"}],"output":null}],[14,"evm_test!","ethcore","Create tests by injecting different VM factories",null,null],[14,"evm_test_ignore!","","Create ignored tests by injecting different VM factories",null,null]],"paths":[[3,"Block"],[3,"BlockRefMut"],[8,"IsBlock"],[3,"ExecutedBlock"],[3,"OpenBlock"],[3,"ClosedBlock"],[3,"SealedBlock"],[3,"TreeRoute"],[3,"CacheSize"],[8,"BlockProvider"],[3,"BlockChain"],[3,"BlockQueueInfo"],[3,"BlockQueue"],[3,"BlockChainInfo"],[3,"ClientReport"],[4,"BlockId"],[4,"TransactionId"],[4,"BlockStatus"],[8,"BlockChainClient"],[3,"Client"],[4,"ExecutionError"],[4,"TransactionError"],[4,"BlockError"],[4,"ImportError"],[4,"Error"],[3,"Ethash"],[3,"Header"],[4,"SyncMessage"],[3,"ClientService"],[3,"Spec"],[3,"Transaction"],[3,"LocalizedTransaction"],[4,"Action"],[3,"SignedTransaction"],[3,"TransactionView"],[3,"AccountView"],[3,"BlockView"],[3,"HeaderView"],[3,"Receipt"]]};
searchIndex['ethash'] = {"items":[[3,"ProofOfWork","ethash","Computation result",null,null],[12,"value","","Difficulty boundary",0,null],[12,"mix_hash","","Mix",0,null],[3,"EthashManager","","Lighy/Full cache manager",null,null],[5,"quick_get_difficulty","","Difficulty quick check for POW preverification",null,{"inputs":[{"name":"h256"},{"name":"u64"},{"name":"h256"}],"output":{"name":"h256"}}],[6,"H256","","",null,null],[17,"ETHASH_EPOCH_LENGTH","","",null,null],[11,"new","","Create a new new instance of ethash manager",1,{"inputs":[{"name":"ethashmanager"}],"output":{"name":"ethashmanager"}}],[11,"compute_light","","Calculate the light client data\n`block_number` - Block number to check\n`light` - The light client handler\n`header_hash` - The header hash to pack into the mix\n`nonce` - The nonce to pack into the mix",1,{"inputs":[{"name":"ethashmanager"},{"name":"u64"},{"name":"h256"},{"name":"u64"}],"output":{"name":"proofofwork"}}]],"paths":[[3,"ProofOfWork"],[3,"EthashManager"]]};
initSearch(searchIndex);
